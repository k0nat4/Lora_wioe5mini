
Lora-wioe5mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08008720  08008720  00009720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089c0  080089c0  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080089c0  080089c0  000099c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089c8  080089c8  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089c8  080089c8  000099c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089cc  080089cc  000099cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080089d0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000068  08008a38  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08008a38  0000a4d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fdb  00000000  00000000  0000a092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000384a  00000000  00000000  0002206d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  000258b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f7  00000000  00000000  00027090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fdd7  00000000  00000000  00028287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e1f  00000000  00000000  0004805e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9fd0  00000000  00000000  0005fe7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119e4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006938  00000000  00000000  00119e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001207c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	08008708 	.word	0x08008708

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	08008708 	.word	0x08008708

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000558:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800055a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000570:	68fb      	ldr	r3, [r7, #12]
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <__io_putchar>:

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int __io_putchar(int ch) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000584:	1d39      	adds	r1, r7, #4
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	2201      	movs	r2, #1
 800058c:	4803      	ldr	r0, [pc, #12]	@ (800059c <__io_putchar+0x20>)
 800058e:	f002 ff8e 	bl	80034ae <HAL_UART_Transmit>
  return ch;
 8000592:	687b      	ldr	r3, [r7, #4]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000090 	.word	0x20000090

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fcb4 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f81c 	bl	80005e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemCoreClockUpdate();
 80005ac:	f000 fb62 	bl	8000c74 <SystemCoreClockUpdate>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f922 	bl	80007f8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005b4:	f000 f888 	bl	80006c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 f8d2 	bl	8000760 <MX_USART2_UART_Init>
  MX_SubGHz_Phy_Init();
 80005bc:	f006 fe95 	bl	80072ea <MX_SubGHz_Phy_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 80005c0:	f006 fe9b 	bl	80072fa <MX_SubGHz_Phy_Process>
    printf("Tick: %lu\r\n", HAL_GetTick());
 80005c4:	f000 fd10 	bl	8000fe8 <HAL_GetTick>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4619      	mov	r1, r3
 80005cc:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <main+0x40>)
 80005ce:	f007 fa35 	bl	8007a3c <iprintf>
    HAL_Delay(1000);
 80005d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005d6:	f000 fd11 	bl	8000ffc <HAL_Delay>
    MX_SubGHz_Phy_Process();
 80005da:	bf00      	nop
 80005dc:	e7f0      	b.n	80005c0 <main+0x20>
 80005de:	bf00      	nop
 80005e0:	08008720 	.word	0x08008720

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09a      	sub	sp, #104	@ 0x68
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2248      	movs	r2, #72	@ 0x48
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f007 fa77 	bl	8007ae6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]
 8000606:	615a      	str	r2, [r3, #20]
 8000608:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060a:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <SystemClock_Config+0xbc>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000612:	4a23      	ldr	r2, [pc, #140]	@ (80006a0 <SystemClock_Config+0xbc>)
 8000614:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000618:	6013      	str	r3, [r2, #0]
 800061a:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <SystemClock_Config+0xbc>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000626:	2301      	movs	r3, #1
 8000628:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 800062a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800062e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000638:	2303      	movs	r3, #3
 800063a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800063c:	2310      	movs	r3, #16
 800063e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 8000640:	2306      	movs	r3, #6
 8000642:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000648:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800064e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000650:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000654:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fa1e 	bl	8001a9c <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000666:	f000 f915 	bl	8000894 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800066a:	234f      	movs	r3, #79	@ 0x4f
 800066c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2303      	movs	r3, #3
 8000670:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2102      	movs	r1, #2
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fd8a 	bl	80021a0 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000692:	f000 f8ff 	bl	8000894 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3768      	adds	r7, #104	@ 0x68
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	58000400 	.word	0x58000400

080006a4 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
void MX_SUBGHZ_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_SUBGHZ_Init+0x20>)
 80006aa:	2210      	movs	r2, #16
 80006ac:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_SUBGHZ_Init+0x20>)
 80006b0:	f002 faea 	bl	8002c88 <HAL_SUBGHZ_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80006ba:	f000 f8eb 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000084 	.word	0x20000084

080006c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006cc:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 80006ce:	4a23      	ldr	r2, [pc, #140]	@ (800075c <MX_USART1_UART_Init+0x94>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006d2:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fe:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070a:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 800070c:	2200      	movs	r2, #0
 800070e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000710:	4811      	ldr	r0, [pc, #68]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 8000712:	f002 fe7c 	bl	800340e <HAL_UART_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800071c:	f000 f8ba 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	480d      	ldr	r0, [pc, #52]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 8000724:	f003 fbb3 	bl	8003e8e <HAL_UARTEx_SetTxFifoThreshold>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800072e:	f000 f8b1 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000732:	2100      	movs	r1, #0
 8000734:	4808      	ldr	r0, [pc, #32]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 8000736:	f003 fbe8 	bl	8003f0a <HAL_UARTEx_SetRxFifoThreshold>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000740:	f000 f8a8 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	@ (8000758 <MX_USART1_UART_Init+0x90>)
 8000746:	f003 fb6a 	bl	8003e1e <HAL_UARTEx_DisableFifoMode>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000750:	f000 f8a0 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000090 	.word	0x20000090
 800075c:	40013800 	.word	0x40013800

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 8000766:	4a23      	ldr	r2, [pc, #140]	@ (80007f4 <MX_USART2_UART_Init+0x94>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800079c:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a2:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a8:	4811      	ldr	r0, [pc, #68]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 80007aa:	f002 fe30 	bl	800340e <HAL_UART_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007b4:	f000 f86e 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b8:	2100      	movs	r1, #0
 80007ba:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 80007bc:	f003 fb67 	bl	8003e8e <HAL_UARTEx_SetTxFifoThreshold>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007c6:	f000 f865 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 80007ce:	f003 fb9c 	bl	8003f0a <HAL_UARTEx_SetRxFifoThreshold>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007d8:	f000 f85c 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_USART2_UART_Init+0x90>)
 80007de:	f003 fb1e 	bl	8003e1e <HAL_UARTEx_DisableFifoMode>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007e8:	f000 f854 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000124 	.word	0x20000124
 80007f4:	40004400 	.word	0x40004400

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff fe9d 	bl	800054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2004      	movs	r0, #4
 8000814:	f7ff fe9a 	bl	800054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000818:	2002      	movs	r0, #2
 800081a:	f7ff fe97 	bl	800054c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PROB3_Pin|BootB_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000824:	481a      	ldr	r0, [pc, #104]	@ (8000890 <MX_GPIO_Init+0x98>)
 8000826:	f000 fe4f 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2130      	movs	r1, #48	@ 0x30
 800082e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000832:	f000 fe49 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PROB3_Pin BootB_Pin */
  GPIO_InitStruct.Pin = PROB3_Pin|BootB_Pin;
 8000836:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800083a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4619      	mov	r1, r3
 800084c:	4810      	ldr	r0, [pc, #64]	@ (8000890 <MX_GPIO_Init+0x98>)
 800084e:	f000 fcdb 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : D0_Pin */
  GPIO_InitStruct.Pin = D0_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000856:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800085a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(D0_GPIO_Port, &GPIO_InitStruct);
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000868:	f000 fcce 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_CTRL1_Pin RF_CTRL2_Pin */
  GPIO_InitStruct.Pin = RF_CTRL1_Pin|RF_CTRL2_Pin;
 800086c:	2330      	movs	r3, #48	@ 0x30
 800086e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000884:	f000 fcc0 	bl	8001208 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000888:	bf00      	nop
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	48000400 	.word	0x48000400

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <Error_Handler+0x8>

080008a0 <LL_AHB2_GRP1_EnableClock>:
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4013      	ands	r3, r2
 80008c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008c4:	68fb      	ldr	r3, [r7, #12]
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4013      	ands	r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008f4:	68fb      	ldr	r3, [r7, #12]
}
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800090c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800090e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4313      	orrs	r3, r2
 8000916:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800091c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000924:	68fb      	ldr	r3, [r7, #12]
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800093c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800093e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4313      	orrs	r3, r2
 8000946:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800094c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4013      	ands	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000954:	68fb      	ldr	r3, [r7, #12]
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <LL_SYSCFG_EnableFastModePlus>:
  *         @arg @ref LL_SYSCFG_I2C_FASTMODEPLUS_I2C2
  *         @arg @ref LL_SYSCFG_I2C_FASTMODEPLUS_I2C3
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800096a:	685a      	ldr	r2, [r3, #4]
 800096c:	4904      	ldr	r1, [pc, #16]	@ (8000980 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4313      	orrs	r3, r2
 8000972:	604b      	str	r3, [r1, #4]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40010000 	.word	0x40010000

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <HAL_SUBGHZ_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsubghz: SUBGHZ handle pointer
  * @retval None
  */
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN SUBGHZ_MspInit 0 */

    /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff ffc9 	bl	8000930 <LL_APB3_GRP1_EnableClock>
    /* USER CODE BEGIN SUBGHZ_MspInit 1 */

    /* USER CODE END SUBGHZ_MspInit 1 */

}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b096      	sub	sp, #88	@ 0x58
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2238      	movs	r2, #56	@ 0x38
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f007 f88c 	bl	8007ae6 <memset>
  if(huart->Instance==USART1)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a39      	ldr	r2, [pc, #228]	@ (8000ab8 <HAL_UART_MspInit+0x110>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d13f      	bne.n	8000a58 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009d8:	2301      	movs	r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009dc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80009e0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 ff9a 	bl	8002920 <HAL_RCCEx_PeriphCLKConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009f2:	f7ff ff4f 	bl	8000894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80009fa:	f7ff ff81 	bl	8000900 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff ff4e 	bl	80008a0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	2002      	movs	r0, #2
 8000a06:	f7ff ff4b 	bl	80008a0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a0e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a24:	4619      	mov	r1, r3
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2a:	f000 fbed 	bl	8001208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a2e:	2340      	movs	r3, #64	@ 0x40
 8000a30:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a46:	4619      	mov	r1, r3
 8000a48:	481c      	ldr	r0, [pc, #112]	@ (8000abc <HAL_UART_MspInit+0x114>)
 8000a4a:	f000 fbdd 	bl	8001208 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8000a4e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000a52:	f7ff ff85 	bl	8000960 <LL_SYSCFG_EnableFastModePlus>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a56:	e02b      	b.n	8000ab0 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a18      	ldr	r2, [pc, #96]	@ (8000ac0 <HAL_UART_MspInit+0x118>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d126      	bne.n	8000ab0 <HAL_UART_MspInit+0x108>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a66:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000a6a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 ff55 	bl	8002920 <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000a7c:	f7ff ff0a 	bl	8000894 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a80:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000a84:	f7ff ff24 	bl	80008d0 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff ff09 	bl	80008a0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000a8e:	230c      	movs	r3, #12
 8000a90:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a9e:	2307      	movs	r3, #7
 8000aa0:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aac:	f000 fbac 	bl	8001208 <HAL_GPIO_Init>
}
 8000ab0:	bf00      	nop
 8000ab2:	3758      	adds	r7, #88	@ 0x58
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40013800 	.word	0x40013800
 8000abc:	48000400 	.word	0x48000400
 8000ac0:	40004400 	.word	0x40004400

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <NMI_Handler+0x4>

08000acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <MemManage_Handler+0x4>

08000adc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 fa56 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	e00a      	b.n	8000b50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b3a:	f3af 8000 	nop.w
 8000b3e:	4601      	mov	r1, r0
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	b2ca      	uxtb	r2, r1
 8000b48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbf0      	blt.n	8000b3a <_read+0x12>
  }

  return len;
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e009      	b.n	8000b88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fcfd 	bl	800057c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	dbf1      	blt.n	8000b74 <_write+0x12>
  }
  return len;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <_close>:

int _close(int file)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bc0:	605a      	str	r2, [r3, #4]
  return 0;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <_isatty>:

int _isatty(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
	...

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f006 ffaa 	bl	8007b84 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20010000 	.word	0x20010000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	200001b8 	.word	0x200001b8
 8000c64:	200004d0 	.word	0x200004d0

08000c68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

 /* Get MSI Range frequency--------------------------------------------------*/

   /* Get MSI Range frequency--------------------------------------------------*/
   if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d108      	bne.n	8000c9a <SystemCoreClockUpdate+0x26>
   { /* MSISRANGE from RCC_CSR applies */
     msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e006      	b.n	8000ca8 <SystemCoreClockUpdate+0x34>
   }
   else
   { /* MSIRANGE from RCC_CR applies */
     msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	091b      	lsrs	r3, r3, #4
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	617b      	str	r3, [r7, #20]
   }
   /*MSI frequency range in HZ*/
   msirange = MSIRangeTable[msirange];
 8000ca8:	4a47      	ldr	r2, [pc, #284]	@ (8000dc8 <SystemCoreClockUpdate+0x154>)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	617b      	str	r3, [r7, #20]


  /*SystemCoreClock=HAL_RCC_GetSysClockFreq();*/
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f003 030c 	and.w	r3, r3, #12
 8000cbc:	2b0c      	cmp	r3, #12
 8000cbe:	d869      	bhi.n	8000d94 <SystemCoreClockUpdate+0x120>
 8000cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8000cc8 <SystemCoreClockUpdate+0x54>)
 8000cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc6:	bf00      	nop
 8000cc8:	08000cfd 	.word	0x08000cfd
 8000ccc:	08000d95 	.word	0x08000d95
 8000cd0:	08000d95 	.word	0x08000d95
 8000cd4:	08000d95 	.word	0x08000d95
 8000cd8:	08000d05 	.word	0x08000d05
 8000cdc:	08000d95 	.word	0x08000d95
 8000ce0:	08000d95 	.word	0x08000d95
 8000ce4:	08000d95 	.word	0x08000d95
 8000ce8:	08000d0d 	.word	0x08000d0d
 8000cec:	08000d95 	.word	0x08000d95
 8000cf0:	08000d95 	.word	0x08000d95
 8000cf4:	08000d95 	.word	0x08000d95
 8000cf8:	08000d15 	.word	0x08000d15
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000cfc:	4a33      	ldr	r2, [pc, #204]	@ (8000dcc <SystemCoreClockUpdate+0x158>)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	6013      	str	r3, [r2, #0]
      break;
 8000d02:	e04b      	b.n	8000d9c <SystemCoreClockUpdate+0x128>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000d04:	4b31      	ldr	r3, [pc, #196]	@ (8000dcc <SystemCoreClockUpdate+0x158>)
 8000d06:	4a32      	ldr	r2, [pc, #200]	@ (8000dd0 <SystemCoreClockUpdate+0x15c>)
 8000d08:	601a      	str	r2, [r3, #0]
      break;
 8000d0a:	e047      	b.n	8000d9c <SystemCoreClockUpdate+0x128>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000dcc <SystemCoreClockUpdate+0x158>)
 8000d0e:	4a31      	ldr	r2, [pc, #196]	@ (8000dd4 <SystemCoreClockUpdate+0x160>)
 8000d10:	601a      	str	r2, [r3, #0]
      break;
 8000d12:	e043      	b.n	8000d9c <SystemCoreClockUpdate+0x128>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	091b      	lsrs	r3, r3, #4
 8000d28:	f003 0307 	and.w	r3, r3, #7
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d003      	beq.n	8000d3e <SystemCoreClockUpdate+0xca>
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d006      	beq.n	8000d4a <SystemCoreClockUpdate+0xd6>
 8000d3c:	e00b      	b.n	8000d56 <SystemCoreClockUpdate+0xe2>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000d3e:	4a24      	ldr	r2, [pc, #144]	@ (8000dd0 <SystemCoreClockUpdate+0x15c>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	613b      	str	r3, [r7, #16]
          break;
 8000d48:	e00b      	b.n	8000d62 <SystemCoreClockUpdate+0xee>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000d4a:	4a22      	ldr	r2, [pc, #136]	@ (8000dd4 <SystemCoreClockUpdate+0x160>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d52:	613b      	str	r3, [r7, #16]
          break;
 8000d54:	e005      	b.n	8000d62 <SystemCoreClockUpdate+0xee>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	613b      	str	r3, [r7, #16]
          break;
 8000d60:	bf00      	nop
      }

      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	fb02 f303 	mul.w	r3, r2, r3
 8000d74:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0f5b      	lsrs	r3, r3, #29
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	3301      	adds	r3, #1
 8000d84:	607b      	str	r3, [r7, #4]

      SystemCoreClock = pllvco/pllr;
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dcc <SystemCoreClockUpdate+0x158>)
 8000d90:	6013      	str	r3, [r2, #0]
      break;
 8000d92:	e003      	b.n	8000d9c <SystemCoreClockUpdate+0x128>

    default:
      SystemCoreClock = msirange;
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <SystemCoreClockUpdate+0x158>)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	6013      	str	r3, [r2, #0]
      break;
 8000d9a:	bf00      	nop
#if defined(DUAL_CORE) &&  defined(CORE_CM0PLUS)
  /* Get HCLK2 prescaler */
  tmp = AHBPrescTable[((RCC->EXTCFGR & RCC_EXTCFGR_C2HPRE) >> RCC_EXTCFGR_C2HPRE_Pos)];
#else
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	f003 030f 	and.w	r3, r3, #15
 8000da8:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd8 <SystemCoreClockUpdate+0x164>)
 8000daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dae:	603b      	str	r3, [r7, #0]
#endif

  /* Core clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <SystemCoreClockUpdate+0x158>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4a04      	ldr	r2, [pc, #16]	@ (8000dcc <SystemCoreClockUpdate+0x158>)
 8000dbc:	6013      	str	r3, [r2, #0]
}
 8000dbe:	bf00      	nop
 8000dc0:	371c      	adds	r7, #28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	080087b8 	.word	0x080087b8
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	00f42400 	.word	0x00f42400
 8000dd4:	01e84800 	.word	0x01e84800
 8000dd8:	08008758 	.word	0x08008758

08000ddc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8000de6:	79fb      	ldrb	r3, [r7, #7]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr

08000df2 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b085      	sub	sp, #20
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000e24:	4b02      	ldr	r3, [pc, #8]	@ (8000e30 <TIMER_IF_SetTimerContext+0x10>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	200001bc 	.word	0x200001bc

08000e34 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000e38:	4b02      	ldr	r3, [pc, #8]	@ (8000e44 <TIMER_IF_GetTimerContext+0x10>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	200001bc 	.word	0x200001bc

08000e48 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8000e52:	687b      	ldr	r3, [r7, #4]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8000e68:	687b      	ldr	r3, [r7, #4]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8000e7e:	687b      	ldr	r3, [r7, #4]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b085      	sub	sp, #20
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b085      	sub	sp, #20
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
	...

08000ebc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ebc:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ebe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ec0:	f7ff fed2 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	@ (8000efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <LoopForever+0xe>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f08 <LoopForever+0x16>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eea:	f006 fe51 	bl	8007b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eee:	f7ff fb57 	bl	80005a0 <main>

08000ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef2:	e7fe      	b.n	8000ef2 <LoopForever>
  ldr   r0, =_estack
 8000ef4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f00:	080089d0 	.word	0x080089d0
  ldr r2, =_sbss
 8000f04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f08:	200004d0 	.word	0x200004d0

08000f0c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f000 f942 	bl	80011a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000f20:	f001 fb20 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a09      	ldr	r2, [pc, #36]	@ (8000f4c <HAL_Init+0x3c>)
 8000f28:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2a:	2004      	movs	r0, #4
 8000f2c:	f000 f810 	bl	8000f50 <HAL_InitTick>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	e001      	b.n	8000f40 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f3c:	f7ff fd22 	bl	8000984 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f40:	79fb      	ldrb	r3, [r7, #7]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000000 	.word	0x20000000

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f5c:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <HAL_InitTick+0x6c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d024      	beq.n	8000fae <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f64:	f001 fafe 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <HAL_InitTick+0x6c>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f74:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f936 	bl	80011ee <HAL_SYSTICK_Config>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10f      	bne.n	8000fa8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	d809      	bhi.n	8000fa2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	f04f 30ff 	mov.w	r0, #4294967295
 8000f96:	f000 f910 	bl	80011ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f9a:	4a09      	ldr	r2, [pc, #36]	@ (8000fc0 <HAL_InitTick+0x70>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	e007      	b.n	8000fb2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	e004      	b.n	8000fb2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	e001      	b.n	8000fb2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_IncTick+0x1c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <HAL_IncTick+0x20>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a03      	ldr	r2, [pc, #12]	@ (8000fe4 <HAL_IncTick+0x20>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	200001c0 	.word	0x200001c0

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b02      	ldr	r3, [pc, #8]	@ (8000ff8 <HAL_GetTick+0x10>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	200001c0 	.word	0x200001c0

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff fff0 	bl	8000fe8 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffe0 	bl	8000fe8 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	@ (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	@ (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	@ 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	@ 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001170:	d301      	bcc.n	8001176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001172:	2301      	movs	r3, #1
 8001174:	e00f      	b.n	8001196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <SysTick_Config+0x40>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117e:	210f      	movs	r1, #15
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f7ff ff90 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001188:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <SysTick_Config+0x40>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118e:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <SysTick_Config+0x40>)
 8001190:	2207      	movs	r2, #7
 8001192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	e000e010 	.word	0xe000e010

080011a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff49 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c8:	f7ff ff60 	bl	800108c <__NVIC_GetPriorityGrouping>
 80011cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff ff92 	bl	80010fc <NVIC_EncodePriority>
 80011d8:	4602      	mov	r2, r0
 80011da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff61 	bl	80010a8 <__NVIC_SetPriority>
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffb2 	bl	8001160 <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001216:	e140      	b.n	800149a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2101      	movs	r1, #1
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	4013      	ands	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 8132 	beq.w	8001494 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d005      	beq.n	8001248 <HAL_GPIO_Init+0x40>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d130      	bne.n	80012aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800127e:	2201      	movs	r2, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	f003 0201 	and.w	r2, r3, #1
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d017      	beq.n	80012e6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d123      	bne.n	800133a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	691a      	ldr	r2, [r3, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	6939      	ldr	r1, [r7, #16]
 8001336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0203 	and.w	r2, r3, #3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 808c 	beq.w	8001494 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800137c:	4a4e      	ldr	r2, [pc, #312]	@ (80014b8 <HAL_GPIO_Init+0x2b0>)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	2207      	movs	r2, #7
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013a6:	d00d      	beq.n	80013c4 <HAL_GPIO_Init+0x1bc>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a44      	ldr	r2, [pc, #272]	@ (80014bc <HAL_GPIO_Init+0x2b4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d007      	beq.n	80013c0 <HAL_GPIO_Init+0x1b8>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a43      	ldr	r2, [pc, #268]	@ (80014c0 <HAL_GPIO_Init+0x2b8>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d101      	bne.n	80013bc <HAL_GPIO_Init+0x1b4>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e004      	b.n	80013c6 <HAL_GPIO_Init+0x1be>
 80013bc:	2307      	movs	r3, #7
 80013be:	e002      	b.n	80013c6 <HAL_GPIO_Init+0x1be>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_GPIO_Init+0x1be>
 80013c4:	2300      	movs	r3, #0
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	f002 0203 	and.w	r2, r2, #3
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	4093      	lsls	r3, r2
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013d6:	4938      	ldr	r1, [pc, #224]	@ (80014b8 <HAL_GPIO_Init+0x2b0>)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013e4:	4b37      	ldr	r3, [pc, #220]	@ (80014c4 <HAL_GPIO_Init+0x2bc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001408:	4a2e      	ldr	r2, [pc, #184]	@ (80014c4 <HAL_GPIO_Init+0x2bc>)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800140e:	4b2d      	ldr	r3, [pc, #180]	@ (80014c4 <HAL_GPIO_Init+0x2bc>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001432:	4a24      	ldr	r2, [pc, #144]	@ (80014c4 <HAL_GPIO_Init+0x2bc>)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001438:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <HAL_GPIO_Init+0x2bc>)
 800143a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800143e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800145e:	4a19      	ldr	r2, [pc, #100]	@ (80014c4 <HAL_GPIO_Init+0x2bc>)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001466:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <HAL_GPIO_Init+0x2bc>)
 8001468:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800146c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800148c:	4a0d      	ldr	r2, [pc, #52]	@ (80014c4 <HAL_GPIO_Init+0x2bc>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3301      	adds	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	fa22 f303 	lsr.w	r3, r2, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f47f aeb7 	bne.w	8001218 <HAL_GPIO_Init+0x10>
  }
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	371c      	adds	r7, #28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40010000 	.word	0x40010000
 80014bc:	48000400 	.word	0x48000400
 80014c0:	48000800 	.word	0x48000800
 80014c4:	58000800 	.word	0x58000800

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014e4:	e002      	b.n	80014ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014e6:	887a      	ldrh	r2, [r7, #2]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <HAL_PWR_EnableBkUpAccess+0x18>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a03      	ldr	r2, [pc, #12]	@ (8001510 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	58000400 	.word	0x58000400

08001514 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001518:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <HAL_PWREx_GetVoltageRange+0x14>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	58000400 	.word	0x58000400

0800152c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800153c:	d101      	bne.n	8001542 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	58000400 	.word	0x58000400

08001550 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800155e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800157a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800159a:	d101      	bne.n	80015a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80015ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80015f4:	d101      	bne.n	80015fa <LL_RCC_HSE_IsReady+0x18>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <LL_RCC_HSE_IsReady+0x1a>
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800162e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800164a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800164e:	d101      	bne.n	8001654 <LL_RCC_HSI_IsReady+0x18>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <LL_RCC_HSI_IsReady+0x1a>
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	061b      	lsls	r3, r3, #24
 8001674:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b02      	cmp	r3, #2
 8001698:	d101      	bne.n	800169e <LL_RCC_LSE_IsReady+0x18>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <LL_RCC_LSE_IsReady+0x1a>
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80016ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80016cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80016ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d101      	bne.n	8001700 <LL_RCC_LSI_IsReady+0x18>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <LL_RCC_LSI_IsReady+0x1a>
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800170e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6013      	str	r3, [r2, #0]
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	6013      	str	r3, [r2, #0]
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b02      	cmp	r3, #2
 8001752:	d101      	bne.n	8001758 <LL_RCC_MSI_IsReady+0x16>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <LL_RCC_MSI_IsReady+0x18>
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b08      	cmp	r3, #8
 8001772:	d101      	bne.n	8001778 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800179c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f023 0203 	bic.w	r2, r3, #3
 80017ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	608b      	str	r3, [r1, #8]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 030c 	and.w	r3, r3, #12
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800181c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001826:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001846:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800184a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800184e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4313      	orrs	r3, r2
 8001856:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001870:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001874:	f023 020f 	bic.w	r2, r3, #15
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001880:	4313      	orrs	r3, r2
 8001882:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80018e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001982:	d101      	bne.n	8001988 <LL_RCC_PLL_IsReady+0x18>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <LL_RCC_PLL_IsReady+0x1a>
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80019c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f003 0303 	and.w	r3, r3, #3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019fe:	d101      	bne.n	8001a04 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a16:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001a22:	d101      	bne.n	8001a28 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a46:	d101      	bne.n	8001a4c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001a68:	d101      	bne.n	8001a6e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001a8a:	d101      	bne.n	8001a90 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
	...

08001a9c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e36f      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aae:	f7ff fea6 	bl	80017fe <LL_RCC_GetSysClkSource>
 8001ab2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab4:	f7ff ff8f 	bl	80019d6 <LL_RCC_PLL_GetMainSource>
 8001ab8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 80c4 	beq.w	8001c50 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x3e>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	2b0c      	cmp	r3, #12
 8001ad2:	d176      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d173      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e353      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_OscConfig+0x68>
 8001af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b02:	e006      	b.n	8001b12 <HAL_RCC_OscConfig+0x76>
 8001b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d222      	bcs.n	8001b5c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fd5a 	bl	80025d4 <RCC_SetFlashLatencyFromMSIRange>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e331      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fe2b 	bl	80017b0 <LL_RCC_MSI_SetCalibTrimming>
 8001b5a:	e021      	b.n	8001ba0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b66:	f043 0308 	orr.w	r3, r3, #8
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fe12 	bl	80017b0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fd1f 	bl	80025d4 <RCC_SetFlashLatencyFromMSIRange>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e2f6      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ba0:	f000 fce0 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4aa7      	ldr	r2, [pc, #668]	@ (8001e44 <HAL_RCC_OscConfig+0x3a8>)
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001baa:	4ba7      	ldr	r3, [pc, #668]	@ (8001e48 <HAL_RCC_OscConfig+0x3ac>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f9ce 	bl	8000f50 <HAL_InitTick>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001bb8:	7cfb      	ldrb	r3, [r7, #19]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d047      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001bbe:	7cfb      	ldrb	r3, [r7, #19]
 8001bc0:	e2e5      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d02c      	beq.n	8001c24 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bca:	f7ff fd9e 	bl	800170a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bce:	f7ff fa0b 	bl	8000fe8 <HAL_GetTick>
 8001bd2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bd6:	f7ff fa07 	bl	8000fe8 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e2d2      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001be8:	f7ff fdab 	bl	8001742 <LL_RCC_MSI_IsReady>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f1      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bfc:	f043 0308 	orr.w	r3, r3, #8
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fdc7 	bl	80017b0 <LL_RCC_MSI_SetCalibTrimming>
 8001c22:	e015      	b.n	8001c50 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c24:	f7ff fd7f 	bl	8001726 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c28:	f7ff f9de 	bl	8000fe8 <HAL_GetTick>
 8001c2c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c30:	f7ff f9da 	bl	8000fe8 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e2a5      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c42:	f7ff fd7e 	bl	8001742 <LL_RCC_MSI_IsReady>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f1      	bne.n	8001c30 <HAL_RCC_OscConfig+0x194>
 8001c4c:	e000      	b.n	8001c50 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c4e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d058      	beq.n	8001d0e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d005      	beq.n	8001c6e <HAL_RCC_OscConfig+0x1d2>
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	2b0c      	cmp	r3, #12
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d105      	bne.n	8001c7a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d14b      	bne.n	8001d0e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e289      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c98:	d102      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x204>
 8001c9a:	f7ff fc86 	bl	80015aa <LL_RCC_HSE_Enable>
 8001c9e:	e00d      	b.n	8001cbc <HAL_RCC_OscConfig+0x220>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001ca8:	d104      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x218>
 8001caa:	f7ff fc51 	bl	8001550 <LL_RCC_HSE_EnableTcxo>
 8001cae:	f7ff fc7c 	bl	80015aa <LL_RCC_HSE_Enable>
 8001cb2:	e003      	b.n	8001cbc <HAL_RCC_OscConfig+0x220>
 8001cb4:	f7ff fc87 	bl	80015c6 <LL_RCC_HSE_Disable>
 8001cb8:	f7ff fc58 	bl	800156c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d012      	beq.n	8001cea <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff f990 	bl	8000fe8 <HAL_GetTick>
 8001cc8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff f98c 	bl	8000fe8 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	@ 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e257      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001cde:	f7ff fc80 	bl	80015e2 <LL_RCC_HSE_IsReady>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f1      	beq.n	8001ccc <HAL_RCC_OscConfig+0x230>
 8001ce8:	e011      	b.n	8001d0e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cea:	f7ff f97d 	bl	8000fe8 <HAL_GetTick>
 8001cee:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf2:	f7ff f979 	bl	8000fe8 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b64      	cmp	r3, #100	@ 0x64
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e244      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d04:	f7ff fc6d 	bl	80015e2 <LL_RCC_HSE_IsReady>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f1      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d046      	beq.n	8001da8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_OscConfig+0x290>
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	2b0c      	cmp	r3, #12
 8001d24:	d10e      	bne.n	8001d44 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d10b      	bne.n	8001d44 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e22a      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fc8e 	bl	800165e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d42:	e031      	b.n	8001da8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d019      	beq.n	8001d80 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4c:	f7ff fc5a 	bl	8001604 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff f94a 	bl	8000fe8 <HAL_GetTick>
 8001d54:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff f946 	bl	8000fe8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e211      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d6a:	f7ff fc67 	bl	800163c <LL_RCC_HSI_IsReady>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f1      	beq.n	8001d58 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fc70 	bl	800165e <LL_RCC_HSI_SetCalibTrimming>
 8001d7e:	e013      	b.n	8001da8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d80:	f7ff fc4e 	bl	8001620 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff f930 	bl	8000fe8 <HAL_GetTick>
 8001d88:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8c:	f7ff f92c 	bl	8000fe8 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1f7      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d9e:	f7ff fc4d 	bl	800163c <LL_RCC_HSI_IsReady>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f1      	bne.n	8001d8c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d06e      	beq.n	8001e92 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d056      	beq.n	8001e6a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dc4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69da      	ldr	r2, [r3, #28]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d031      	beq.n	8001e38 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e1d0      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d013      	beq.n	8001e1e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001df6:	f7ff fc67 	bl	80016c8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dfa:	f7ff f8f5 	bl	8000fe8 <HAL_GetTick>
 8001dfe:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e02:	f7ff f8f1 	bl	8000fe8 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b11      	cmp	r3, #17
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e1bc      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001e14:	f7ff fc68 	bl	80016e8 <LL_RCC_LSI_IsReady>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f1      	bne.n	8001e02 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e26:	f023 0210 	bic.w	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e38:	f7ff fc36 	bl	80016a8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff f8d4 	bl	8000fe8 <HAL_GetTick>
 8001e40:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001e42:	e00c      	b.n	8001e5e <HAL_RCC_OscConfig+0x3c2>
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4c:	f7ff f8cc 	bl	8000fe8 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b11      	cmp	r3, #17
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e197      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001e5e:	f7ff fc43 	bl	80016e8 <LL_RCC_LSI_IsReady>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f1      	beq.n	8001e4c <HAL_RCC_OscConfig+0x3b0>
 8001e68:	e013      	b.n	8001e92 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6a:	f7ff fc2d 	bl	80016c8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff f8bb 	bl	8000fe8 <HAL_GetTick>
 8001e72:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff f8b7 	bl	8000fe8 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b11      	cmp	r3, #17
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e182      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001e88:	f7ff fc2e 	bl	80016e8 <LL_RCC_LSI_IsReady>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f1      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80d8 	beq.w	8002050 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001ea0:	f7ff fb44 	bl	800152c <LL_PWR_IsEnabledBkUpAccess>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d113      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001eaa:	f7ff fb25 	bl	80014f8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eae:	f7ff f89b 	bl	8000fe8 <HAL_GetTick>
 8001eb2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb6:	f7ff f897 	bl	8000fe8 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e162      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001ec8:	f7ff fb30 	bl	800152c <LL_PWR_IsEnabledBkUpAccess>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f1      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d07b      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b85      	cmp	r3, #133	@ 0x85
 8001ee0:	d003      	beq.n	8001eea <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	d109      	bne.n	8001efe <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff f873 	bl	8000fe8 <HAL_GetTick>
 8001f02:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7ff f865 	bl	8000fe8 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e12e      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001f30:	f7ff fba9 	bl	8001686 <LL_RCC_LSE_IsReady>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0ef      	beq.n	8001f1a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b81      	cmp	r3, #129	@ 0x81
 8001f40:	d003      	beq.n	8001f4a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b85      	cmp	r3, #133	@ 0x85
 8001f48:	d121      	bne.n	8001f8e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7ff f84d 	bl	8000fe8 <HAL_GetTick>
 8001f4e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7ff f83f 	bl	8000fe8 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e108      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0ec      	beq.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001f8c:	e060      	b.n	8002050 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff f82b 	bl	8000fe8 <HAL_GetTick>
 8001f92:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7ff f81d 	bl	8000fe8 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e0e6      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ec      	bne.n	8001faa <HAL_RCC_OscConfig+0x50e>
 8001fd0:	e03e      	b.n	8002050 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd2:	f7ff f809 	bl	8000fe8 <HAL_GetTick>
 8001fd6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7fe fffb 	bl	8000fe8 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e0c4      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ec      	bne.n	8001fee <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002014:	f7fe ffe8 	bl	8000fe8 <HAL_GetTick>
 8002018:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002022:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800202e:	e00a      	b.n	8002046 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7fe ffda 	bl	8000fe8 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e0a3      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002046:	f7ff fb1e 	bl	8001686 <LL_RCC_LSE_IsReady>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ef      	bne.n	8002030 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 8099 	beq.w	800218c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	2b0c      	cmp	r3, #12
 800205e:	d06c      	beq.n	800213a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002064:	2b02      	cmp	r3, #2
 8002066:	d14b      	bne.n	8002100 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002068:	f7ff fc74 	bl	8001954 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7fe ffbc 	bl	8000fe8 <HAL_GetTick>
 8002070:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7fe ffb8 	bl	8000fe8 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b0a      	cmp	r3, #10
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e083      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002086:	f7ff fc73 	bl	8001970 <LL_RCC_PLL_IsReady>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f1      	bne.n	8002074 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	4b40      	ldr	r3, [pc, #256]	@ (8002198 <HAL_RCC_OscConfig+0x6fc>)
 8002098:	4013      	ands	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020a2:	4311      	orrs	r1, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020a8:	0212      	lsls	r2, r2, #8
 80020aa:	4311      	orrs	r1, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020b0:	4311      	orrs	r1, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020b6:	4311      	orrs	r1, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020bc:	430a      	orrs	r2, r1
 80020be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c6:	f7ff fc37 	bl	8001938 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7fe ff85 	bl	8000fe8 <HAL_GetTick>
 80020de:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e2:	f7fe ff81 	bl	8000fe8 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b0a      	cmp	r3, #10
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e04c      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80020f4:	f7ff fc3c 	bl	8001970 <LL_RCC_PLL_IsReady>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f1      	beq.n	80020e2 <HAL_RCC_OscConfig+0x646>
 80020fe:	e045      	b.n	800218c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002100:	f7ff fc28 	bl	8001954 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7fe ff70 	bl	8000fe8 <HAL_GetTick>
 8002108:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7fe ff6c 	bl	8000fe8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b0a      	cmp	r3, #10
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e037      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800211e:	f7ff fc27 	bl	8001970 <LL_RCC_PLL_IsReady>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f1      	bne.n	800210c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002132:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <HAL_RCC_OscConfig+0x700>)
 8002134:	4013      	ands	r3, r2
 8002136:	60cb      	str	r3, [r1, #12]
 8002138:	e028      	b.n	800218c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e023      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	f003 0203 	and.w	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002158:	429a      	cmp	r2, r3
 800215a:	d115      	bne.n	8002188 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002166:	429a      	cmp	r2, r3
 8002168:	d10e      	bne.n	8002188 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	429a      	cmp	r2, r3
 8002178:	d106      	bne.n	8002188 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3720      	adds	r7, #32
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	11c1808c 	.word	0x11c1808c
 800219c:	eefefffc 	.word	0xeefefffc

080021a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e12c      	b.n	800240e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b4:	4b98      	ldr	r3, [pc, #608]	@ (8002418 <HAL_RCC_ClockConfig+0x278>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d91b      	bls.n	80021fa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b95      	ldr	r3, [pc, #596]	@ (8002418 <HAL_RCC_ClockConfig+0x278>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 0207 	bic.w	r2, r3, #7
 80021ca:	4993      	ldr	r1, [pc, #588]	@ (8002418 <HAL_RCC_ClockConfig+0x278>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d2:	f7fe ff09 	bl	8000fe8 <HAL_GetTick>
 80021d6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80021da:	f7fe ff05 	bl	8000fe8 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e110      	b.n	800240e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ec:	4b8a      	ldr	r3, [pc, #552]	@ (8002418 <HAL_RCC_ClockConfig+0x278>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d1ef      	bne.n	80021da <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d016      	beq.n	8002234 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fb02 	bl	8001814 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002210:	f7fe feea 	bl	8000fe8 <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002218:	f7fe fee6 	bl	8000fe8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e0f1      	b.n	800240e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800222a:	f7ff fbdf 	bl	80019ec <LL_RCC_IsActiveFlag_HPRE>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f1      	beq.n	8002218 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d016      	beq.n	800226e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff faf8 	bl	800183a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800224a:	f7fe fecd 	bl	8000fe8 <HAL_GetTick>
 800224e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002252:	f7fe fec9 	bl	8000fe8 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e0d4      	b.n	800240e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002264:	f7ff fbd3 	bl	8001a0e <LL_RCC_IsActiveFlag_C2HPRE>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f1      	beq.n	8002252 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff faf0 	bl	8001864 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002284:	f7fe feb0 	bl	8000fe8 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800228c:	f7fe feac 	bl	8000fe8 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e0b7      	b.n	800240e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800229e:	f7ff fbc8 	bl	8001a32 <LL_RCC_IsActiveFlag_SHDHPRE>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f1      	beq.n	800228c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d016      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fae9 	bl	8001890 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022be:	f7fe fe93 	bl	8000fe8 <HAL_GetTick>
 80022c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022c6:	f7fe fe8f 	bl	8000fe8 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e09a      	b.n	800240e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80022d8:	f7ff fbbd 	bl	8001a56 <LL_RCC_IsActiveFlag_PPRE1>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f1      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d017      	beq.n	800231e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fade 	bl	80018b6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022fa:	f7fe fe75 	bl	8000fe8 <HAL_GetTick>
 80022fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002300:	e008      	b.n	8002314 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002302:	f7fe fe71 	bl	8000fe8 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e07c      	b.n	800240e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002314:	f7ff fbb0 	bl	8001a78 <LL_RCC_IsActiveFlag_PPRE2>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f1      	beq.n	8002302 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d043      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d106      	bne.n	8002340 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002332:	f7ff f956 	bl	80015e2 <LL_RCC_HSE_IsReady>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d11e      	bne.n	800237a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e066      	b.n	800240e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d106      	bne.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002348:	f7ff fb12 	bl	8001970 <LL_RCC_PLL_IsReady>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d113      	bne.n	800237a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e05b      	b.n	800240e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800235e:	f7ff f9f0 	bl	8001742 <LL_RCC_MSI_IsReady>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d108      	bne.n	800237a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e050      	b.n	800240e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800236c:	f7ff f966 	bl	800163c <LL_RCC_HSI_IsReady>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e049      	b.n	800240e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fa2a 	bl	80017d8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002384:	f7fe fe30 	bl	8000fe8 <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800238c:	f7fe fe2c 	bl	8000fe8 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e035      	b.n	800240e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	f7ff fa2c 	bl	80017fe <LL_RCC_GetSysClkSource>
 80023a6:	4602      	mov	r2, r0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d1ec      	bne.n	800238c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b2:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <HAL_RCC_ClockConfig+0x278>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d21b      	bcs.n	80023f8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c0:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <HAL_RCC_ClockConfig+0x278>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 0207 	bic.w	r2, r3, #7
 80023c8:	4913      	ldr	r1, [pc, #76]	@ (8002418 <HAL_RCC_ClockConfig+0x278>)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d0:	f7fe fe0a 	bl	8000fe8 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023d8:	f7fe fe06 	bl	8000fe8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e011      	b.n	800240e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_RCC_ClockConfig+0x278>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1ef      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80023f8:	f000 f8b4 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4a07      	ldr	r2, [pc, #28]	@ (800241c <HAL_RCC_ClockConfig+0x27c>)
 8002400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002402:	4b07      	ldr	r3, [pc, #28]	@ (8002420 <HAL_RCC_ClockConfig+0x280>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fda2 	bl	8000f50 <HAL_InitTick>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	58004000 	.word	0x58004000
 800241c:	20000000 	.word	0x20000000
 8002420:	20000004 	.word	0x20000004

08002424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002432:	f7ff f9e4 	bl	80017fe <LL_RCC_GetSysClkSource>
 8002436:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002438:	f7ff facd 	bl	80019d6 <LL_RCC_PLL_GetMainSource>
 800243c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x2c>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d139      	bne.n	80024be <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d136      	bne.n	80024be <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002450:	f7ff f987 	bl	8001762 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d115      	bne.n	8002486 <HAL_RCC_GetSysClockFreq+0x62>
 800245a:	f7ff f982 	bl	8001762 <LL_RCC_MSI_IsEnabledRangeSelect>
 800245e:	4603      	mov	r3, r0
 8002460:	2b01      	cmp	r3, #1
 8002462:	d106      	bne.n	8002472 <HAL_RCC_GetSysClockFreq+0x4e>
 8002464:	f7ff f98d 	bl	8001782 <LL_RCC_MSI_GetRange>
 8002468:	4603      	mov	r3, r0
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	e005      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x5a>
 8002472:	f7ff f991 	bl	8001798 <LL_RCC_MSI_GetRangeAfterStandby>
 8002476:	4603      	mov	r3, r0
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	4a36      	ldr	r2, [pc, #216]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x134>)
 8002480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002484:	e014      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x8c>
 8002486:	f7ff f96c 	bl	8001762 <LL_RCC_MSI_IsEnabledRangeSelect>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d106      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x7a>
 8002490:	f7ff f977 	bl	8001782 <LL_RCC_MSI_GetRange>
 8002494:	4603      	mov	r3, r0
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	e005      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0x86>
 800249e:	f7ff f97b 	bl	8001798 <LL_RCC_MSI_GetRangeAfterStandby>
 80024a2:	4603      	mov	r3, r0
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	4a2b      	ldr	r2, [pc, #172]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x134>)
 80024ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d115      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024bc:	e012      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d102      	bne.n	80024ca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024c4:	4b25      	ldr	r3, [pc, #148]	@ (800255c <HAL_RCC_GetSysClockFreq+0x138>)
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e00c      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d109      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80024d0:	f7ff f85a 	bl	8001588 <LL_RCC_HSE_IsEnabledDiv2>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d102      	bne.n	80024e0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80024da:	4b20      	ldr	r3, [pc, #128]	@ (800255c <HAL_RCC_GetSysClockFreq+0x138>)
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	e001      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80024e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024e2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e4:	f7ff f98b 	bl	80017fe <LL_RCC_GetSysClkSource>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d12f      	bne.n	800254e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80024ee:	f7ff fa72 	bl	80019d6 <LL_RCC_PLL_GetMainSource>
 80024f2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0xde>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d003      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0xe4>
 8002500:	e00d      	b.n	800251e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002502:	4b16      	ldr	r3, [pc, #88]	@ (800255c <HAL_RCC_GetSysClockFreq+0x138>)
 8002504:	60fb      	str	r3, [r7, #12]
        break;
 8002506:	e00d      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002508:	f7ff f83e 	bl	8001588 <LL_RCC_HSE_IsEnabledDiv2>
 800250c:	4603      	mov	r3, r0
 800250e:	2b01      	cmp	r3, #1
 8002510:	d102      	bne.n	8002518 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002512:	4b12      	ldr	r3, [pc, #72]	@ (800255c <HAL_RCC_GetSysClockFreq+0x138>)
 8002514:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002516:	e005      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x13c>)
 800251a:	60fb      	str	r3, [r7, #12]
        break;
 800251c:	e002      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	60fb      	str	r3, [r7, #12]
        break;
 8002522:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002524:	f7ff fa35 	bl	8001992 <LL_RCC_PLL_GetN>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	fb03 f402 	mul.w	r4, r3, r2
 8002530:	f7ff fa46 	bl	80019c0 <LL_RCC_PLL_GetDivider>
 8002534:	4603      	mov	r3, r0
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	3301      	adds	r3, #1
 800253a:	fbb4 f4f3 	udiv	r4, r4, r3
 800253e:	f7ff fa34 	bl	80019aa <LL_RCC_PLL_GetR>
 8002542:	4603      	mov	r3, r0
 8002544:	0f5b      	lsrs	r3, r3, #29
 8002546:	3301      	adds	r3, #1
 8002548:	fbb4 f3f3 	udiv	r3, r4, r3
 800254c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800254e:	697b      	ldr	r3, [r7, #20]
}
 8002550:	4618      	mov	r0, r3
 8002552:	371c      	adds	r7, #28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd90      	pop	{r4, r7, pc}
 8002558:	080087b8 	.word	0x080087b8
 800255c:	00f42400 	.word	0x00f42400
 8002560:	01e84800 	.word	0x01e84800

08002564 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002564:	b598      	push	{r3, r4, r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002568:	f7ff ff5c 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 800256c:	4604      	mov	r4, r0
 800256e:	f7ff f9b5 	bl	80018dc <LL_RCC_GetAHBPrescaler>
 8002572:	4603      	mov	r3, r0
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	4a03      	ldr	r2, [pc, #12]	@ (8002588 <HAL_RCC_GetHCLKFreq+0x24>)
 800257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002580:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd98      	pop	{r3, r4, r7, pc}
 8002588:	08008758 	.word	0x08008758

0800258c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800258c:	b598      	push	{r3, r4, r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002590:	f7ff ffe8 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 8002594:	4604      	mov	r4, r0
 8002596:	f7ff f9b9 	bl	800190c <LL_RCC_GetAPB1Prescaler>
 800259a:	4603      	mov	r3, r0
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	4a03      	ldr	r2, [pc, #12]	@ (80025ac <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd98      	pop	{r3, r4, r7, pc}
 80025ac:	08008798 	.word	0x08008798

080025b0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b0:	b598      	push	{r3, r4, r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80025b4:	f7ff ffd6 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 80025b8:	4604      	mov	r4, r0
 80025ba:	f7ff f9b2 	bl	8001922 <LL_RCC_GetAPB2Prescaler>
 80025be:	4603      	mov	r3, r0
 80025c0:	0adb      	lsrs	r3, r3, #11
 80025c2:	4a03      	ldr	r2, [pc, #12]	@ (80025d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd98      	pop	{r3, r4, r7, pc}
 80025d0:	08008798 	.word	0x08008798

080025d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	4a10      	ldr	r2, [pc, #64]	@ (8002628 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80025e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ea:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80025ec:	f7ff f981 	bl	80018f2 <LL_RCC_GetAHB3Prescaler>
 80025f0:	4603      	mov	r3, r0
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	4a0c      	ldr	r2, [pc, #48]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80025fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4a09      	ldr	r2, [pc, #36]	@ (8002630 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0c9c      	lsrs	r4, r3, #18
 8002610:	f7fe ff80 	bl	8001514 <HAL_PWREx_GetVoltageRange>
 8002614:	4603      	mov	r3, r0
 8002616:	4619      	mov	r1, r3
 8002618:	4620      	mov	r0, r4
 800261a:	f000 f80b 	bl	8002634 <RCC_SetFlashLatency>
 800261e:	4603      	mov	r3, r0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bd90      	pop	{r4, r7, pc}
 8002628:	080087b8 	.word	0x080087b8
 800262c:	08008758 	.word	0x08008758
 8002630:	431bde83 	.word	0x431bde83

08002634 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08e      	sub	sp, #56	@ 0x38
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800263e:	4a3a      	ldr	r2, [pc, #232]	@ (8002728 <RCC_SetFlashLatency+0xf4>)
 8002640:	f107 0320 	add.w	r3, r7, #32
 8002644:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002648:	6018      	str	r0, [r3, #0]
 800264a:	3304      	adds	r3, #4
 800264c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800264e:	4a37      	ldr	r2, [pc, #220]	@ (800272c <RCC_SetFlashLatency+0xf8>)
 8002650:	f107 0318 	add.w	r3, r7, #24
 8002654:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002658:	6018      	str	r0, [r3, #0]
 800265a:	3304      	adds	r3, #4
 800265c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800265e:	4a34      	ldr	r2, [pc, #208]	@ (8002730 <RCC_SetFlashLatency+0xfc>)
 8002660:	f107 030c 	add.w	r3, r7, #12
 8002664:	ca07      	ldmia	r2, {r0, r1, r2}
 8002666:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800266a:	2300      	movs	r3, #0
 800266c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002674:	d11b      	bne.n	80026ae <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002676:	2300      	movs	r3, #0
 8002678:	633b      	str	r3, [r7, #48]	@ 0x30
 800267a:	e014      	b.n	80026a6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800267c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	3338      	adds	r3, #56	@ 0x38
 8002682:	443b      	add	r3, r7
 8002684:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002688:	461a      	mov	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4293      	cmp	r3, r2
 800268e:	d807      	bhi.n	80026a0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	3338      	adds	r3, #56	@ 0x38
 8002696:	443b      	add	r3, r7
 8002698:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800269c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800269e:	e021      	b.n	80026e4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80026a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a2:	3301      	adds	r3, #1
 80026a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80026a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d9e7      	bls.n	800267c <RCC_SetFlashLatency+0x48>
 80026ac:	e01a      	b.n	80026e4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026b2:	e014      	b.n	80026de <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80026b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	3338      	adds	r3, #56	@ 0x38
 80026ba:	443b      	add	r3, r7
 80026bc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80026c0:	461a      	mov	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d807      	bhi.n	80026d8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80026c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	3338      	adds	r3, #56	@ 0x38
 80026ce:	443b      	add	r3, r7
 80026d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80026d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80026d6:	e005      	b.n	80026e4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80026d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026da:	3301      	adds	r3, #1
 80026dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d9e7      	bls.n	80026b4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026e4:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <RCC_SetFlashLatency+0x100>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 0207 	bic.w	r2, r3, #7
 80026ec:	4911      	ldr	r1, [pc, #68]	@ (8002734 <RCC_SetFlashLatency+0x100>)
 80026ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80026f4:	f7fe fc78 	bl	8000fe8 <HAL_GetTick>
 80026f8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026fa:	e008      	b.n	800270e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026fc:	f7fe fc74 	bl	8000fe8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e007      	b.n	800271e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800270e:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <RCC_SetFlashLatency+0x100>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002718:	429a      	cmp	r2, r3
 800271a:	d1ef      	bne.n	80026fc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3738      	adds	r7, #56	@ 0x38
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	0800872c 	.word	0x0800872c
 800272c:	08008734 	.word	0x08008734
 8002730:	0800873c 	.word	0x0800873c
 8002734:	58004000 	.word	0x58004000

08002738 <LL_RCC_LSE_IsReady>:
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800273c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b02      	cmp	r3, #2
 800274a:	d101      	bne.n	8002750 <LL_RCC_LSE_IsReady+0x18>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <LL_RCC_LSE_IsReady+0x1a>
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <LL_RCC_SetUSARTClockSource>:
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002766:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	43db      	mvns	r3, r3
 8002770:	401a      	ands	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	b29b      	uxth	r3, r3
 8002776:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <LL_RCC_SetI2SClockSource>:
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800279e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <LL_RCC_SetLPUARTClockSource>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <LL_RCC_SetI2CClockSource>:
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80027e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80027f6:	43db      	mvns	r3, r3
 80027f8:	401a      	ands	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002802:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <LL_RCC_SetLPTIMClockSource>:
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800281e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002822:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	0c1b      	lsrs	r3, r3, #16
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	43db      	mvns	r3, r3
 800282e:	401a      	ands	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	041b      	lsls	r3, r3, #16
 8002834:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <LL_RCC_SetRNGClockSource>:
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002858:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800285c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <LL_RCC_SetADCClockSource>:
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800287a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002886:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <LL_RCC_SetRTCClockSource>:
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_GetRTCClockSource>:
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <LL_RCC_ForceBackupDomainReset>:
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <LL_RCC_ReleaseBackupDomainReset>:
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800290e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002912:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
	...

08002920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800292c:	2300      	movs	r3, #0
 800292e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002930:	2300      	movs	r3, #0
 8002932:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d058      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002940:	f7fe fdda 	bl	80014f8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002944:	f7fe fb50 	bl	8000fe8 <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800294a:	e009      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294c:	f7fe fb4c 	bl	8000fe8 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d902      	bls.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	74fb      	strb	r3, [r7, #19]
        break;
 800295e:	e006      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002960:	4b7b      	ldr	r3, [pc, #492]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800296c:	d1ee      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800296e:	7cfb      	ldrb	r3, [r7, #19]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d13c      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002974:	f7ff ffa7 	bl	80028c6 <LL_RCC_GetRTCClockSource>
 8002978:	4602      	mov	r2, r0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297e:	429a      	cmp	r2, r3
 8002980:	d00f      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800298e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002990:	f7ff ffa5 	bl	80028de <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002994:	f7ff ffb3 	bl	80028fe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002998:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d014      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fe fb1c 	bl	8000fe8 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80029b2:	e00b      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7fe fb18 	bl	8000fe8 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d902      	bls.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	74fb      	strb	r3, [r7, #19]
            break;
 80029ca:	e004      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80029cc:	f7ff feb4 	bl	8002738 <LL_RCC_LSE_IsReady>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d1ee      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80029d6:	7cfb      	ldrb	r3, [r7, #19]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff5b 	bl	800289c <LL_RCC_SetRTCClockSource>
 80029e6:	e004      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	74bb      	strb	r3, [r7, #18]
 80029ec:	e001      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d004      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fea9 	bl	800275a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d004      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fe9e 	bl	800275a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d004      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fec0 	bl	80027b4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fee6 	bl	8002816 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fedb 	bl	8002816 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fed0 	bl	8002816 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d004      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fea9 	bl	80027de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d004      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fe9e 	bl	80027de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fe93 	bl	80027de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d011      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fe5e 	bl	800278a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ae6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d010      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fea5 	bl	8002848 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d107      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b14:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d011      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fea3 	bl	8002872 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b34:	d107      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b44:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002b46:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	58000400 	.word	0x58000400

08002b54 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002b5c:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b64:	4904      	ldr	r1, [pc, #16]	@ (8002b78 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	58000400 	.word	0x58000400

08002b7c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002b80:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b86:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002b88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	58000400 	.word	0x58000400

08002b9c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba6:	4a04      	ldr	r2, [pc, #16]	@ (8002bb8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002ba8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	58000400 	.word	0x58000400

08002bbc <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002bc0:	4b03      	ldr	r3, [pc, #12]	@ (8002bd0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002bc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002bc6:	619a      	str	r2, [r3, #24]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	58000400 	.word	0x58000400

08002bd4 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8002bd8:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d101      	bne.n	8002be8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	58000400 	.word	0x58000400

08002bf8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002bfc:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d101      	bne.n	8002c0c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	58000400 	.word	0x58000400

08002c1c <LL_RCC_RF_DisableReset>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002c30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <LL_RCC_IsRFUnderReset>:
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c50:	d101      	bne.n	8002c56 <LL_RCC_IsRFUnderReset+0x1a>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_RCC_IsRFUnderReset+0x1c>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <LL_EXTI_EnableIT_32_63+0x24>)
 8002c6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002c6e:	4905      	ldr	r1, [pc, #20]	@ (8002c84 <LL_EXTI_EnableIT_32_63+0x24>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	58000800 	.word	0x58000800

08002c88 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d103      	bne.n	8002c9e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
    return status;
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	e052      	b.n	8002d44 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	799b      	ldrb	r3, [r3, #6]
 8002ca6:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8002ca8:	7bbb      	ldrb	r3, [r7, #14]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_SUBGHZ_Init+0x2c>
 8002cae:	7bbb      	ldrb	r3, [r7, #14]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d109      	bne.n	8002cc8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fd fe68 	bl	8000990 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8002cc0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002cc4:	f7ff ffcc 	bl	8002c60 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8002cc8:	7bbb      	ldrb	r3, [r7, #14]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d126      	bne.n	8002d1c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8002cd4:	f7ff ffa2 	bl	8002c1c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d4c <HAL_SUBGHZ_Init+0xc4>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	0cdb      	lsrs	r3, r3, #19
 8002ce6:	2264      	movs	r2, #100	@ 0x64
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d105      	bne.n	8002d00 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	609a      	str	r2, [r3, #8]
        break;
 8002cfe:	e007      	b.n	8002d10 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8002d06:	f7ff ff99 	bl	8002c3c <LL_RCC_IsRFUnderReset>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ee      	bne.n	8002cee <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002d10:	f7ff ff34 	bl	8002b7c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8002d14:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002d18:	f7ff ff1c 	bl	8002b54 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8002d1c:	f7ff ff4e 	bl	8002bbc <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fa2e 	bl	800318c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	719a      	strb	r2, [r3, #6]

  return status;
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000000 	.word	0x20000000

08002d50 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	817b      	strh	r3, [r7, #10]
 8002d60:	4613      	mov	r3, r2
 8002d62:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	799b      	ldrb	r3, [r3, #6]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d14a      	bne.n	8002e04 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	795b      	ldrb	r3, [r3, #5]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e045      	b.n	8002e06 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2202      	movs	r2, #2
 8002d84:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 face 	bl	8003328 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002d8c:	f7ff ff06 	bl	8002b9c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8002d90:	210d      	movs	r1, #13
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fa1a 	bl	80031cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8002d98:	897b      	ldrh	r3, [r7, #10]
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	4619      	mov	r1, r3
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fa12 	bl	80031cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8002da8:	897b      	ldrh	r3, [r7, #10]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	4619      	mov	r1, r3
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fa0c 	bl	80031cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	82bb      	strh	r3, [r7, #20]
 8002db8:	e00a      	b.n	8002dd0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002dba:	8abb      	ldrh	r3, [r7, #20]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fa01 	bl	80031cc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002dca:	8abb      	ldrh	r3, [r7, #20]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	82bb      	strh	r3, [r7, #20]
 8002dd0:	8aba      	ldrh	r2, [r7, #20]
 8002dd2:	893b      	ldrh	r3, [r7, #8]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d3f0      	bcc.n	8002dba <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002dd8:	f7ff fed0 	bl	8002b7c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fac7 	bl	8003370 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
 8002dee:	e001      	b.n	8002df4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	715a      	strb	r2, [r3, #5]

    return status;
 8002e00:	7dfb      	ldrb	r3, [r7, #23]
 8002e02:	e000      	b.n	8002e06 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
  }
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b088      	sub	sp, #32
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	817b      	strh	r3, [r7, #10]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	799b      	ldrb	r3, [r3, #6]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d14a      	bne.n	8002ec6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	795b      	ldrb	r3, [r3, #5]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e045      	b.n	8002ec8 <HAL_SUBGHZ_ReadRegisters+0xba>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fa70 	bl	8003328 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002e48:	f7ff fea8 	bl	8002b9c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8002e4c:	211d      	movs	r1, #29
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f9bc 	bl	80031cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8002e54:	897b      	ldrh	r3, [r7, #10]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f9b4 	bl	80031cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8002e64:	897b      	ldrh	r3, [r7, #10]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	4619      	mov	r1, r3
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f9ae 	bl	80031cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8002e70:	2100      	movs	r1, #0
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f9aa 	bl	80031cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	82fb      	strh	r3, [r7, #22]
 8002e7c:	e009      	b.n	8002e92 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002e7e:	69b9      	ldr	r1, [r7, #24]
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f9f9 	bl	8003278 <SUBGHZSPI_Receive>
      pData++;
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002e8c:	8afb      	ldrh	r3, [r7, #22]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	82fb      	strh	r3, [r7, #22]
 8002e92:	8afa      	ldrh	r2, [r7, #22]
 8002e94:	893b      	ldrh	r3, [r7, #8]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d3f1      	bcc.n	8002e7e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002e9a:	f7ff fe6f 	bl	8002b7c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fa66 	bl	8003370 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	e001      	b.n	8002eb6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	715a      	strb	r2, [r3, #5]

    return status;
 8002ec2:	7ffb      	ldrb	r3, [r7, #31]
 8002ec4:	e000      	b.n	8002ec8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002ec6:	2302      	movs	r3, #2
  }
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3720      	adds	r7, #32
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	461a      	mov	r2, r3
 8002edc:	460b      	mov	r3, r1
 8002ede:	72fb      	strb	r3, [r7, #11]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	799b      	ldrb	r3, [r3, #6]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d14a      	bne.n	8002f84 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	795b      	ldrb	r3, [r3, #5]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e045      	b.n	8002f86 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fa11 	bl	8003328 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8002f06:	7afb      	ldrb	r3, [r7, #11]
 8002f08:	2b84      	cmp	r3, #132	@ 0x84
 8002f0a:	d002      	beq.n	8002f12 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8002f0c:	7afb      	ldrb	r3, [r7, #11]
 8002f0e:	2b94      	cmp	r3, #148	@ 0x94
 8002f10:	d103      	bne.n	8002f1a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	711a      	strb	r2, [r3, #4]
 8002f18:	e002      	b.n	8002f20 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002f20:	f7ff fe3c 	bl	8002b9c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002f24:	7afb      	ldrb	r3, [r7, #11]
 8002f26:	4619      	mov	r1, r3
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f94f 	bl	80031cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	82bb      	strh	r3, [r7, #20]
 8002f32:	e00a      	b.n	8002f4a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002f34:	8abb      	ldrh	r3, [r7, #20]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f944 	bl	80031cc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002f44:	8abb      	ldrh	r3, [r7, #20]
 8002f46:	3301      	adds	r3, #1
 8002f48:	82bb      	strh	r3, [r7, #20]
 8002f4a:	8aba      	ldrh	r2, [r7, #20]
 8002f4c:	893b      	ldrh	r3, [r7, #8]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d3f0      	bcc.n	8002f34 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002f52:	f7ff fe13 	bl	8002b7c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8002f56:	7afb      	ldrb	r3, [r7, #11]
 8002f58:	2b84      	cmp	r3, #132	@ 0x84
 8002f5a:	d002      	beq.n	8002f62 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 fa07 	bl	8003370 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	75fb      	strb	r3, [r7, #23]
 8002f6e:	e001      	b.n	8002f74 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	715a      	strb	r2, [r3, #5]

    return status;
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	e000      	b.n	8002f86 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b088      	sub	sp, #32
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	72fb      	strb	r3, [r7, #11]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	799b      	ldrb	r3, [r3, #6]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d13d      	bne.n	800302c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	795b      	ldrb	r3, [r3, #5]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e038      	b.n	800302e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f9b0 	bl	8003328 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002fc8:	f7ff fde8 	bl	8002b9c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002fcc:	7afb      	ldrb	r3, [r7, #11]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f8fb 	bl	80031cc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f8f7 	bl	80031cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	82fb      	strh	r3, [r7, #22]
 8002fe2:	e009      	b.n	8002ff8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002fe4:	69b9      	ldr	r1, [r7, #24]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f946 	bl	8003278 <SUBGHZSPI_Receive>
      pData++;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002ff2:	8afb      	ldrh	r3, [r7, #22]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	82fb      	strh	r3, [r7, #22]
 8002ff8:	8afa      	ldrh	r2, [r7, #22]
 8002ffa:	893b      	ldrh	r3, [r7, #8]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d3f1      	bcc.n	8002fe4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003000:	f7ff fdbc 	bl	8002b7c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f9b3 	bl	8003370 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	77fb      	strb	r3, [r7, #31]
 8003016:	e001      	b.n	800301c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	715a      	strb	r2, [r3, #5]

    return status;
 8003028:	7ffb      	ldrb	r3, [r7, #31]
 800302a:	e000      	b.n	800302e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	461a      	mov	r2, r3
 8003042:	460b      	mov	r3, r1
 8003044:	72fb      	strb	r3, [r7, #11]
 8003046:	4613      	mov	r3, r2
 8003048:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	799b      	ldrb	r3, [r3, #6]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d13e      	bne.n	80030d2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	795b      	ldrb	r3, [r3, #5]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800305c:	2302      	movs	r3, #2
 800305e:	e039      	b.n	80030d4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f95e 	bl	8003328 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800306c:	f7ff fd96 	bl	8002b9c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003070:	210e      	movs	r1, #14
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f8aa 	bl	80031cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003078:	7afb      	ldrb	r3, [r7, #11]
 800307a:	4619      	mov	r1, r3
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f8a5 	bl	80031cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003082:	2300      	movs	r3, #0
 8003084:	82bb      	strh	r3, [r7, #20]
 8003086:	e00a      	b.n	800309e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003088:	8abb      	ldrh	r3, [r7, #20]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	4619      	mov	r1, r3
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f89a 	bl	80031cc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003098:	8abb      	ldrh	r3, [r7, #20]
 800309a:	3301      	adds	r3, #1
 800309c:	82bb      	strh	r3, [r7, #20]
 800309e:	8aba      	ldrh	r2, [r7, #20]
 80030a0:	893b      	ldrh	r3, [r7, #8]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d3f0      	bcc.n	8003088 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80030a6:	f7ff fd69 	bl	8002b7c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f960 	bl	8003370 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	75fb      	strb	r3, [r7, #23]
 80030bc:	e001      	b.n	80030c2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	715a      	strb	r2, [r3, #5]

    return status;
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	e000      	b.n	80030d4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
  }
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	461a      	mov	r2, r3
 80030e8:	460b      	mov	r3, r1
 80030ea:	72fb      	strb	r3, [r7, #11]
 80030ec:	4613      	mov	r3, r2
 80030ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	799b      	ldrb	r3, [r3, #6]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d141      	bne.n	8003182 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	795b      	ldrb	r3, [r3, #5]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003106:	2302      	movs	r3, #2
 8003108:	e03c      	b.n	8003184 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f909 	bl	8003328 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003116:	f7ff fd41 	bl	8002b9c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800311a:	211e      	movs	r1, #30
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f855 	bl	80031cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003122:	7afb      	ldrb	r3, [r7, #11]
 8003124:	4619      	mov	r1, r3
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f850 	bl	80031cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800312c:	2100      	movs	r1, #0
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f84c 	bl	80031cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003134:	2300      	movs	r3, #0
 8003136:	82fb      	strh	r3, [r7, #22]
 8003138:	e009      	b.n	800314e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800313a:	69b9      	ldr	r1, [r7, #24]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f89b 	bl	8003278 <SUBGHZSPI_Receive>
      pData++;
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	3301      	adds	r3, #1
 8003146:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003148:	8afb      	ldrh	r3, [r7, #22]
 800314a:	3301      	adds	r3, #1
 800314c:	82fb      	strh	r3, [r7, #22]
 800314e:	8afa      	ldrh	r2, [r7, #22]
 8003150:	893b      	ldrh	r3, [r7, #8]
 8003152:	429a      	cmp	r2, r3
 8003154:	d3f1      	bcc.n	800313a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003156:	f7ff fd11 	bl	8002b7c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f908 	bl	8003370 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e001      	b.n	8003172 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	715a      	strb	r2, [r3, #5]

    return status;
 800317e:	7ffb      	ldrb	r3, [r7, #31]
 8003180:	e000      	b.n	8003184 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
  }
}
 8003184:	4618      	mov	r0, r3
 8003186:	3720      	adds	r7, #32
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <SUBGHZSPI_Init+0x3c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0b      	ldr	r2, [pc, #44]	@ (80031c8 <SUBGHZSPI_Init+0x3c>)
 800319a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800319e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80031a0:	4a09      	ldr	r2, [pc, #36]	@ (80031c8 <SUBGHZSPI_Init+0x3c>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80031a8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80031aa:	4b07      	ldr	r3, [pc, #28]	@ (80031c8 <SUBGHZSPI_Init+0x3c>)
 80031ac:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80031b0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80031b2:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <SUBGHZSPI_Init+0x3c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a04      	ldr	r2, [pc, #16]	@ (80031c8 <SUBGHZSPI_Init+0x3c>)
 80031b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031bc:	6013      	str	r3, [r2, #0]
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	58010000 	.word	0x58010000

080031cc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80031dc:	4b23      	ldr	r3, [pc, #140]	@ (800326c <SUBGHZSPI_Transmit+0xa0>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	0cdb      	lsrs	r3, r3, #19
 80031ea:	2264      	movs	r2, #100	@ 0x64
 80031ec:	fb02 f303 	mul.w	r3, r2, r3
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	609a      	str	r2, [r3, #8]
      break;
 8003202:	e008      	b.n	8003216 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	3b01      	subs	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800320a:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <SUBGHZSPI_Transmit+0xa4>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b02      	cmp	r3, #2
 8003214:	d1ed      	bne.n	80031f2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003216:	4b17      	ldr	r3, [pc, #92]	@ (8003274 <SUBGHZSPI_Transmit+0xa8>)
 8003218:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003220:	4b12      	ldr	r3, [pc, #72]	@ (800326c <SUBGHZSPI_Transmit+0xa0>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	0cdb      	lsrs	r3, r3, #19
 800322e:	2264      	movs	r2, #100	@ 0x64
 8003230:	fb02 f303 	mul.w	r3, r2, r3
 8003234:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d105      	bne.n	8003248 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	609a      	str	r2, [r3, #8]
      break;
 8003246:	e008      	b.n	800325a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3b01      	subs	r3, #1
 800324c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800324e:	4b08      	ldr	r3, [pc, #32]	@ (8003270 <SUBGHZSPI_Transmit+0xa4>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d1ed      	bne.n	8003236 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800325a:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <SUBGHZSPI_Transmit+0xa4>)
 800325c:	68db      	ldr	r3, [r3, #12]

  return status;
 800325e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003260:	4618      	mov	r0, r3
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000000 	.word	0x20000000
 8003270:	58010000 	.word	0x58010000
 8003274:	5801000c 	.word	0x5801000c

08003278 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003286:	4b25      	ldr	r3, [pc, #148]	@ (800331c <SUBGHZSPI_Receive+0xa4>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	0cdb      	lsrs	r3, r3, #19
 8003294:	2264      	movs	r2, #100	@ 0x64
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	609a      	str	r2, [r3, #8]
      break;
 80032ac:	e008      	b.n	80032c0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80032b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003320 <SUBGHZSPI_Receive+0xa8>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d1ed      	bne.n	800329c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80032c0:	4b18      	ldr	r3, [pc, #96]	@ (8003324 <SUBGHZSPI_Receive+0xac>)
 80032c2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	22ff      	movs	r2, #255	@ 0xff
 80032c8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80032ca:	4b14      	ldr	r3, [pc, #80]	@ (800331c <SUBGHZSPI_Receive+0xa4>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	0cdb      	lsrs	r3, r3, #19
 80032d8:	2264      	movs	r2, #100	@ 0x64
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d105      	bne.n	80032f2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	609a      	str	r2, [r3, #8]
      break;
 80032f0:	e008      	b.n	8003304 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80032f8:	4b09      	ldr	r3, [pc, #36]	@ (8003320 <SUBGHZSPI_Receive+0xa8>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d1ed      	bne.n	80032e0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003304:	4b06      	ldr	r3, [pc, #24]	@ (8003320 <SUBGHZSPI_Receive+0xa8>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	701a      	strb	r2, [r3, #0]

  return status;
 800330e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003310:	4618      	mov	r0, r3
 8003312:	371c      	adds	r7, #28
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000000 	.word	0x20000000
 8003320:	58010000 	.word	0x58010000
 8003324:	5801000c 	.word	0x5801000c

08003328 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	791b      	ldrb	r3, [r3, #4]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d111      	bne.n	800335c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003338:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <SUBGHZ_CheckDeviceReady+0x44>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	0c1b      	lsrs	r3, r3, #16
 8003346:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003348:	f7ff fc28 	bl	8002b9c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3b01      	subs	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f9      	bne.n	800334c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003358:	f7ff fc10 	bl	8002b7c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f807 	bl	8003370 <SUBGHZ_WaitOnBusy>
 8003362:	4603      	mov	r3, r0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20000000 	.word	0x20000000

08003370 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800337c:	4b12      	ldr	r3, [pc, #72]	@ (80033c8 <SUBGHZ_WaitOnBusy+0x58>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	0d1b      	lsrs	r3, r3, #20
 800338a:	2264      	movs	r2, #100	@ 0x64
 800338c:	fb02 f303 	mul.w	r3, r2, r3
 8003390:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003392:	f7ff fc31 	bl	8002bf8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8003396:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d105      	bne.n	80033aa <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	609a      	str	r2, [r3, #8]
      break;
 80033a8:	e009      	b.n	80033be <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80033b0:	f7ff fc10 	bl	8002bd4 <LL_PWR_IsActiveFlag_RFBUSYS>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d0e9      	beq.n	8003392 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80033be:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000000 	.word	0x20000000

080033cc <LL_RCC_GetUSARTClockSource>:
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80033d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	401a      	ands	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	4313      	orrs	r3, r2
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <LL_RCC_GetLPUARTClockSource>:
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80033f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4013      	ands	r3, r2
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e042      	b.n	80034a6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fab8 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	@ 0x24
 800343c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fb23 	bl	8003aa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f8ac 	bl	80035bc <UART_SetConfig>
 8003464:	4603      	mov	r3, r0
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e01b      	b.n	80034a6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800347c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800348c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fba1 	bl	8003be6 <UART_CheckIdleState>
 80034a4:	4603      	mov	r3, r0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b08a      	sub	sp, #40	@ 0x28
 80034b2:	af02      	add	r7, sp, #8
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	4613      	mov	r3, r2
 80034bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d173      	bne.n	80035b0 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_UART_Transmit+0x26>
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e06c      	b.n	80035b2 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2221      	movs	r2, #33	@ 0x21
 80034e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034e8:	f7fd fd7e 	bl	8000fe8 <HAL_GetTick>
 80034ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	88fa      	ldrh	r2, [r7, #6]
 80034f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	88fa      	ldrh	r2, [r7, #6]
 80034fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003506:	d108      	bne.n	800351a <HAL_UART_Transmit+0x6c>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	e003      	b.n	8003522 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003522:	e02c      	b.n	800357e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2200      	movs	r2, #0
 800352c:	2180      	movs	r1, #128	@ 0x80
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fba7 	bl	8003c82 <UART_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e039      	b.n	80035b2 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10b      	bne.n	800355c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003552:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	3302      	adds	r3, #2
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	e007      	b.n	800356c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	781a      	ldrb	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3301      	adds	r3, #1
 800356a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1cc      	bne.n	8003524 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	2140      	movs	r1, #64	@ 0x40
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fb74 	bl	8003c82 <UART_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e006      	b.n	80035b2 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e000      	b.n	80035b2 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80035b0:	2302      	movs	r3, #2
  }
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c0:	b08c      	sub	sp, #48	@ 0x30
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	431a      	orrs	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4b94      	ldr	r3, [pc, #592]	@ (800383c <UART_SetConfig+0x280>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035f4:	430b      	orrs	r3, r1
 80035f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a89      	ldr	r2, [pc, #548]	@ (8003840 <UART_SetConfig+0x284>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003624:	4313      	orrs	r3, r2
 8003626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003632:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800363c:	430b      	orrs	r3, r1
 800363e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003646:	f023 010f 	bic.w	r1, r3, #15
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a7a      	ldr	r2, [pc, #488]	@ (8003844 <UART_SetConfig+0x288>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d127      	bne.n	80036b0 <UART_SetConfig+0xf4>
 8003660:	2003      	movs	r0, #3
 8003662:	f7ff feb3 	bl	80033cc <LL_RCC_GetUSARTClockSource>
 8003666:	4603      	mov	r3, r0
 8003668:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800366c:	2b03      	cmp	r3, #3
 800366e:	d81b      	bhi.n	80036a8 <UART_SetConfig+0xec>
 8003670:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <UART_SetConfig+0xbc>)
 8003672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003676:	bf00      	nop
 8003678:	08003689 	.word	0x08003689
 800367c:	08003699 	.word	0x08003699
 8003680:	08003691 	.word	0x08003691
 8003684:	080036a1 	.word	0x080036a1
 8003688:	2301      	movs	r3, #1
 800368a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800368e:	e080      	b.n	8003792 <UART_SetConfig+0x1d6>
 8003690:	2302      	movs	r3, #2
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003696:	e07c      	b.n	8003792 <UART_SetConfig+0x1d6>
 8003698:	2304      	movs	r3, #4
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800369e:	e078      	b.n	8003792 <UART_SetConfig+0x1d6>
 80036a0:	2308      	movs	r3, #8
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036a6:	e074      	b.n	8003792 <UART_SetConfig+0x1d6>
 80036a8:	2310      	movs	r3, #16
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ae:	e070      	b.n	8003792 <UART_SetConfig+0x1d6>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a64      	ldr	r2, [pc, #400]	@ (8003848 <UART_SetConfig+0x28c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d138      	bne.n	800372c <UART_SetConfig+0x170>
 80036ba:	200c      	movs	r0, #12
 80036bc:	f7ff fe86 	bl	80033cc <LL_RCC_GetUSARTClockSource>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d82c      	bhi.n	8003724 <UART_SetConfig+0x168>
 80036ca:	a201      	add	r2, pc, #4	@ (adr r2, 80036d0 <UART_SetConfig+0x114>)
 80036cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d0:	08003705 	.word	0x08003705
 80036d4:	08003725 	.word	0x08003725
 80036d8:	08003725 	.word	0x08003725
 80036dc:	08003725 	.word	0x08003725
 80036e0:	08003715 	.word	0x08003715
 80036e4:	08003725 	.word	0x08003725
 80036e8:	08003725 	.word	0x08003725
 80036ec:	08003725 	.word	0x08003725
 80036f0:	0800370d 	.word	0x0800370d
 80036f4:	08003725 	.word	0x08003725
 80036f8:	08003725 	.word	0x08003725
 80036fc:	08003725 	.word	0x08003725
 8003700:	0800371d 	.word	0x0800371d
 8003704:	2300      	movs	r3, #0
 8003706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800370a:	e042      	b.n	8003792 <UART_SetConfig+0x1d6>
 800370c:	2302      	movs	r3, #2
 800370e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003712:	e03e      	b.n	8003792 <UART_SetConfig+0x1d6>
 8003714:	2304      	movs	r3, #4
 8003716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800371a:	e03a      	b.n	8003792 <UART_SetConfig+0x1d6>
 800371c:	2308      	movs	r3, #8
 800371e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003722:	e036      	b.n	8003792 <UART_SetConfig+0x1d6>
 8003724:	2310      	movs	r3, #16
 8003726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800372a:	e032      	b.n	8003792 <UART_SetConfig+0x1d6>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a43      	ldr	r2, [pc, #268]	@ (8003840 <UART_SetConfig+0x284>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d12a      	bne.n	800378c <UART_SetConfig+0x1d0>
 8003736:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800373a:	f7ff fe59 	bl	80033f0 <LL_RCC_GetLPUARTClockSource>
 800373e:	4603      	mov	r3, r0
 8003740:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003744:	d01a      	beq.n	800377c <UART_SetConfig+0x1c0>
 8003746:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800374a:	d81b      	bhi.n	8003784 <UART_SetConfig+0x1c8>
 800374c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003750:	d00c      	beq.n	800376c <UART_SetConfig+0x1b0>
 8003752:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003756:	d815      	bhi.n	8003784 <UART_SetConfig+0x1c8>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <UART_SetConfig+0x1a8>
 800375c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003760:	d008      	beq.n	8003774 <UART_SetConfig+0x1b8>
 8003762:	e00f      	b.n	8003784 <UART_SetConfig+0x1c8>
 8003764:	2300      	movs	r3, #0
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800376a:	e012      	b.n	8003792 <UART_SetConfig+0x1d6>
 800376c:	2302      	movs	r3, #2
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003772:	e00e      	b.n	8003792 <UART_SetConfig+0x1d6>
 8003774:	2304      	movs	r3, #4
 8003776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800377a:	e00a      	b.n	8003792 <UART_SetConfig+0x1d6>
 800377c:	2308      	movs	r3, #8
 800377e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003782:	e006      	b.n	8003792 <UART_SetConfig+0x1d6>
 8003784:	2310      	movs	r3, #16
 8003786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800378a:	e002      	b.n	8003792 <UART_SetConfig+0x1d6>
 800378c:	2310      	movs	r3, #16
 800378e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a2a      	ldr	r2, [pc, #168]	@ (8003840 <UART_SetConfig+0x284>)
 8003798:	4293      	cmp	r3, r2
 800379a:	f040 80a4 	bne.w	80038e6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800379e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d823      	bhi.n	80037ee <UART_SetConfig+0x232>
 80037a6:	a201      	add	r2, pc, #4	@ (adr r2, 80037ac <UART_SetConfig+0x1f0>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	080037d1 	.word	0x080037d1
 80037b0:	080037ef 	.word	0x080037ef
 80037b4:	080037d9 	.word	0x080037d9
 80037b8:	080037ef 	.word	0x080037ef
 80037bc:	080037df 	.word	0x080037df
 80037c0:	080037ef 	.word	0x080037ef
 80037c4:	080037ef 	.word	0x080037ef
 80037c8:	080037ef 	.word	0x080037ef
 80037cc:	080037e7 	.word	0x080037e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d0:	f7fe fedc 	bl	800258c <HAL_RCC_GetPCLK1Freq>
 80037d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037d6:	e010      	b.n	80037fa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d8:	4b1c      	ldr	r3, [pc, #112]	@ (800384c <UART_SetConfig+0x290>)
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037dc:	e00d      	b.n	80037fa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037de:	f7fe fe21 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80037e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037e4:	e009      	b.n	80037fa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037ec:	e005      	b.n	80037fa <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8137 	beq.w	8003a70 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	4a12      	ldr	r2, [pc, #72]	@ (8003850 <UART_SetConfig+0x294>)
 8003808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800380c:	461a      	mov	r2, r3
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	fbb3 f3f2 	udiv	r3, r3, r2
 8003814:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	429a      	cmp	r2, r3
 8003824:	d305      	bcc.n	8003832 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	429a      	cmp	r2, r3
 8003830:	d910      	bls.n	8003854 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003838:	e11a      	b.n	8003a70 <UART_SetConfig+0x4b4>
 800383a:	bf00      	nop
 800383c:	cfff69f3 	.word	0xcfff69f3
 8003840:	40008000 	.word	0x40008000
 8003844:	40013800 	.word	0x40013800
 8003848:	40004400 	.word	0x40004400
 800384c:	00f42400 	.word	0x00f42400
 8003850:	08008824 	.word	0x08008824
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	2200      	movs	r2, #0
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	60fa      	str	r2, [r7, #12]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	4a8e      	ldr	r2, [pc, #568]	@ (8003a9c <UART_SetConfig+0x4e0>)
 8003862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003866:	b29b      	uxth	r3, r3
 8003868:	2200      	movs	r2, #0
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003872:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003876:	f7fc fcd3 	bl	8000220 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4610      	mov	r0, r2
 8003880:	4619      	mov	r1, r3
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	020b      	lsls	r3, r1, #8
 800388c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003890:	0202      	lsls	r2, r0, #8
 8003892:	6979      	ldr	r1, [r7, #20]
 8003894:	6849      	ldr	r1, [r1, #4]
 8003896:	0849      	lsrs	r1, r1, #1
 8003898:	2000      	movs	r0, #0
 800389a:	460c      	mov	r4, r1
 800389c:	4605      	mov	r5, r0
 800389e:	eb12 0804 	adds.w	r8, r2, r4
 80038a2:	eb43 0905 	adc.w	r9, r3, r5
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	469a      	mov	sl, r3
 80038ae:	4693      	mov	fp, r2
 80038b0:	4652      	mov	r2, sl
 80038b2:	465b      	mov	r3, fp
 80038b4:	4640      	mov	r0, r8
 80038b6:	4649      	mov	r1, r9
 80038b8:	f7fc fcb2 	bl	8000220 <__aeabi_uldivmod>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4613      	mov	r3, r2
 80038c2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ca:	d308      	bcc.n	80038de <UART_SetConfig+0x322>
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038d2:	d204      	bcs.n	80038de <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6a3a      	ldr	r2, [r7, #32]
 80038da:	60da      	str	r2, [r3, #12]
 80038dc:	e0c8      	b.n	8003a70 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80038e4:	e0c4      	b.n	8003a70 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ee:	d167      	bne.n	80039c0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80038f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d828      	bhi.n	800394a <UART_SetConfig+0x38e>
 80038f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003900 <UART_SetConfig+0x344>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	08003925 	.word	0x08003925
 8003904:	0800392d 	.word	0x0800392d
 8003908:	08003935 	.word	0x08003935
 800390c:	0800394b 	.word	0x0800394b
 8003910:	0800393b 	.word	0x0800393b
 8003914:	0800394b 	.word	0x0800394b
 8003918:	0800394b 	.word	0x0800394b
 800391c:	0800394b 	.word	0x0800394b
 8003920:	08003943 	.word	0x08003943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003924:	f7fe fe32 	bl	800258c <HAL_RCC_GetPCLK1Freq>
 8003928:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800392a:	e014      	b.n	8003956 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800392c:	f7fe fe40 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 8003930:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003932:	e010      	b.n	8003956 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003934:	4b5a      	ldr	r3, [pc, #360]	@ (8003aa0 <UART_SetConfig+0x4e4>)
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003938:	e00d      	b.n	8003956 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800393a:	f7fe fd73 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 800393e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003940:	e009      	b.n	8003956 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003948:	e005      	b.n	8003956 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003954:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8089 	beq.w	8003a70 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	4a4e      	ldr	r2, [pc, #312]	@ (8003a9c <UART_SetConfig+0x4e0>)
 8003964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003968:	461a      	mov	r2, r3
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003970:	005a      	lsls	r2, r3, #1
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	441a      	add	r2, r3
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	2b0f      	cmp	r3, #15
 8003988:	d916      	bls.n	80039b8 <UART_SetConfig+0x3fc>
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003990:	d212      	bcs.n	80039b8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	b29b      	uxth	r3, r3
 8003996:	f023 030f 	bic.w	r3, r3, #15
 800399a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	8bfb      	ldrh	r3, [r7, #30]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	8bfa      	ldrh	r2, [r7, #30]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	e05b      	b.n	8003a70 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80039be:	e057      	b.n	8003a70 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d828      	bhi.n	8003a1a <UART_SetConfig+0x45e>
 80039c8:	a201      	add	r2, pc, #4	@ (adr r2, 80039d0 <UART_SetConfig+0x414>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	080039f5 	.word	0x080039f5
 80039d4:	080039fd 	.word	0x080039fd
 80039d8:	08003a05 	.word	0x08003a05
 80039dc:	08003a1b 	.word	0x08003a1b
 80039e0:	08003a0b 	.word	0x08003a0b
 80039e4:	08003a1b 	.word	0x08003a1b
 80039e8:	08003a1b 	.word	0x08003a1b
 80039ec:	08003a1b 	.word	0x08003a1b
 80039f0:	08003a13 	.word	0x08003a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f4:	f7fe fdca 	bl	800258c <HAL_RCC_GetPCLK1Freq>
 80039f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039fa:	e014      	b.n	8003a26 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039fc:	f7fe fdd8 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 8003a00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a02:	e010      	b.n	8003a26 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a04:	4b26      	ldr	r3, [pc, #152]	@ (8003aa0 <UART_SetConfig+0x4e4>)
 8003a06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a08:	e00d      	b.n	8003a26 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0a:	f7fe fd0b 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 8003a0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a10:	e009      	b.n	8003a26 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a18:	e005      	b.n	8003a26 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a24:	bf00      	nop
    }

    if (pclk != 0U)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d021      	beq.n	8003a70 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	4a1a      	ldr	r2, [pc, #104]	@ (8003a9c <UART_SetConfig+0x4e0>)
 8003a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a36:	461a      	mov	r2, r3
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	441a      	add	r2, r3
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	2b0f      	cmp	r3, #15
 8003a54:	d909      	bls.n	8003a6a <UART_SetConfig+0x4ae>
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a5c:	d205      	bcs.n	8003a6a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60da      	str	r2, [r3, #12]
 8003a68:	e002      	b.n	8003a70 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2200      	movs	r2, #0
 8003a84:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003a8c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3730      	adds	r7, #48	@ 0x30
 8003a94:	46bd      	mov	sp, r7
 8003a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a9a:	bf00      	nop
 8003a9c:	08008824 	.word	0x08008824
 8003aa0:	00f42400 	.word	0x00f42400

08003aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01a      	beq.n	8003bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ba2:	d10a      	bne.n	8003bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
  }
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b086      	sub	sp, #24
 8003bea:	af02      	add	r7, sp, #8
 8003bec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bf6:	f7fd f9f7 	bl	8000fe8 <HAL_GetTick>
 8003bfa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d10e      	bne.n	8003c28 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f832 	bl	8003c82 <UART_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e028      	b.n	8003c7a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d10e      	bne.n	8003c54 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f81c 	bl	8003c82 <UART_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e012      	b.n	8003c7a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b09c      	sub	sp, #112	@ 0x70
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c92:	e0af      	b.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9a:	f000 80ab 	beq.w	8003df4 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9e:	f7fd f9a3 	bl	8000fe8 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d140      	bne.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cc4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003cc8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cd4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003cd8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e6      	bne.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3308      	adds	r3, #8
 8003cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3308      	adds	r3, #8
 8003d04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d06:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003d08:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003d0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003d14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e5      	bne.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e06f      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d057      	beq.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x172>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b80      	cmp	r3, #128	@ 0x80
 8003d48:	d054      	beq.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x172>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b40      	cmp	r3, #64	@ 0x40
 8003d4e:	d051      	beq.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d5e:	d149      	bne.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d8a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e6      	bne.n	8003d6a <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3308      	adds	r3, #8
 8003da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	613b      	str	r3, [r7, #16]
   return(result);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3308      	adds	r3, #8
 8003dba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003dbc:	623a      	str	r2, [r7, #32]
 8003dbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	69f9      	ldr	r1, [r7, #28]
 8003dc2:	6a3a      	ldr	r2, [r7, #32]
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e5      	bne.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e010      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	bf0c      	ite	eq
 8003e04:	2301      	moveq	r3, #1
 8003e06:	2300      	movne	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	f43f af40 	beq.w	8003c94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3770      	adds	r7, #112	@ 0x70
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_UARTEx_DisableFifoMode+0x16>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e027      	b.n	8003e84 <HAL_UARTEx_DisableFifoMode+0x66>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2224      	movs	r2, #36	@ 0x24
 8003e40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003e62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e02d      	b.n	8003f02 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2224      	movs	r2, #36	@ 0x24
 8003eb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0201 	bic.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f850 	bl	8003f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e02d      	b.n	8003f7e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2224      	movs	r2, #36	@ 0x24
 8003f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f812 	bl	8003f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d108      	bne.n	8003faa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003fa8:	e031      	b.n	800400e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003faa:	2308      	movs	r3, #8
 8003fac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003fae:	2308      	movs	r3, #8
 8003fb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	0e5b      	lsrs	r3, r3, #25
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	0f5b      	lsrs	r3, r3, #29
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fd2:	7bbb      	ldrb	r3, [r7, #14]
 8003fd4:	7b3a      	ldrb	r2, [r7, #12]
 8003fd6:	4910      	ldr	r1, [pc, #64]	@ (8004018 <UARTEx_SetNbDataToProcess+0x90>)
 8003fd8:	5c8a      	ldrb	r2, [r1, r2]
 8003fda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003fde:	7b3a      	ldrb	r2, [r7, #12]
 8003fe0:	490e      	ldr	r1, [pc, #56]	@ (800401c <UARTEx_SetNbDataToProcess+0x94>)
 8003fe2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fe4:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	7b7a      	ldrb	r2, [r7, #13]
 8003ff4:	4908      	ldr	r1, [pc, #32]	@ (8004018 <UARTEx_SetNbDataToProcess+0x90>)
 8003ff6:	5c8a      	ldrb	r2, [r1, r2]
 8003ff8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ffc:	7b7a      	ldrb	r2, [r7, #13]
 8003ffe:	4907      	ldr	r1, [pc, #28]	@ (800401c <UARTEx_SetNbDataToProcess+0x94>)
 8004000:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004002:	fb93 f3f2 	sdiv	r3, r3, r2
 8004006:	b29a      	uxth	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr
 8004018:	0800883c 	.word	0x0800883c
 800401c:	08008844 	.word	0x08008844

08004020 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af02      	add	r7, sp, #8
 8004026:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8004028:	4a24      	ldr	r2, [pc, #144]	@ (80040bc <RadioInit+0x9c>)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800402e:	4b24      	ldr	r3, [pc, #144]	@ (80040c0 <RadioInit+0xa0>)
 8004030:	2200      	movs	r2, #0
 8004032:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8004034:	4b22      	ldr	r3, [pc, #136]	@ (80040c0 <RadioInit+0xa0>)
 8004036:	2200      	movs	r2, #0
 8004038:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800403a:	4b21      	ldr	r3, [pc, #132]	@ (80040c0 <RadioInit+0xa0>)
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8004040:	4b1f      	ldr	r3, [pc, #124]	@ (80040c0 <RadioInit+0xa0>)
 8004042:	2200      	movs	r2, #0
 8004044:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8004046:	481f      	ldr	r0, [pc, #124]	@ (80040c4 <RadioInit+0xa4>)
 8004048:	f001 ff8c 	bl	8005f64 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 800404c:	4b1c      	ldr	r3, [pc, #112]	@ (80040c0 <RadioInit+0xa0>)
 800404e:	2200      	movs	r2, #0
 8004050:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8004052:	4b1b      	ldr	r3, [pc, #108]	@ (80040c0 <RadioInit+0xa0>)
 8004054:	2200      	movs	r2, #0
 8004056:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8004058:	f002 fa22 	bl	80064a0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800405c:	2100      	movs	r1, #0
 800405e:	2000      	movs	r0, #0
 8004060:	f002 fdee 	bl	8006c40 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8004064:	2204      	movs	r2, #4
 8004066:	2100      	movs	r1, #0
 8004068:	2001      	movs	r0, #1
 800406a:	f002 fbb1 	bl	80067d0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800406e:	2300      	movs	r3, #0
 8004070:	2200      	movs	r2, #0
 8004072:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004076:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800407a:	f002 fae1 	bl	8006640 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 800407e:	f000 fe91 	bl	8004da4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8004082:	2300      	movs	r3, #0
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	4b10      	ldr	r3, [pc, #64]	@ (80040c8 <RadioInit+0xa8>)
 8004088:	2200      	movs	r2, #0
 800408a:	f04f 31ff 	mov.w	r1, #4294967295
 800408e:	480f      	ldr	r0, [pc, #60]	@ (80040cc <RadioInit+0xac>)
 8004090:	f003 fa12 	bl	80074b8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8004094:	2300      	movs	r3, #0
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	4b0d      	ldr	r3, [pc, #52]	@ (80040d0 <RadioInit+0xb0>)
 800409a:	2200      	movs	r2, #0
 800409c:	f04f 31ff 	mov.w	r1, #4294967295
 80040a0:	480c      	ldr	r0, [pc, #48]	@ (80040d4 <RadioInit+0xb4>)
 80040a2:	f003 fa09 	bl	80074b8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80040a6:	4809      	ldr	r0, [pc, #36]	@ (80040cc <RadioInit+0xac>)
 80040a8:	f003 faaa 	bl	8007600 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80040ac:	4809      	ldr	r0, [pc, #36]	@ (80040d4 <RadioInit+0xb4>)
 80040ae:	f003 faa7 	bl	8007600 <UTIL_TIMER_Stop>
}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200002c4 	.word	0x200002c4
 80040c0:	200002c8 	.word	0x200002c8
 80040c4:	08005199 	.word	0x08005199
 80040c8:	08005121 	.word	0x08005121
 80040cc:	20000324 	.word	0x20000324
 80040d0:	08005135 	.word	0x08005135
 80040d4:	2000033c 	.word	0x2000033c

080040d8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80040dc:	f001 ff8a 	bl	8005ff4 <SUBGRF_GetOperatingMode>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b07      	cmp	r3, #7
 80040e4:	d00a      	beq.n	80040fc <RadioGetStatus+0x24>
 80040e6:	2b07      	cmp	r3, #7
 80040e8:	dc0a      	bgt.n	8004100 <RadioGetStatus+0x28>
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d002      	beq.n	80040f4 <RadioGetStatus+0x1c>
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d002      	beq.n	80040f8 <RadioGetStatus+0x20>
 80040f2:	e005      	b.n	8004100 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80040f4:	2302      	movs	r3, #2
 80040f6:	e004      	b.n	8004102 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e002      	b.n	8004102 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e000      	b.n	8004102 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8004100:	2300      	movs	r3, #0
    }
}
 8004102:	4618      	mov	r0, r3
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8004112:	4a2a      	ldr	r2, [pc, #168]	@ (80041bc <RadioSetModem+0xb4>)
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	4618      	mov	r0, r3
 800411c:	f003 f8db 	bl	80072d6 <RFW_SetRadioModem>
    switch( modem )
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	2b05      	cmp	r3, #5
 8004124:	d80e      	bhi.n	8004144 <RadioSetModem+0x3c>
 8004126:	a201      	add	r2, pc, #4	@ (adr r2, 800412c <RadioSetModem+0x24>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	08004153 	.word	0x08004153
 8004130:	08004161 	.word	0x08004161
 8004134:	08004145 	.word	0x08004145
 8004138:	08004187 	.word	0x08004187
 800413c:	08004195 	.word	0x08004195
 8004140:	080041a3 	.word	0x080041a3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8004144:	2003      	movs	r0, #3
 8004146:	f002 fb1d 	bl	8006784 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800414a:	4b1c      	ldr	r3, [pc, #112]	@ (80041bc <RadioSetModem+0xb4>)
 800414c:	2200      	movs	r2, #0
 800414e:	735a      	strb	r2, [r3, #13]
        break;
 8004150:	e02f      	b.n	80041b2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8004152:	2000      	movs	r0, #0
 8004154:	f002 fb16 	bl	8006784 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8004158:	4b18      	ldr	r3, [pc, #96]	@ (80041bc <RadioSetModem+0xb4>)
 800415a:	2200      	movs	r2, #0
 800415c:	735a      	strb	r2, [r3, #13]
        break;
 800415e:	e028      	b.n	80041b2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8004160:	2001      	movs	r0, #1
 8004162:	f002 fb0f 	bl	8006784 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8004166:	4b15      	ldr	r3, [pc, #84]	@ (80041bc <RadioSetModem+0xb4>)
 8004168:	7b5a      	ldrb	r2, [r3, #13]
 800416a:	4b14      	ldr	r3, [pc, #80]	@ (80041bc <RadioSetModem+0xb4>)
 800416c:	7b1b      	ldrb	r3, [r3, #12]
 800416e:	429a      	cmp	r2, r3
 8004170:	d01e      	beq.n	80041b0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8004172:	4b12      	ldr	r3, [pc, #72]	@ (80041bc <RadioSetModem+0xb4>)
 8004174:	7b1a      	ldrb	r2, [r3, #12]
 8004176:	4b11      	ldr	r3, [pc, #68]	@ (80041bc <RadioSetModem+0xb4>)
 8004178:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800417a:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <RadioSetModem+0xb4>)
 800417c:	7b5b      	ldrb	r3, [r3, #13]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 ff98 	bl	80050b4 <RadioSetPublicNetwork>
        }
        break;
 8004184:	e014      	b.n	80041b0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8004186:	2002      	movs	r0, #2
 8004188:	f002 fafc 	bl	8006784 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800418c:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <RadioSetModem+0xb4>)
 800418e:	2200      	movs	r2, #0
 8004190:	735a      	strb	r2, [r3, #13]
        break;
 8004192:	e00e      	b.n	80041b2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8004194:	2002      	movs	r0, #2
 8004196:	f002 faf5 	bl	8006784 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800419a:	4b08      	ldr	r3, [pc, #32]	@ (80041bc <RadioSetModem+0xb4>)
 800419c:	2200      	movs	r2, #0
 800419e:	735a      	strb	r2, [r3, #13]
        break;
 80041a0:	e007      	b.n	80041b2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80041a2:	2000      	movs	r0, #0
 80041a4:	f002 faee 	bl	8006784 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80041a8:	4b04      	ldr	r3, [pc, #16]	@ (80041bc <RadioSetModem+0xb4>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	735a      	strb	r2, [r3, #13]
        break;
 80041ae:	e000      	b.n	80041b2 <RadioSetModem+0xaa>
        break;
 80041b0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	200002c8 	.word	0x200002c8

080041c0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f002 fa95 	bl	80066f8 <SUBGRF_SetRfFrequency>
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b090      	sub	sp, #64	@ 0x40
 80041da:	af0a      	add	r7, sp, #40	@ 0x28
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80041f2:	f000 fdea 	bl	8004dca <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80041f6:	2000      	movs	r0, #0
 80041f8:	f7ff ff86 	bl	8004108 <RadioSetModem>

    RadioSetChannel( freq );
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f7ff ffdf 	bl	80041c0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8004202:	2301      	movs	r3, #1
 8004204:	9309      	str	r3, [sp, #36]	@ 0x24
 8004206:	2300      	movs	r3, #0
 8004208:	9308      	str	r3, [sp, #32]
 800420a:	2300      	movs	r3, #0
 800420c:	9307      	str	r3, [sp, #28]
 800420e:	2300      	movs	r3, #0
 8004210:	9306      	str	r3, [sp, #24]
 8004212:	2300      	movs	r3, #0
 8004214:	9305      	str	r3, [sp, #20]
 8004216:	2300      	movs	r3, #0
 8004218:	9304      	str	r3, [sp, #16]
 800421a:	2300      	movs	r3, #0
 800421c:	9303      	str	r3, [sp, #12]
 800421e:	2300      	movs	r3, #0
 8004220:	9302      	str	r3, [sp, #8]
 8004222:	2303      	movs	r3, #3
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	2300      	movs	r3, #0
 800422c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	2000      	movs	r0, #0
 8004234:	f000 f83c 	bl	80042b0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8004238:	2000      	movs	r0, #0
 800423a:	f000 fdcd 	bl	8004dd8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800423e:	f000 ff67 	bl	8005110 <RadioGetWakeupTime>
 8004242:	4603      	mov	r3, r0
 8004244:	4618      	mov	r0, r3
 8004246:	f7fc fed9 	bl	8000ffc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800424a:	f003 fa73 	bl	8007734 <UTIL_TIMER_GetCurrentTime>
 800424e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8004250:	e00d      	b.n	800426e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8004252:	2000      	movs	r0, #0
 8004254:	f000 feae 	bl	8004fb4 <RadioRssi>
 8004258:	4603      	mov	r3, r0
 800425a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800425c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004264:	429a      	cmp	r2, r3
 8004266:	dd02      	ble.n	800426e <RadioIsChannelFree+0x98>
        {
            status = false;
 8004268:	2300      	movs	r3, #0
 800426a:	75fb      	strb	r3, [r7, #23]
            break;
 800426c:	e006      	b.n	800427c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800426e:	6938      	ldr	r0, [r7, #16]
 8004270:	f003 fa72 	bl	8007758 <UTIL_TIMER_GetElapsedTime>
 8004274:	4602      	mov	r2, r0
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	4293      	cmp	r3, r2
 800427a:	d8ea      	bhi.n	8004252 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 800427c:	f000 fda5 	bl	8004dca <RadioStandby>

    return status;
 8004280:	7dfb      	ldrb	r3, [r7, #23]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8004294:	2300      	movs	r3, #0
 8004296:	2200      	movs	r2, #0
 8004298:	2100      	movs	r1, #0
 800429a:	2000      	movs	r0, #0
 800429c:	f002 f9d0 	bl	8006640 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80042a0:	f001 ff79 	bl	8006196 <SUBGRF_GetRandom>
 80042a4:	6078      	str	r0, [r7, #4]

    return rnd;
 80042a6:	687b      	ldr	r3, [r7, #4]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	@ 0x28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	461a      	mov	r2, r3
 80042bc:	4603      	mov	r3, r0
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	4613      	mov	r3, r2
 80042c2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80042c4:	4ab9      	ldr	r2, [pc, #740]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 80042c6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80042ca:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80042cc:	f002 ffc1 	bl	8007252 <RFW_DeInit>
    if( rxContinuous == true )
 80042d0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 80042dc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d004      	beq.n	80042ee <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80042e4:	4ab2      	ldr	r2, [pc, #712]	@ (80045b0 <RadioSetRxConfig+0x300>)
 80042e6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80042ea:	7013      	strb	r3, [r2, #0]
 80042ec:	e002      	b.n	80042f4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80042ee:	4bb0      	ldr	r3, [pc, #704]	@ (80045b0 <RadioSetRxConfig+0x300>)
 80042f0:	22ff      	movs	r2, #255	@ 0xff
 80042f2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b05      	cmp	r3, #5
 80042f8:	d009      	beq.n	800430e <RadioSetRxConfig+0x5e>
 80042fa:	2b05      	cmp	r3, #5
 80042fc:	f300 81d7 	bgt.w	80046ae <RadioSetRxConfig+0x3fe>
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80bf 	beq.w	8004484 <RadioSetRxConfig+0x1d4>
 8004306:	2b01      	cmp	r3, #1
 8004308:	f000 8124 	beq.w	8004554 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800430c:	e1cf      	b.n	80046ae <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800430e:	2001      	movs	r0, #1
 8004310:	f002 f888 	bl	8006424 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8004314:	4ba5      	ldr	r3, [pc, #660]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800431c:	4aa3      	ldr	r2, [pc, #652]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8004322:	4ba2      	ldr	r3, [pc, #648]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004324:	2209      	movs	r2, #9
 8004326:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800432a:	4ba0      	ldr	r3, [pc, #640]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 800432c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8004330:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8004332:	68b8      	ldr	r0, [r7, #8]
 8004334:	f002 fec0 	bl	80070b8 <SUBGRF_GetFskBandwidthRegValue>
 8004338:	4603      	mov	r3, r0
 800433a:	461a      	mov	r2, r3
 800433c:	4b9b      	ldr	r3, [pc, #620]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 800433e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8004342:	4b9a      	ldr	r3, [pc, #616]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004344:	2200      	movs	r2, #0
 8004346:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8004348:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	b29a      	uxth	r2, r3
 800434e:	4b97      	ldr	r3, [pc, #604]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004350:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8004352:	4b96      	ldr	r3, [pc, #600]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004354:	2200      	movs	r2, #0
 8004356:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8004358:	4b94      	ldr	r3, [pc, #592]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 800435a:	2210      	movs	r2, #16
 800435c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800435e:	4b93      	ldr	r3, [pc, #588]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004360:	2200      	movs	r2, #0
 8004362:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8004364:	4b91      	ldr	r3, [pc, #580]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004366:	2200      	movs	r2, #0
 8004368:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800436a:	4b91      	ldr	r3, [pc, #580]	@ (80045b0 <RadioSetRxConfig+0x300>)
 800436c:	781a      	ldrb	r2, [r3, #0]
 800436e:	4b8f      	ldr	r3, [pc, #572]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004370:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8004372:	4b8e      	ldr	r3, [pc, #568]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004374:	2201      	movs	r2, #1
 8004376:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8004378:	4b8c      	ldr	r3, [pc, #560]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 800437a:	2200      	movs	r2, #0
 800437c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800437e:	2005      	movs	r0, #5
 8004380:	f7ff fec2 	bl	8004108 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8004384:	488b      	ldr	r0, [pc, #556]	@ (80045b4 <RadioSetRxConfig+0x304>)
 8004386:	f002 faf1 	bl	800696c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800438a:	488b      	ldr	r0, [pc, #556]	@ (80045b8 <RadioSetRxConfig+0x308>)
 800438c:	f002 fbbc 	bl	8006b08 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8004390:	4a8a      	ldr	r2, [pc, #552]	@ (80045bc <RadioSetRxConfig+0x30c>)
 8004392:	f107 031c 	add.w	r3, r7, #28
 8004396:	e892 0003 	ldmia.w	r2, {r0, r1}
 800439a:	e883 0003 	stmia.w	r3, {r0, r1}
 800439e:	f107 031c 	add.w	r3, r7, #28
 80043a2:	4618      	mov	r0, r3
 80043a4:	f001 fe75 	bl	8006092 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80043a8:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80043ac:	f001 fec0 	bl	8006130 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80043b0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80043b4:	f000 fe1c 	bl	8004ff0 <RadioRead>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 80043be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043c2:	f023 0310 	bic.w	r3, r3, #16
 80043c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80043ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043ce:	4619      	mov	r1, r3
 80043d0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80043d4:	f000 fdfa 	bl	8004fcc <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80043d8:	2104      	movs	r1, #4
 80043da:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 80043de:	f000 fdf5 	bl	8004fcc <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80043e2:	f640 009b 	movw	r0, #2203	@ 0x89b
 80043e6:	f000 fe03 	bl	8004ff0 <RadioRead>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80043f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043f4:	f023 031c 	bic.w	r3, r3, #28
 80043f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80043fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004400:	f043 0308 	orr.w	r3, r3, #8
 8004404:	b2db      	uxtb	r3, r3
 8004406:	4619      	mov	r1, r3
 8004408:	f640 009b 	movw	r0, #2203	@ 0x89b
 800440c:	f000 fdde 	bl	8004fcc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8004410:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8004414:	f000 fdec 	bl	8004ff0 <RadioRead>
 8004418:	4603      	mov	r3, r0
 800441a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800441e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004422:	f023 0318 	bic.w	r3, r3, #24
 8004426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800442a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800442e:	f043 0318 	orr.w	r3, r3, #24
 8004432:	b2db      	uxtb	r3, r3
 8004434:	4619      	mov	r1, r3
 8004436:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800443a:	f000 fdc7 	bl	8004fcc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800443e:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8004442:	f000 fdd5 	bl	8004ff0 <RadioRead>
 8004446:	4603      	mov	r3, r0
 8004448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800444c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8004458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800445c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8004460:	b2db      	uxtb	r3, r3
 8004462:	4619      	mov	r1, r3
 8004464:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8004468:	f000 fdb0 	bl	8004fcc <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800446c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800446e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8004472:	fb02 f303 	mul.w	r3, r2, r3
 8004476:	461a      	mov	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	4a4b      	ldr	r2, [pc, #300]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004480:	6093      	str	r3, [r2, #8]
            break;
 8004482:	e115      	b.n	80046b0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8004484:	2000      	movs	r0, #0
 8004486:	f001 ffcd 	bl	8006424 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800448a:	4b48      	ldr	r3, [pc, #288]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8004492:	4a46      	ldr	r2, [pc, #280]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8004498:	4b44      	ldr	r3, [pc, #272]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 800449a:	220b      	movs	r2, #11
 800449c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80044a0:	68b8      	ldr	r0, [r7, #8]
 80044a2:	f002 fe09 	bl	80070b8 <SUBGRF_GetFskBandwidthRegValue>
 80044a6:	4603      	mov	r3, r0
 80044a8:	461a      	mov	r2, r3
 80044aa:	4b40      	ldr	r3, [pc, #256]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 80044ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80044b0:	4b3e      	ldr	r3, [pc, #248]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80044b6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	4b3b      	ldr	r3, [pc, #236]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 80044be:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80044c0:	4b3a      	ldr	r3, [pc, #232]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 80044c2:	2204      	movs	r2, #4
 80044c4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80044c6:	4b39      	ldr	r3, [pc, #228]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 80044c8:	2218      	movs	r2, #24
 80044ca:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80044cc:	4b37      	ldr	r3, [pc, #220]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80044d2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80044d6:	f083 0301 	eor.w	r3, r3, #1
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	4b33      	ldr	r3, [pc, #204]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 80044e0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80044e2:	4b33      	ldr	r3, [pc, #204]	@ (80045b0 <RadioSetRxConfig+0x300>)
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	4b31      	ldr	r3, [pc, #196]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 80044e8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80044ea:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80044f2:	4b2e      	ldr	r3, [pc, #184]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 80044f4:	22f2      	movs	r2, #242	@ 0xf2
 80044f6:	75da      	strb	r2, [r3, #23]
 80044f8:	e002      	b.n	8004500 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80044fa:	4b2c      	ldr	r3, [pc, #176]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8004500:	4b2a      	ldr	r3, [pc, #168]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004502:	2201      	movs	r2, #1
 8004504:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8004506:	f000 fc60 	bl	8004dca <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800450a:	2000      	movs	r0, #0
 800450c:	f7ff fdfc 	bl	8004108 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8004510:	4828      	ldr	r0, [pc, #160]	@ (80045b4 <RadioSetRxConfig+0x304>)
 8004512:	f002 fa2b 	bl	800696c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004516:	4828      	ldr	r0, [pc, #160]	@ (80045b8 <RadioSetRxConfig+0x308>)
 8004518:	f002 faf6 	bl	8006b08 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800451c:	4a28      	ldr	r2, [pc, #160]	@ (80045c0 <RadioSetRxConfig+0x310>)
 800451e:	f107 0314 	add.w	r3, r7, #20
 8004522:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004526:	e883 0003 	stmia.w	r3, {r0, r1}
 800452a:	f107 0314 	add.w	r3, r7, #20
 800452e:	4618      	mov	r0, r3
 8004530:	f001 fdaf 	bl	8006092 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8004534:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8004538:	f001 fdfa 	bl	8006130 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800453c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800453e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	461a      	mov	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	4a17      	ldr	r2, [pc, #92]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004550:	6093      	str	r3, [r2, #8]
            break;
 8004552:	e0ad      	b.n	80046b0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8004554:	2000      	movs	r0, #0
 8004556:	f001 ff65 	bl	8006424 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800455a:	4b14      	ldr	r3, [pc, #80]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	4b11      	ldr	r3, [pc, #68]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004568:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800456c:	4a15      	ldr	r2, [pc, #84]	@ (80045c4 <RadioSetRxConfig+0x314>)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4413      	add	r3, r2
 8004572:	781a      	ldrb	r2, [r3, #0]
 8004574:	4b0d      	ldr	r3, [pc, #52]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 8004576:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800457a:	4a0c      	ldr	r2, [pc, #48]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 800457c:	7bbb      	ldrb	r3, [r7, #14]
 800457e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d105      	bne.n	8004594 <RadioSetRxConfig+0x2e4>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b0b      	cmp	r3, #11
 800458c:	d008      	beq.n	80045a0 <RadioSetRxConfig+0x2f0>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b0c      	cmp	r3, #12
 8004592:	d005      	beq.n	80045a0 <RadioSetRxConfig+0x2f0>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d116      	bne.n	80045c8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b0c      	cmp	r3, #12
 800459e:	d113      	bne.n	80045c8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80045a0:	4b02      	ldr	r3, [pc, #8]	@ (80045ac <RadioSetRxConfig+0x2fc>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80045a8:	e012      	b.n	80045d0 <RadioSetRxConfig+0x320>
 80045aa:	bf00      	nop
 80045ac:	200002c8 	.word	0x200002c8
 80045b0:	20000009 	.word	0x20000009
 80045b4:	20000300 	.word	0x20000300
 80045b8:	200002d6 	.word	0x200002d6
 80045bc:	08008748 	.word	0x08008748
 80045c0:	08008750 	.word	0x08008750
 80045c4:	080088d8 	.word	0x080088d8
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80045c8:	4b3b      	ldr	r3, [pc, #236]	@ (80046b8 <RadioSetRxConfig+0x408>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80045d0:	4b39      	ldr	r3, [pc, #228]	@ (80046b8 <RadioSetRxConfig+0x408>)
 80045d2:	2201      	movs	r2, #1
 80045d4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80045d6:	4b38      	ldr	r3, [pc, #224]	@ (80046b8 <RadioSetRxConfig+0x408>)
 80045d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045dc:	2b05      	cmp	r3, #5
 80045de:	d004      	beq.n	80045ea <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80045e0:	4b35      	ldr	r3, [pc, #212]	@ (80046b8 <RadioSetRxConfig+0x408>)
 80045e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80045e6:	2b06      	cmp	r3, #6
 80045e8:	d10a      	bne.n	8004600 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80045ea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80045ec:	2b0b      	cmp	r3, #11
 80045ee:	d803      	bhi.n	80045f8 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80045f0:	4b31      	ldr	r3, [pc, #196]	@ (80046b8 <RadioSetRxConfig+0x408>)
 80045f2:	220c      	movs	r2, #12
 80045f4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80045f6:	e006      	b.n	8004606 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80045f8:	4a2f      	ldr	r2, [pc, #188]	@ (80046b8 <RadioSetRxConfig+0x408>)
 80045fa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80045fc:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80045fe:	e002      	b.n	8004606 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8004600:	4a2d      	ldr	r2, [pc, #180]	@ (80046b8 <RadioSetRxConfig+0x408>)
 8004602:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004604:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8004606:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800460a:	4b2b      	ldr	r3, [pc, #172]	@ (80046b8 <RadioSetRxConfig+0x408>)
 800460c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800460e:	4b2b      	ldr	r3, [pc, #172]	@ (80046bc <RadioSetRxConfig+0x40c>)
 8004610:	781a      	ldrb	r2, [r3, #0]
 8004612:	4b29      	ldr	r3, [pc, #164]	@ (80046b8 <RadioSetRxConfig+0x408>)
 8004614:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8004616:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800461a:	4b27      	ldr	r3, [pc, #156]	@ (80046b8 <RadioSetRxConfig+0x408>)
 800461c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8004620:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8004624:	4b24      	ldr	r3, [pc, #144]	@ (80046b8 <RadioSetRxConfig+0x408>)
 8004626:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 800462a:	f000 fbce 	bl	8004dca <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800462e:	2001      	movs	r0, #1
 8004630:	f7ff fd6a 	bl	8004108 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8004634:	4822      	ldr	r0, [pc, #136]	@ (80046c0 <RadioSetRxConfig+0x410>)
 8004636:	f002 f999 	bl	800696c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800463a:	4822      	ldr	r0, [pc, #136]	@ (80046c4 <RadioSetRxConfig+0x414>)
 800463c:	f002 fa64 	bl	8006b08 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8004640:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004642:	b2db      	uxtb	r3, r3
 8004644:	4618      	mov	r0, r3
 8004646:	f001 fefc 	bl	8006442 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800464a:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800464e:	f002 fbc3 	bl	8006dd8 <SUBGRF_ReadRegister>
 8004652:	4603      	mov	r3, r0
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	b2db      	uxtb	r3, r3
 800465a:	4619      	mov	r1, r3
 800465c:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8004660:	f002 fb98 	bl	8006d94 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8004664:	4b14      	ldr	r3, [pc, #80]	@ (80046b8 <RadioSetRxConfig+0x408>)
 8004666:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800466a:	2b01      	cmp	r3, #1
 800466c:	d10d      	bne.n	800468a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800466e:	f240 7036 	movw	r0, #1846	@ 0x736
 8004672:	f002 fbb1 	bl	8006dd8 <SUBGRF_ReadRegister>
 8004676:	4603      	mov	r3, r0
 8004678:	f023 0304 	bic.w	r3, r3, #4
 800467c:	b2db      	uxtb	r3, r3
 800467e:	4619      	mov	r1, r3
 8004680:	f240 7036 	movw	r0, #1846	@ 0x736
 8004684:	f002 fb86 	bl	8006d94 <SUBGRF_WriteRegister>
 8004688:	e00c      	b.n	80046a4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800468a:	f240 7036 	movw	r0, #1846	@ 0x736
 800468e:	f002 fba3 	bl	8006dd8 <SUBGRF_ReadRegister>
 8004692:	4603      	mov	r3, r0
 8004694:	f043 0304 	orr.w	r3, r3, #4
 8004698:	b2db      	uxtb	r3, r3
 800469a:	4619      	mov	r1, r3
 800469c:	f240 7036 	movw	r0, #1846	@ 0x736
 80046a0:	f002 fb78 	bl	8006d94 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80046a4:	4b04      	ldr	r3, [pc, #16]	@ (80046b8 <RadioSetRxConfig+0x408>)
 80046a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046aa:	609a      	str	r2, [r3, #8]
            break;
 80046ac:	e000      	b.n	80046b0 <RadioSetRxConfig+0x400>
            break;
 80046ae:	bf00      	nop
    }
}
 80046b0:	bf00      	nop
 80046b2:	3728      	adds	r7, #40	@ 0x28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	200002c8 	.word	0x200002c8
 80046bc:	20000009 	.word	0x20000009
 80046c0:	20000300 	.word	0x20000300
 80046c4:	200002d6 	.word	0x200002d6

080046c8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60ba      	str	r2, [r7, #8]
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	4603      	mov	r3, r0
 80046d4:	73fb      	strb	r3, [r7, #15]
 80046d6:	460b      	mov	r3, r1
 80046d8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80046da:	f002 fdba 	bl	8007252 <RFW_DeInit>
    switch( modem )
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	f000 80c7 	beq.w	8004874 <RadioSetTxConfig+0x1ac>
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	f300 80d6 	bgt.w	8004898 <RadioSetTxConfig+0x1d0>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <RadioSetTxConfig+0x2e>
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d059      	beq.n	80047a8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80046f4:	e0d0      	b.n	8004898 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80046f6:	4b77      	ldr	r3, [pc, #476]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80046fe:	4a75      	ldr	r2, [pc, #468]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8004704:	4b73      	ldr	r3, [pc, #460]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004706:	220b      	movs	r2, #11
 8004708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f002 fcd3 	bl	80070b8 <SUBGRF_GetFskBandwidthRegValue>
 8004712:	4603      	mov	r3, r0
 8004714:	461a      	mov	r2, r3
 8004716:	4b6f      	ldr	r3, [pc, #444]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800471c:	4a6d      	ldr	r2, [pc, #436]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8004722:	4b6c      	ldr	r3, [pc, #432]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004724:	2200      	movs	r2, #0
 8004726:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8004728:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	b29a      	uxth	r2, r3
 800472e:	4b69      	ldr	r3, [pc, #420]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004730:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8004732:	4b68      	ldr	r3, [pc, #416]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004734:	2204      	movs	r2, #4
 8004736:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8004738:	4b66      	ldr	r3, [pc, #408]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 800473a:	2218      	movs	r2, #24
 800473c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800473e:	4b65      	ldr	r3, [pc, #404]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004740:	2200      	movs	r2, #0
 8004742:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8004744:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004748:	f083 0301 	eor.w	r3, r3, #1
 800474c:	b2db      	uxtb	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	4b60      	ldr	r3, [pc, #384]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004752:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8004754:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800475c:	4b5d      	ldr	r3, [pc, #372]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 800475e:	22f2      	movs	r2, #242	@ 0xf2
 8004760:	75da      	strb	r2, [r3, #23]
 8004762:	e002      	b.n	800476a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8004764:	4b5b      	ldr	r3, [pc, #364]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004766:	2201      	movs	r2, #1
 8004768:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800476a:	4b5a      	ldr	r3, [pc, #360]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 800476c:	2201      	movs	r2, #1
 800476e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8004770:	f000 fb2b 	bl	8004dca <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8004774:	2000      	movs	r0, #0
 8004776:	f7ff fcc7 	bl	8004108 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800477a:	4857      	ldr	r0, [pc, #348]	@ (80048d8 <RadioSetTxConfig+0x210>)
 800477c:	f002 f8f6 	bl	800696c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004780:	4856      	ldr	r0, [pc, #344]	@ (80048dc <RadioSetTxConfig+0x214>)
 8004782:	f002 f9c1 	bl	8006b08 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8004786:	4a56      	ldr	r2, [pc, #344]	@ (80048e0 <RadioSetTxConfig+0x218>)
 8004788:	f107 0310 	add.w	r3, r7, #16
 800478c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004790:	e883 0003 	stmia.w	r3, {r0, r1}
 8004794:	f107 0310 	add.w	r3, r7, #16
 8004798:	4618      	mov	r0, r3
 800479a:	f001 fc7a 	bl	8006092 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800479e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80047a2:	f001 fcc5 	bl	8006130 <SUBGRF_SetWhiteningSeed>
            break;
 80047a6:	e078      	b.n	800489a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80047a8:	4b4a      	ldr	r3, [pc, #296]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	4b47      	ldr	r3, [pc, #284]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 80047b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80047ba:	4a4a      	ldr	r2, [pc, #296]	@ (80048e4 <RadioSetTxConfig+0x21c>)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4413      	add	r3, r2
 80047c0:	781a      	ldrb	r2, [r3, #0]
 80047c2:	4b44      	ldr	r3, [pc, #272]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 80047c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80047c8:	4a42      	ldr	r2, [pc, #264]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 80047ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047ce:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <RadioSetTxConfig+0x11c>
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	2b0b      	cmp	r3, #11
 80047dc:	d008      	beq.n	80047f0 <RadioSetTxConfig+0x128>
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	d005      	beq.n	80047f0 <RadioSetTxConfig+0x128>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d107      	bne.n	80047fa <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	2b0c      	cmp	r3, #12
 80047ee:	d104      	bne.n	80047fa <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80047f0:	4b38      	ldr	r3, [pc, #224]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80047f8:	e003      	b.n	8004802 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80047fa:	4b36      	ldr	r3, [pc, #216]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8004802:	4b34      	ldr	r3, [pc, #208]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004804:	2201      	movs	r2, #1
 8004806:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8004808:	4b32      	ldr	r3, [pc, #200]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 800480a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800480e:	2b05      	cmp	r3, #5
 8004810:	d004      	beq.n	800481c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8004812:	4b30      	ldr	r3, [pc, #192]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004814:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8004818:	2b06      	cmp	r3, #6
 800481a:	d10a      	bne.n	8004832 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800481c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800481e:	2b0b      	cmp	r3, #11
 8004820:	d803      	bhi.n	800482a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8004822:	4b2c      	ldr	r3, [pc, #176]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004824:	220c      	movs	r2, #12
 8004826:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8004828:	e006      	b.n	8004838 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800482a:	4a2a      	ldr	r2, [pc, #168]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 800482c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800482e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8004830:	e002      	b.n	8004838 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8004832:	4a28      	ldr	r2, [pc, #160]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004834:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004836:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8004838:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800483c:	4b25      	ldr	r3, [pc, #148]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 800483e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8004840:	4b29      	ldr	r3, [pc, #164]	@ (80048e8 <RadioSetTxConfig+0x220>)
 8004842:	781a      	ldrb	r2, [r3, #0]
 8004844:	4b23      	ldr	r3, [pc, #140]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004846:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8004848:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800484c:	4b21      	ldr	r3, [pc, #132]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 800484e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8004852:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8004856:	4b1f      	ldr	r3, [pc, #124]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004858:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 800485c:	f000 fab5 	bl	8004dca <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8004860:	2001      	movs	r0, #1
 8004862:	f7ff fc51 	bl	8004108 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8004866:	481c      	ldr	r0, [pc, #112]	@ (80048d8 <RadioSetTxConfig+0x210>)
 8004868:	f002 f880 	bl	800696c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800486c:	481b      	ldr	r0, [pc, #108]	@ (80048dc <RadioSetTxConfig+0x214>)
 800486e:	f002 f94b 	bl	8006b08 <SUBGRF_SetPacketParams>
            break;
 8004872:	e012      	b.n	800489a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8004874:	2004      	movs	r0, #4
 8004876:	f7ff fc47 	bl	8004108 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800487a:	4b16      	ldr	r3, [pc, #88]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 800487c:	2202      	movs	r2, #2
 800487e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8004882:	4a14      	ldr	r2, [pc, #80]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8004888:	4b12      	ldr	r3, [pc, #72]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 800488a:	2216      	movs	r2, #22
 800488c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8004890:	4811      	ldr	r0, [pc, #68]	@ (80048d8 <RadioSetTxConfig+0x210>)
 8004892:	f002 f86b 	bl	800696c <SUBGRF_SetModulationParams>
            break;
 8004896:	e000      	b.n	800489a <RadioSetTxConfig+0x1d2>
            break;
 8004898:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800489a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800489e:	4618      	mov	r0, r3
 80048a0:	f002 fbae 	bl	8007000 <SUBGRF_SetRfTxPower>
 80048a4:	4603      	mov	r3, r0
 80048a6:	461a      	mov	r2, r3
 80048a8:	4b0a      	ldr	r3, [pc, #40]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 80048aa:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80048ae:	210e      	movs	r1, #14
 80048b0:	f640 101f 	movw	r0, #2335	@ 0x91f
 80048b4:	f002 fa6e 	bl	8006d94 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80048b8:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 80048ba:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80048be:	4618      	mov	r0, r3
 80048c0:	f002 fcdb 	bl	800727a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80048c4:	4a03      	ldr	r2, [pc, #12]	@ (80048d4 <RadioSetTxConfig+0x20c>)
 80048c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c8:	6053      	str	r3, [r2, #4]
}
 80048ca:	bf00      	nop
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	200002c8 	.word	0x200002c8
 80048d8:	20000300 	.word	0x20000300
 80048dc:	200002d6 	.word	0x200002d6
 80048e0:	08008750 	.word	0x08008750
 80048e4:	080088d8 	.word	0x080088d8
 80048e8:	20000009 	.word	0x20000009

080048ec <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
    return true;
 80048f4:	2301      	movs	r3, #1
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr

08004900 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	2b0a      	cmp	r3, #10
 8004912:	d83e      	bhi.n	8004992 <RadioGetLoRaBandwidthInHz+0x92>
 8004914:	a201      	add	r2, pc, #4	@ (adr r2, 800491c <RadioGetLoRaBandwidthInHz+0x1c>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004949 	.word	0x08004949
 8004920:	08004959 	.word	0x08004959
 8004924:	08004969 	.word	0x08004969
 8004928:	08004979 	.word	0x08004979
 800492c:	08004981 	.word	0x08004981
 8004930:	08004987 	.word	0x08004987
 8004934:	0800498d 	.word	0x0800498d
 8004938:	08004993 	.word	0x08004993
 800493c:	08004951 	.word	0x08004951
 8004940:	08004961 	.word	0x08004961
 8004944:	08004971 	.word	0x08004971
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8004948:	f641 6384 	movw	r3, #7812	@ 0x1e84
 800494c:	60fb      	str	r3, [r7, #12]
        break;
 800494e:	e020      	b.n	8004992 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8004950:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8004954:	60fb      	str	r3, [r7, #12]
        break;
 8004956:	e01c      	b.n	8004992 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8004958:	f643 5309 	movw	r3, #15625	@ 0x3d09
 800495c:	60fb      	str	r3, [r7, #12]
        break;
 800495e:	e018      	b.n	8004992 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8004960:	f245 1361 	movw	r3, #20833	@ 0x5161
 8004964:	60fb      	str	r3, [r7, #12]
        break;
 8004966:	e014      	b.n	8004992 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8004968:	f647 2312 	movw	r3, #31250	@ 0x7a12
 800496c:	60fb      	str	r3, [r7, #12]
        break;
 800496e:	e010      	b.n	8004992 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8004970:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8004974:	60fb      	str	r3, [r7, #12]
        break;
 8004976:	e00c      	b.n	8004992 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8004978:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800497c:	60fb      	str	r3, [r7, #12]
        break;
 800497e:	e008      	b.n	8004992 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8004980:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8004982:	60fb      	str	r3, [r7, #12]
        break;
 8004984:	e005      	b.n	8004992 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8004986:	4b07      	ldr	r3, [pc, #28]	@ (80049a4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8004988:	60fb      	str	r3, [r7, #12]
        break;
 800498a:	e002      	b.n	8004992 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800498c:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <RadioGetLoRaBandwidthInHz+0xa8>)
 800498e:	60fb      	str	r3, [r7, #12]
        break;
 8004990:	bf00      	nop
    }

    return bandwidthInHz;
 8004992:	68fb      	ldr	r3, [r7, #12]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	0001e848 	.word	0x0001e848
 80049a4:	0003d090 	.word	0x0003d090
 80049a8:	0007a120 	.word	0x0007a120

080049ac <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	4608      	mov	r0, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	461a      	mov	r2, r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	70fb      	strb	r3, [r7, #3]
 80049be:	460b      	mov	r3, r1
 80049c0:	803b      	strh	r3, [r7, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80049c6:	883b      	ldrh	r3, [r7, #0]
 80049c8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80049ca:	78ba      	ldrb	r2, [r7, #2]
 80049cc:	f082 0201 	eor.w	r2, r2, #1
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	d001      	beq.n	80049da <RadioGetGfskTimeOnAirNumerator+0x2e>
 80049d6:	2208      	movs	r2, #8
 80049d8:	e000      	b.n	80049dc <RadioGetGfskTimeOnAirNumerator+0x30>
 80049da:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80049dc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80049de:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80049e2:	7c3b      	ldrb	r3, [r7, #16]
 80049e4:	7d39      	ldrb	r1, [r7, #20]
 80049e6:	2900      	cmp	r1, #0
 80049e8:	d001      	beq.n	80049ee <RadioGetGfskTimeOnAirNumerator+0x42>
 80049ea:	2102      	movs	r1, #2
 80049ec:	e000      	b.n	80049f0 <RadioGetGfskTimeOnAirNumerator+0x44>
 80049ee:	2100      	movs	r1, #0
 80049f0:	440b      	add	r3, r1
 80049f2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80049f4:	4413      	add	r3, r2
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr

08004a00 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8004a00:	b480      	push	{r7}
 8004a02:	b08b      	sub	sp, #44	@ 0x2c
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	460b      	mov	r3, r1
 8004a10:	71fb      	strb	r3, [r7, #7]
 8004a12:	4613      	mov	r3, r2
 8004a14:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b05      	cmp	r3, #5
 8004a26:	d002      	beq.n	8004a2e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b06      	cmp	r3, #6
 8004a2c:	d104      	bne.n	8004a38 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8004a2e:	88bb      	ldrh	r3, [r7, #4]
 8004a30:	2b0b      	cmp	r3, #11
 8004a32:	d801      	bhi.n	8004a38 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8004a34:	230c      	movs	r3, #12
 8004a36:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d105      	bne.n	8004a4a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b0b      	cmp	r3, #11
 8004a42:	d008      	beq.n	8004a56 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d005      	beq.n	8004a56 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d105      	bne.n	8004a5c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b0c      	cmp	r3, #12
 8004a54:	d102      	bne.n	8004a5c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004a5c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004a60:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8004a62:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	d001      	beq.n	8004a6e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	e000      	b.n	8004a70 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8004a6e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004a70:	4413      	add	r3, r2
 8004a72:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8004a78:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8004a7a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004a7e:	2a00      	cmp	r2, #0
 8004a80:	d001      	beq.n	8004a86 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8004a82:	2200      	movs	r2, #0
 8004a84:	e000      	b.n	8004a88 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8004a86:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8004a88:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004a8a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b06      	cmp	r3, #6
 8004a90:	d803      	bhi.n	8004a9a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	623b      	str	r3, [r7, #32]
 8004a98:	e00e      	b.n	8004ab8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8004aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	3b02      	subs	r3, #2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	623b      	str	r3, [r7, #32]
 8004ab0:	e002      	b.n	8004ab8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	da01      	bge.n	8004ac2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	1e5a      	subs	r2, r3, #1
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	fb03 f202 	mul.w	r2, r3, r2
 8004ad6:	88bb      	ldrh	r3, [r7, #4]
 8004ad8:	4413      	add	r3, r2
    int32_t intermediate =
 8004ada:	330c      	adds	r3, #12
 8004adc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b06      	cmp	r3, #6
 8004ae2:	d802      	bhi.n	8004aea <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	3b02      	subs	r3, #2
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	372c      	adds	r7, #44	@ 0x2c
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
	...

08004b04 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08a      	sub	sp, #40	@ 0x28
 8004b08:	af04      	add	r7, sp, #16
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	4603      	mov	r3, r0
 8004b12:	73fb      	strb	r3, [r7, #15]
 8004b14:	4613      	mov	r3, r2
 8004b16:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <RadioTimeOnAir+0x28>
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d017      	beq.n	8004b5a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8004b2a:	e035      	b.n	8004b98 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8004b2c:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8004b30:	8c3a      	ldrh	r2, [r7, #32]
 8004b32:	7bb9      	ldrb	r1, [r7, #14]
 8004b34:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004b38:	9301      	str	r3, [sp, #4]
 8004b3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	4603      	mov	r3, r0
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff ff32 	bl	80049ac <RadioGetGfskTimeOnAirNumerator>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	613b      	str	r3, [r7, #16]
        break;
 8004b58:	e01e      	b.n	8004b98 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8004b5a:	8c39      	ldrh	r1, [r7, #32]
 8004b5c:	7bba      	ldrb	r2, [r7, #14]
 8004b5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004b62:	9302      	str	r3, [sp, #8]
 8004b64:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b68:	9301      	str	r3, [sp, #4]
 8004b6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	460b      	mov	r3, r1
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	68b8      	ldr	r0, [r7, #8]
 8004b76:	f7ff ff43 	bl	8004a00 <RadioGetLoRaTimeOnAirNumerator>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b80:	fb02 f303 	mul.w	r3, r2, r3
 8004b84:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8004b86:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb0 <RadioTimeOnAir+0xac>)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff feb6 	bl	8004900 <RadioGetLoRaBandwidthInHz>
 8004b94:	6138      	str	r0, [r7, #16]
        break;
 8004b96:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	1e5a      	subs	r2, r3, #1
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	080088d8 	.word	0x080088d8

08004bb4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f240 2101 	movw	r1, #513	@ 0x201
 8004bc8:	f240 2001 	movw	r0, #513	@ 0x201
 8004bcc:	f001 fd38 	bl	8006640 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8004bd0:	4b70      	ldr	r3, [pc, #448]	@ (8004d94 <RadioSend+0x1e0>)
 8004bd2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f002 f9e9 	bl	8006fb0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8004bde:	4b6d      	ldr	r3, [pc, #436]	@ (8004d94 <RadioSend+0x1e0>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d112      	bne.n	8004c0c <RadioSend+0x58>
 8004be6:	4b6b      	ldr	r3, [pc, #428]	@ (8004d94 <RadioSend+0x1e0>)
 8004be8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bec:	2b06      	cmp	r3, #6
 8004bee:	d10d      	bne.n	8004c0c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8004bf0:	f640 0089 	movw	r0, #2185	@ 0x889
 8004bf4:	f002 f8f0 	bl	8006dd8 <SUBGRF_ReadRegister>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f023 0304 	bic.w	r3, r3, #4
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	4619      	mov	r1, r3
 8004c02:	f640 0089 	movw	r0, #2185	@ 0x889
 8004c06:	f002 f8c5 	bl	8006d94 <SUBGRF_WriteRegister>
 8004c0a:	e00c      	b.n	8004c26 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8004c0c:	f640 0089 	movw	r0, #2185	@ 0x889
 8004c10:	f002 f8e2 	bl	8006dd8 <SUBGRF_ReadRegister>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f043 0304 	orr.w	r3, r3, #4
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	f640 0089 	movw	r0, #2185	@ 0x889
 8004c22:	f002 f8b7 	bl	8006d94 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8004c26:	4b5b      	ldr	r3, [pc, #364]	@ (8004d94 <RadioSend+0x1e0>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	f200 80a2 	bhi.w	8004d74 <RadioSend+0x1c0>
 8004c30:	a201      	add	r2, pc, #4	@ (adr r2, 8004c38 <RadioSend+0x84>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c67 	.word	0x08004c67
 8004c3c:	08004c4d 	.word	0x08004c4d
 8004c40:	08004c67 	.word	0x08004c67
 8004c44:	08004cbd 	.word	0x08004cbd
 8004c48:	08004cdd 	.word	0x08004cdd
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8004c4c:	4a51      	ldr	r2, [pc, #324]	@ (8004d94 <RadioSend+0x1e0>)
 8004c4e:	78fb      	ldrb	r3, [r7, #3]
 8004c50:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004c52:	4851      	ldr	r0, [pc, #324]	@ (8004d98 <RadioSend+0x1e4>)
 8004c54:	f001 ff58 	bl	8006b08 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f001 fa04 	bl	800606c <SUBGRF_SendPayload>
            break;
 8004c64:	e087      	b.n	8004d76 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8004c66:	f002 fafa 	bl	800725e <RFW_Is_Init>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d118      	bne.n	8004ca2 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8004c70:	f107 020d 	add.w	r2, r7, #13
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	4619      	mov	r1, r3
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f002 fb08 	bl	800728e <RFW_TransmitInit>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10c      	bne.n	8004c9e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8004c84:	7b7a      	ldrb	r2, [r7, #13]
 8004c86:	4b43      	ldr	r3, [pc, #268]	@ (8004d94 <RadioSend+0x1e0>)
 8004c88:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004c8a:	4843      	ldr	r0, [pc, #268]	@ (8004d98 <RadioSend+0x1e4>)
 8004c8c:	f001 ff3c 	bl	8006b08 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8004c90:	7b7b      	ldrb	r3, [r7, #13]
 8004c92:	2200      	movs	r2, #0
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f001 f9e8 	bl	800606c <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8004c9c:	e06b      	b.n	8004d76 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e073      	b.n	8004d8a <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8004ca2:	4a3c      	ldr	r2, [pc, #240]	@ (8004d94 <RadioSend+0x1e0>)
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004ca8:	483b      	ldr	r0, [pc, #236]	@ (8004d98 <RadioSend+0x1e4>)
 8004caa:	f001 ff2d 	bl	8006b08 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f001 f9d9 	bl	800606c <SUBGRF_SendPayload>
            break;
 8004cba:	e05c      	b.n	8004d76 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8004cbc:	4b35      	ldr	r3, [pc, #212]	@ (8004d94 <RadioSend+0x1e0>)
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8004cc2:	4a34      	ldr	r2, [pc, #208]	@ (8004d94 <RadioSend+0x1e0>)
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004cc8:	4833      	ldr	r0, [pc, #204]	@ (8004d98 <RadioSend+0x1e4>)
 8004cca:	f001 ff1d 	bl	8006b08 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f001 f9c9 	bl	800606c <SUBGRF_SendPayload>
            break;
 8004cda:	e04c      	b.n	8004d76 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	482e      	ldr	r0, [pc, #184]	@ (8004d9c <RadioSend+0x1e8>)
 8004ce4:	f000 fc96 	bl	8005614 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8004ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8004d94 <RadioSend+0x1e0>)
 8004cea:	2202      	movs	r2, #2
 8004cec:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	4b27      	ldr	r3, [pc, #156]	@ (8004d94 <RadioSend+0x1e0>)
 8004cf6:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004cf8:	4827      	ldr	r0, [pc, #156]	@ (8004d98 <RadioSend+0x1e4>)
 8004cfa:	f001 ff05 	bl	8006b08 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8004cfe:	2100      	movs	r1, #0
 8004d00:	20f1      	movs	r0, #241	@ 0xf1
 8004d02:	f000 f963 	bl	8004fcc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8004d06:	2100      	movs	r1, #0
 8004d08:	20f0      	movs	r0, #240	@ 0xf0
 8004d0a:	f000 f95f 	bl	8004fcc <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8004d0e:	4b21      	ldr	r3, [pc, #132]	@ (8004d94 <RadioSend+0x1e0>)
 8004d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d12:	2b64      	cmp	r3, #100	@ 0x64
 8004d14:	d108      	bne.n	8004d28 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8004d16:	2170      	movs	r1, #112	@ 0x70
 8004d18:	20f3      	movs	r0, #243	@ 0xf3
 8004d1a:	f000 f957 	bl	8004fcc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8004d1e:	211d      	movs	r1, #29
 8004d20:	20f2      	movs	r0, #242	@ 0xf2
 8004d22:	f000 f953 	bl	8004fcc <RadioWrite>
 8004d26:	e007      	b.n	8004d38 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8004d28:	21e1      	movs	r1, #225	@ 0xe1
 8004d2a:	20f3      	movs	r0, #243	@ 0xf3
 8004d2c:	f000 f94e 	bl	8004fcc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8004d30:	2104      	movs	r1, #4
 8004d32:	20f2      	movs	r0, #242	@ 0xf2
 8004d34:	f000 f94a 	bl	8004fcc <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3302      	adds	r3, #2
 8004d42:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8004d44:	89fb      	ldrh	r3, [r7, #14]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	20f4      	movs	r0, #244	@ 0xf4
 8004d50:	f000 f93c 	bl	8004fcc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8004d54:	89fb      	ldrh	r3, [r7, #14]
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	4619      	mov	r1, r3
 8004d5a:	20f5      	movs	r0, #245	@ 0xf5
 8004d5c:	f000 f936 	bl	8004fcc <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	3301      	adds	r3, #1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	480b      	ldr	r0, [pc, #44]	@ (8004d9c <RadioSend+0x1e8>)
 8004d6e:	f001 f97d 	bl	800606c <SUBGRF_SendPayload>
            break;
 8004d72:	e000      	b.n	8004d76 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8004d74:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8004d76:	4b07      	ldr	r3, [pc, #28]	@ (8004d94 <RadioSend+0x1e0>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4808      	ldr	r0, [pc, #32]	@ (8004da0 <RadioSend+0x1ec>)
 8004d7e:	f002 fcaf 	bl	80076e0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8004d82:	4807      	ldr	r0, [pc, #28]	@ (8004da0 <RadioSend+0x1ec>)
 8004d84:	f002 fbce 	bl	8007524 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	200002c8 	.word	0x200002c8
 8004d98:	200002d6 	.word	0x200002d6
 8004d9c:	200001c4 	.word	0x200001c4
 8004da0:	20000324 	.word	0x20000324

08004da4 <RadioSleep>:

static void RadioSleep( void )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8004daa:	2300      	movs	r3, #0
 8004dac:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8004dae:	793b      	ldrb	r3, [r7, #4]
 8004db0:	f043 0304 	orr.w	r3, r3, #4
 8004db4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8004db6:	7938      	ldrb	r0, [r7, #4]
 8004db8:	f001 fa34 	bl	8006224 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8004dbc:	2002      	movs	r0, #2
 8004dbe:	f7fc f91d 	bl	8000ffc <HAL_Delay>
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <RadioStandby>:

static void RadioStandby( void )
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f001 fa5c 	bl	800628c <SUBGRF_SetStandby>
}
 8004dd4:	bf00      	nop
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8004de0:	f002 fa3d 	bl	800725e <RFW_Is_Init>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d102      	bne.n	8004df0 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8004dea:	f002 fa60 	bl	80072ae <RFW_ReceiveInit>
 8004dee:	e007      	b.n	8004e00 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8004df0:	2300      	movs	r3, #0
 8004df2:	2200      	movs	r2, #0
 8004df4:	f240 2162 	movw	r1, #610	@ 0x262
 8004df8:	f240 2062 	movw	r0, #610	@ 0x262
 8004dfc:	f001 fc20 	bl	8006640 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d006      	beq.n	8004e14 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	4811      	ldr	r0, [pc, #68]	@ (8004e50 <RadioRx+0x78>)
 8004e0a:	f002 fc69 	bl	80076e0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8004e0e:	4810      	ldr	r0, [pc, #64]	@ (8004e50 <RadioRx+0x78>)
 8004e10:	f002 fb88 	bl	8007524 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8004e14:	4b0f      	ldr	r3, [pc, #60]	@ (8004e54 <RadioRx+0x7c>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e54 <RadioRx+0x7c>)
 8004e1c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f002 f8c4 	bl	8006fb0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8004e28:	4b0a      	ldr	r3, [pc, #40]	@ (8004e54 <RadioRx+0x7c>)
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d004      	beq.n	8004e3a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8004e30:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8004e34:	f001 fa66 	bl	8006304 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8004e38:	e005      	b.n	8004e46 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8004e3a:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <RadioRx+0x7c>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	019b      	lsls	r3, r3, #6
 8004e40:	4618      	mov	r0, r3
 8004e42:	f001 fa5f 	bl	8006304 <SUBGRF_SetRx>
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	2000033c 	.word	0x2000033c
 8004e54:	200002c8 	.word	0x200002c8

08004e58 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8004e60:	f002 f9fd 	bl	800725e <RFW_Is_Init>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d102      	bne.n	8004e70 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8004e6a:	f002 fa20 	bl	80072ae <RFW_ReceiveInit>
 8004e6e:	e007      	b.n	8004e80 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8004e70:	2300      	movs	r3, #0
 8004e72:	2200      	movs	r2, #0
 8004e74:	f240 2162 	movw	r1, #610	@ 0x262
 8004e78:	f240 2062 	movw	r0, #610	@ 0x262
 8004e7c:	f001 fbe0 	bl	8006640 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d006      	beq.n	8004e94 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4811      	ldr	r0, [pc, #68]	@ (8004ed0 <RadioRxBoosted+0x78>)
 8004e8a:	f002 fc29 	bl	80076e0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8004e8e:	4810      	ldr	r0, [pc, #64]	@ (8004ed0 <RadioRxBoosted+0x78>)
 8004e90:	f002 fb48 	bl	8007524 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8004e94:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed4 <RadioRxBoosted+0x7c>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8004e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed4 <RadioRxBoosted+0x7c>)
 8004e9c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f002 f884 	bl	8006fb0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8004ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed4 <RadioRxBoosted+0x7c>)
 8004eaa:	785b      	ldrb	r3, [r3, #1]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d004      	beq.n	8004eba <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8004eb0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8004eb4:	f001 fa46 	bl	8006344 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8004eb8:	e005      	b.n	8004ec6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8004eba:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <RadioRxBoosted+0x7c>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	019b      	lsls	r3, r3, #6
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f001 fa3f 	bl	8006344 <SUBGRF_SetRxBoosted>
}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	2000033c 	.word	0x2000033c
 8004ed4:	200002c8 	.word	0x200002c8

08004ed8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	005a      	lsls	r2, r3, #1
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	4413      	add	r3, r2
 8004eea:	4a0c      	ldr	r2, [pc, #48]	@ (8004f1c <RadioSetRxDutyCycle+0x44>)
 8004eec:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8004eee:	2300      	movs	r3, #0
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004ef6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004efa:	f001 fba1 	bl	8006640 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8004efe:	4b07      	ldr	r3, [pc, #28]	@ (8004f1c <RadioSetRxDutyCycle+0x44>)
 8004f00:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004f04:	2100      	movs	r1, #0
 8004f06:	4618      	mov	r0, r3
 8004f08:	f002 f852 	bl	8006fb0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8004f0c:	6839      	ldr	r1, [r7, #0]
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f001 fa3c 	bl	800638c <SUBGRF_SetRxDutyCycle>
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	200002c8 	.word	0x200002c8

08004f20 <RadioStartCad>:

static void RadioStartCad( void )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8004f24:	4b09      	ldr	r3, [pc, #36]	@ (8004f4c <RadioStartCad+0x2c>)
 8004f26:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f002 f83f 	bl	8006fb0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8004f32:	2300      	movs	r3, #0
 8004f34:	2200      	movs	r2, #0
 8004f36:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8004f3a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8004f3e:	f001 fb7f 	bl	8006640 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8004f42:	f001 fa4f 	bl	80063e4 <SUBGRF_SetCad>
}
 8004f46:	bf00      	nop
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200002c8 	.word	0x200002c8

08004f50 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	70fb      	strb	r3, [r7, #3]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8004f60:	883b      	ldrh	r3, [r7, #0]
 8004f62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f66:	fb02 f303 	mul.w	r3, r2, r3
 8004f6a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f001 fbc3 	bl	80066f8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8004f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f002 f842 	bl	8007000 <SUBGRF_SetRfTxPower>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8004f80:	210e      	movs	r1, #14
 8004f82:	f640 101f 	movw	r0, #2335	@ 0x91f
 8004f86:	f001 ff05 	bl	8006d94 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8004f8a:	7afb      	ldrb	r3, [r7, #11]
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f002 f80e 	bl	8006fb0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8004f94:	f001 fa34 	bl	8006400 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8004f98:	68f9      	ldr	r1, [r7, #12]
 8004f9a:	4805      	ldr	r0, [pc, #20]	@ (8004fb0 <RadioSetTxContinuousWave+0x60>)
 8004f9c:	f002 fba0 	bl	80076e0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8004fa0:	4803      	ldr	r0, [pc, #12]	@ (8004fb0 <RadioSetTxContinuousWave+0x60>)
 8004fa2:	f002 fabf 	bl	8007524 <UTIL_TIMER_Start>
}
 8004fa6:	bf00      	nop
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000324 	.word	0x20000324

08004fb4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8004fbe:	f001 fe56 	bl	8006c6e <SUBGRF_GetRssiInst>
 8004fc2:	4603      	mov	r3, r0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	460a      	mov	r2, r1
 8004fd6:	80fb      	strh	r3, [r7, #6]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8004fdc:	797a      	ldrb	r2, [r7, #5]
 8004fde:	88fb      	ldrh	r3, [r7, #6]
 8004fe0:	4611      	mov	r1, r2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f001 fed6 	bl	8006d94 <SUBGRF_WriteRegister>
}
 8004fe8:	bf00      	nop
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f001 feeb 	bl	8006dd8 <SUBGRF_ReadRegister>
 8005002:	4603      	mov	r3, r0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	4603      	mov	r3, r0
 8005014:	6039      	str	r1, [r7, #0]
 8005016:	80fb      	strh	r3, [r7, #6]
 8005018:	4613      	mov	r3, r2
 800501a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800501c:	797b      	ldrb	r3, [r7, #5]
 800501e:	b29a      	uxth	r2, r3
 8005020:	88fb      	ldrh	r3, [r7, #6]
 8005022:	6839      	ldr	r1, [r7, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f001 fef7 	bl	8006e18 <SUBGRF_WriteRegisters>
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	4603      	mov	r3, r0
 800503a:	6039      	str	r1, [r7, #0]
 800503c:	80fb      	strh	r3, [r7, #6]
 800503e:	4613      	mov	r3, r2
 8005040:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8005042:	797b      	ldrb	r3, [r7, #5]
 8005044:	b29a      	uxth	r2, r3
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	6839      	ldr	r1, [r7, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f001 ff06 	bl	8006e5c <SUBGRF_ReadRegisters>
}
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	4603      	mov	r3, r0
 8005060:	460a      	mov	r2, r1
 8005062:	71fb      	strb	r3, [r7, #7]
 8005064:	4613      	mov	r3, r2
 8005066:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8005068:	79fb      	ldrb	r3, [r7, #7]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d10a      	bne.n	8005084 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800506e:	4a0e      	ldr	r2, [pc, #56]	@ (80050a8 <RadioSetMaxPayloadLength+0x50>)
 8005070:	79bb      	ldrb	r3, [r7, #6]
 8005072:	7013      	strb	r3, [r2, #0]
 8005074:	4b0c      	ldr	r3, [pc, #48]	@ (80050a8 <RadioSetMaxPayloadLength+0x50>)
 8005076:	781a      	ldrb	r2, [r3, #0]
 8005078:	4b0c      	ldr	r3, [pc, #48]	@ (80050ac <RadioSetMaxPayloadLength+0x54>)
 800507a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800507c:	480c      	ldr	r0, [pc, #48]	@ (80050b0 <RadioSetMaxPayloadLength+0x58>)
 800507e:	f001 fd43 	bl	8006b08 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8005082:	e00d      	b.n	80050a0 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8005084:	4b09      	ldr	r3, [pc, #36]	@ (80050ac <RadioSetMaxPayloadLength+0x54>)
 8005086:	7d5b      	ldrb	r3, [r3, #21]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d109      	bne.n	80050a0 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800508c:	4a06      	ldr	r2, [pc, #24]	@ (80050a8 <RadioSetMaxPayloadLength+0x50>)
 800508e:	79bb      	ldrb	r3, [r7, #6]
 8005090:	7013      	strb	r3, [r2, #0]
 8005092:	4b05      	ldr	r3, [pc, #20]	@ (80050a8 <RadioSetMaxPayloadLength+0x50>)
 8005094:	781a      	ldrb	r2, [r3, #0]
 8005096:	4b05      	ldr	r3, [pc, #20]	@ (80050ac <RadioSetMaxPayloadLength+0x54>)
 8005098:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800509a:	4805      	ldr	r0, [pc, #20]	@ (80050b0 <RadioSetMaxPayloadLength+0x58>)
 800509c:	f001 fd34 	bl	8006b08 <SUBGRF_SetPacketParams>
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	20000009 	.word	0x20000009
 80050ac:	200002c8 	.word	0x200002c8
 80050b0:	200002d6 	.word	0x200002d6

080050b4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80050be:	4a13      	ldr	r2, [pc, #76]	@ (800510c <RadioSetPublicNetwork+0x58>)
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	7313      	strb	r3, [r2, #12]
 80050c4:	4b11      	ldr	r3, [pc, #68]	@ (800510c <RadioSetPublicNetwork+0x58>)
 80050c6:	7b1a      	ldrb	r2, [r3, #12]
 80050c8:	4b10      	ldr	r3, [pc, #64]	@ (800510c <RadioSetPublicNetwork+0x58>)
 80050ca:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80050cc:	2001      	movs	r0, #1
 80050ce:	f7ff f81b 	bl	8004108 <RadioSetModem>
    if( enable == true )
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80050d8:	2134      	movs	r1, #52	@ 0x34
 80050da:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80050de:	f001 fe59 	bl	8006d94 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80050e2:	2144      	movs	r1, #68	@ 0x44
 80050e4:	f240 7041 	movw	r0, #1857	@ 0x741
 80050e8:	f001 fe54 	bl	8006d94 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80050ec:	e009      	b.n	8005102 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80050ee:	2114      	movs	r1, #20
 80050f0:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80050f4:	f001 fe4e 	bl	8006d94 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80050f8:	2124      	movs	r1, #36	@ 0x24
 80050fa:	f240 7041 	movw	r0, #1857	@ 0x741
 80050fe:	f001 fe49 	bl	8006d94 <SUBGRF_WriteRegister>
}
 8005102:	bf00      	nop
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	200002c8 	.word	0x200002c8

08005110 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8005114:	f001 ffa8 	bl	8007068 <SUBGRF_GetRadioWakeUpTime>
 8005118:	4603      	mov	r3, r0
 800511a:	3303      	adds	r3, #3
}
 800511c:	4618      	mov	r0, r3
 800511e:	bd80      	pop	{r7, pc}

08005120 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8005128:	f000 f80e 	bl	8005148 <RadioOnTxTimeoutProcess>
}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800513c:	f000 f818 	bl	8005170 <RadioOnRxTimeoutProcess>
}
 8005140:	bf00      	nop
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800514c:	4b07      	ldr	r3, [pc, #28]	@ (800516c <RadioOnTxTimeoutProcess+0x24>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <RadioOnTxTimeoutProcess+0x1e>
 8005154:	4b05      	ldr	r3, [pc, #20]	@ (800516c <RadioOnTxTimeoutProcess+0x24>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800515e:	4b03      	ldr	r3, [pc, #12]	@ (800516c <RadioOnTxTimeoutProcess+0x24>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	4798      	blx	r3
    }
}
 8005166:	bf00      	nop
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	200002c4 	.word	0x200002c4

08005170 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005174:	4b07      	ldr	r3, [pc, #28]	@ (8005194 <RadioOnRxTimeoutProcess+0x24>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <RadioOnRxTimeoutProcess+0x1e>
 800517c:	4b05      	ldr	r3, [pc, #20]	@ (8005194 <RadioOnRxTimeoutProcess+0x24>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8005186:	4b03      	ldr	r3, [pc, #12]	@ (8005194 <RadioOnRxTimeoutProcess+0x24>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4798      	blx	r3
    }
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	200002c4 	.word	0x200002c4

08005198 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80051a2:	4a05      	ldr	r2, [pc, #20]	@ (80051b8 <RadioOnDioIrq+0x20>)
 80051a4:	88fb      	ldrh	r3, [r7, #6]
 80051a6:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80051aa:	f000 f807 	bl	80051bc <RadioIrqProcess>
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	200002c8 	.word	0x200002c8

080051bc <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80051bc:	b5b0      	push	{r4, r5, r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80051ca:	4ba5      	ldr	r3, [pc, #660]	@ (8005460 <RadioIrqProcess+0x2a4>)
 80051cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80051d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051d4:	f000 810d 	beq.w	80053f2 <RadioIrqProcess+0x236>
 80051d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051dc:	f300 81c0 	bgt.w	8005560 <RadioIrqProcess+0x3a4>
 80051e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051e4:	f000 80f1 	beq.w	80053ca <RadioIrqProcess+0x20e>
 80051e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ec:	f300 81b8 	bgt.w	8005560 <RadioIrqProcess+0x3a4>
 80051f0:	2b80      	cmp	r3, #128	@ 0x80
 80051f2:	f000 80d6 	beq.w	80053a2 <RadioIrqProcess+0x1e6>
 80051f6:	2b80      	cmp	r3, #128	@ 0x80
 80051f8:	f300 81b2 	bgt.w	8005560 <RadioIrqProcess+0x3a4>
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	dc49      	bgt.n	8005294 <RadioIrqProcess+0xd8>
 8005200:	2b00      	cmp	r3, #0
 8005202:	f340 81ad 	ble.w	8005560 <RadioIrqProcess+0x3a4>
 8005206:	3b01      	subs	r3, #1
 8005208:	2b1f      	cmp	r3, #31
 800520a:	f200 81a9 	bhi.w	8005560 <RadioIrqProcess+0x3a4>
 800520e:	a201      	add	r2, pc, #4	@ (adr r2, 8005214 <RadioIrqProcess+0x58>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	0800529d 	.word	0x0800529d
 8005218:	080052d7 	.word	0x080052d7
 800521c:	08005561 	.word	0x08005561
 8005220:	0800547d 	.word	0x0800547d
 8005224:	08005561 	.word	0x08005561
 8005228:	08005561 	.word	0x08005561
 800522c:	08005561 	.word	0x08005561
 8005230:	080054eb 	.word	0x080054eb
 8005234:	08005561 	.word	0x08005561
 8005238:	08005561 	.word	0x08005561
 800523c:	08005561 	.word	0x08005561
 8005240:	08005561 	.word	0x08005561
 8005244:	08005561 	.word	0x08005561
 8005248:	08005561 	.word	0x08005561
 800524c:	08005561 	.word	0x08005561
 8005250:	08005561 	.word	0x08005561
 8005254:	08005561 	.word	0x08005561
 8005258:	08005561 	.word	0x08005561
 800525c:	08005561 	.word	0x08005561
 8005260:	08005561 	.word	0x08005561
 8005264:	08005561 	.word	0x08005561
 8005268:	08005561 	.word	0x08005561
 800526c:	08005561 	.word	0x08005561
 8005270:	08005561 	.word	0x08005561
 8005274:	08005561 	.word	0x08005561
 8005278:	08005561 	.word	0x08005561
 800527c:	08005561 	.word	0x08005561
 8005280:	08005561 	.word	0x08005561
 8005284:	08005561 	.word	0x08005561
 8005288:	08005561 	.word	0x08005561
 800528c:	08005561 	.word	0x08005561
 8005290:	080054fb 	.word	0x080054fb
 8005294:	2b40      	cmp	r3, #64	@ 0x40
 8005296:	f000 814b 	beq.w	8005530 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 800529a:	e161      	b.n	8005560 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 800529c:	4871      	ldr	r0, [pc, #452]	@ (8005464 <RadioIrqProcess+0x2a8>)
 800529e:	f002 f9af 	bl	8007600 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80052a2:	2000      	movs	r0, #0
 80052a4:	f000 fff2 	bl	800628c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80052a8:	f001 ffe0 	bl	800726c <RFW_Is_LongPacketModeEnabled>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80052b2:	f002 f804 	bl	80072be <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80052b6:	4b6c      	ldr	r3, [pc, #432]	@ (8005468 <RadioIrqProcess+0x2ac>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 8152 	beq.w	8005564 <RadioIrqProcess+0x3a8>
 80052c0:	4b69      	ldr	r3, [pc, #420]	@ (8005468 <RadioIrqProcess+0x2ac>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 814c 	beq.w	8005564 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 80052cc:	4b66      	ldr	r3, [pc, #408]	@ (8005468 <RadioIrqProcess+0x2ac>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4798      	blx	r3
        break;
 80052d4:	e146      	b.n	8005564 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 80052d6:	4865      	ldr	r0, [pc, #404]	@ (800546c <RadioIrqProcess+0x2b0>)
 80052d8:	f002 f992 	bl	8007600 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80052dc:	4b60      	ldr	r3, [pc, #384]	@ (8005460 <RadioIrqProcess+0x2a4>)
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	f083 0301 	eor.w	r3, r3, #1
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d014      	beq.n	8005314 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80052ea:	2000      	movs	r0, #0
 80052ec:	f000 ffce 	bl	800628c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80052f0:	2100      	movs	r1, #0
 80052f2:	f640 1002 	movw	r0, #2306	@ 0x902
 80052f6:	f001 fd4d 	bl	8006d94 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80052fa:	f640 1044 	movw	r0, #2372	@ 0x944
 80052fe:	f001 fd6b 	bl	8006dd8 <SUBGRF_ReadRegister>
 8005302:	4603      	mov	r3, r0
 8005304:	f043 0302 	orr.w	r3, r3, #2
 8005308:	b2db      	uxtb	r3, r3
 800530a:	4619      	mov	r1, r3
 800530c:	f640 1044 	movw	r0, #2372	@ 0x944
 8005310:	f001 fd40 	bl	8006d94 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8005314:	1dfb      	adds	r3, r7, #7
 8005316:	22ff      	movs	r2, #255	@ 0xff
 8005318:	4619      	mov	r1, r3
 800531a:	4855      	ldr	r0, [pc, #340]	@ (8005470 <RadioIrqProcess+0x2b4>)
 800531c:	f000 fe84 	bl	8006028 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8005320:	4854      	ldr	r0, [pc, #336]	@ (8005474 <RadioIrqProcess+0x2b8>)
 8005322:	f001 fce5 	bl	8006cf0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8005326:	4b50      	ldr	r3, [pc, #320]	@ (8005468 <RadioIrqProcess+0x2ac>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 811c 	beq.w	8005568 <RadioIrqProcess+0x3ac>
 8005330:	4b4d      	ldr	r3, [pc, #308]	@ (8005468 <RadioIrqProcess+0x2ac>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 8116 	beq.w	8005568 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 800533c:	4b48      	ldr	r3, [pc, #288]	@ (8005460 <RadioIrqProcess+0x2a4>)
 800533e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005342:	2b01      	cmp	r3, #1
 8005344:	d10e      	bne.n	8005364 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8005346:	4b48      	ldr	r3, [pc, #288]	@ (8005468 <RadioIrqProcess+0x2ac>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689c      	ldr	r4, [r3, #8]
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	4619      	mov	r1, r3
 8005350:	4b43      	ldr	r3, [pc, #268]	@ (8005460 <RadioIrqProcess+0x2a4>)
 8005352:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8005356:	461a      	mov	r2, r3
 8005358:	4b41      	ldr	r3, [pc, #260]	@ (8005460 <RadioIrqProcess+0x2a4>)
 800535a:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 800535e:	4844      	ldr	r0, [pc, #272]	@ (8005470 <RadioIrqProcess+0x2b4>)
 8005360:	47a0      	blx	r4
                break;
 8005362:	e01d      	b.n	80053a0 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8005364:	4b3e      	ldr	r3, [pc, #248]	@ (8005460 <RadioIrqProcess+0x2a4>)
 8005366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005368:	463a      	mov	r2, r7
 800536a:	4611      	mov	r1, r2
 800536c:	4618      	mov	r0, r3
 800536e:	f001 fecb 	bl	8007108 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8005372:	4b3d      	ldr	r3, [pc, #244]	@ (8005468 <RadioIrqProcess+0x2ac>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689c      	ldr	r4, [r3, #8]
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	4619      	mov	r1, r3
 800537c:	4b38      	ldr	r3, [pc, #224]	@ (8005460 <RadioIrqProcess+0x2a4>)
 800537e:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8005382:	4618      	mov	r0, r3
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800538a:	4a3b      	ldr	r2, [pc, #236]	@ (8005478 <RadioIrqProcess+0x2bc>)
 800538c:	fb82 5203 	smull	r5, r2, r2, r3
 8005390:	1192      	asrs	r2, r2, #6
 8005392:	17db      	asrs	r3, r3, #31
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	b25b      	sxtb	r3, r3
 8005398:	4602      	mov	r2, r0
 800539a:	4835      	ldr	r0, [pc, #212]	@ (8005470 <RadioIrqProcess+0x2b4>)
 800539c:	47a0      	blx	r4
                break;
 800539e:	bf00      	nop
        break;
 80053a0:	e0e2      	b.n	8005568 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 80053a2:	2000      	movs	r0, #0
 80053a4:	f000 ff72 	bl	800628c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80053a8:	4b2f      	ldr	r3, [pc, #188]	@ (8005468 <RadioIrqProcess+0x2ac>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80dd 	beq.w	800556c <RadioIrqProcess+0x3b0>
 80053b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005468 <RadioIrqProcess+0x2ac>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 80d7 	beq.w	800556c <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 80053be:	4b2a      	ldr	r3, [pc, #168]	@ (8005468 <RadioIrqProcess+0x2ac>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2000      	movs	r0, #0
 80053c6:	4798      	blx	r3
        break;
 80053c8:	e0d0      	b.n	800556c <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 80053ca:	2000      	movs	r0, #0
 80053cc:	f000 ff5e 	bl	800628c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80053d0:	4b25      	ldr	r3, [pc, #148]	@ (8005468 <RadioIrqProcess+0x2ac>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80cb 	beq.w	8005570 <RadioIrqProcess+0x3b4>
 80053da:	4b23      	ldr	r3, [pc, #140]	@ (8005468 <RadioIrqProcess+0x2ac>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 80c5 	beq.w	8005570 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 80053e6:	4b20      	ldr	r3, [pc, #128]	@ (8005468 <RadioIrqProcess+0x2ac>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2001      	movs	r0, #1
 80053ee:	4798      	blx	r3
        break;
 80053f0:	e0be      	b.n	8005570 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80053f2:	f000 fdff 	bl	8005ff4 <SUBGRF_GetOperatingMode>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d115      	bne.n	8005428 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 80053fc:	4819      	ldr	r0, [pc, #100]	@ (8005464 <RadioIrqProcess+0x2a8>)
 80053fe:	f002 f8ff 	bl	8007600 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8005402:	2000      	movs	r0, #0
 8005404:	f000 ff42 	bl	800628c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8005408:	4b17      	ldr	r3, [pc, #92]	@ (8005468 <RadioIrqProcess+0x2ac>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80b1 	beq.w	8005574 <RadioIrqProcess+0x3b8>
 8005412:	4b15      	ldr	r3, [pc, #84]	@ (8005468 <RadioIrqProcess+0x2ac>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 80ab 	beq.w	8005574 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 800541e:	4b12      	ldr	r3, [pc, #72]	@ (8005468 <RadioIrqProcess+0x2ac>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	4798      	blx	r3
        break;
 8005426:	e0a5      	b.n	8005574 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8005428:	f000 fde4 	bl	8005ff4 <SUBGRF_GetOperatingMode>
 800542c:	4603      	mov	r3, r0
 800542e:	2b05      	cmp	r3, #5
 8005430:	f040 80a0 	bne.w	8005574 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8005434:	480d      	ldr	r0, [pc, #52]	@ (800546c <RadioIrqProcess+0x2b0>)
 8005436:	f002 f8e3 	bl	8007600 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800543a:	2000      	movs	r0, #0
 800543c:	f000 ff26 	bl	800628c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005440:	4b09      	ldr	r3, [pc, #36]	@ (8005468 <RadioIrqProcess+0x2ac>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8095 	beq.w	8005574 <RadioIrqProcess+0x3b8>
 800544a:	4b07      	ldr	r3, [pc, #28]	@ (8005468 <RadioIrqProcess+0x2ac>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 808f 	beq.w	8005574 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 8005456:	4b04      	ldr	r3, [pc, #16]	@ (8005468 <RadioIrqProcess+0x2ac>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4798      	blx	r3
        break;
 800545e:	e089      	b.n	8005574 <RadioIrqProcess+0x3b8>
 8005460:	200002c8 	.word	0x200002c8
 8005464:	20000324 	.word	0x20000324
 8005468:	200002c4 	.word	0x200002c4
 800546c:	2000033c 	.word	0x2000033c
 8005470:	200001c4 	.word	0x200001c4
 8005474:	200002ec 	.word	0x200002ec
 8005478:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800547c:	4b44      	ldr	r3, [pc, #272]	@ (8005590 <RadioIrqProcess+0x3d4>)
 800547e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005480:	2b00      	cmp	r3, #0
 8005482:	d079      	beq.n	8005578 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8005484:	4a43      	ldr	r2, [pc, #268]	@ (8005594 <RadioIrqProcess+0x3d8>)
 8005486:	4b42      	ldr	r3, [pc, #264]	@ (8005590 <RadioIrqProcess+0x3d4>)
 8005488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548a:	0c1b      	lsrs	r3, r3, #16
 800548c:	b2db      	uxtb	r3, r3
 800548e:	4619      	mov	r1, r3
 8005490:	f640 1003 	movw	r0, #2307	@ 0x903
 8005494:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8005496:	4a3f      	ldr	r2, [pc, #252]	@ (8005594 <RadioIrqProcess+0x3d8>)
 8005498:	4b3d      	ldr	r3, [pc, #244]	@ (8005590 <RadioIrqProcess+0x3d4>)
 800549a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549c:	0a1b      	lsrs	r3, r3, #8
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	4619      	mov	r1, r3
 80054a2:	f640 1004 	movw	r0, #2308	@ 0x904
 80054a6:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80054a8:	4a3a      	ldr	r2, [pc, #232]	@ (8005594 <RadioIrqProcess+0x3d8>)
 80054aa:	4b39      	ldr	r3, [pc, #228]	@ (8005590 <RadioIrqProcess+0x3d4>)
 80054ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	4619      	mov	r1, r3
 80054b2:	f640 1005 	movw	r0, #2309	@ 0x905
 80054b6:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80054b8:	4c36      	ldr	r4, [pc, #216]	@ (8005594 <RadioIrqProcess+0x3d8>)
 80054ba:	4b37      	ldr	r3, [pc, #220]	@ (8005598 <RadioIrqProcess+0x3dc>)
 80054bc:	f640 1002 	movw	r0, #2306	@ 0x902
 80054c0:	4798      	blx	r3
 80054c2:	4603      	mov	r3, r0
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	4619      	mov	r1, r3
 80054cc:	f640 1002 	movw	r0, #2306	@ 0x902
 80054d0:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80054d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005590 <RadioIrqProcess+0x3d4>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80054d8:	2300      	movs	r3, #0
 80054da:	2200      	movs	r2, #0
 80054dc:	f240 2162 	movw	r1, #610	@ 0x262
 80054e0:	f240 2062 	movw	r0, #610	@ 0x262
 80054e4:	f001 f8ac 	bl	8006640 <SUBGRF_SetDioIrqParams>
        break;
 80054e8:	e046      	b.n	8005578 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 80054ea:	f001 feb8 	bl	800725e <RFW_Is_Init>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d143      	bne.n	800557c <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 80054f4:	f001 fee9 	bl	80072ca <RFW_ReceivePayload>
        break;
 80054f8:	e040      	b.n	800557c <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 80054fa:	4828      	ldr	r0, [pc, #160]	@ (800559c <RadioIrqProcess+0x3e0>)
 80054fc:	f002 f880 	bl	8007600 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8005500:	4b23      	ldr	r3, [pc, #140]	@ (8005590 <RadioIrqProcess+0x3d4>)
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	f083 0301 	eor.w	r3, r3, #1
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800550e:	2000      	movs	r0, #0
 8005510:	f000 febc 	bl	800628c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005514:	4b22      	ldr	r3, [pc, #136]	@ (80055a0 <RadioIrqProcess+0x3e4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d031      	beq.n	8005580 <RadioIrqProcess+0x3c4>
 800551c:	4b20      	ldr	r3, [pc, #128]	@ (80055a0 <RadioIrqProcess+0x3e4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d02c      	beq.n	8005580 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 8005526:	4b1e      	ldr	r3, [pc, #120]	@ (80055a0 <RadioIrqProcess+0x3e4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	4798      	blx	r3
        break;
 800552e:	e027      	b.n	8005580 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8005530:	4b17      	ldr	r3, [pc, #92]	@ (8005590 <RadioIrqProcess+0x3d4>)
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	f083 0301 	eor.w	r3, r3, #1
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800553e:	2000      	movs	r0, #0
 8005540:	f000 fea4 	bl	800628c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8005544:	4b16      	ldr	r3, [pc, #88]	@ (80055a0 <RadioIrqProcess+0x3e4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01b      	beq.n	8005584 <RadioIrqProcess+0x3c8>
 800554c:	4b14      	ldr	r3, [pc, #80]	@ (80055a0 <RadioIrqProcess+0x3e4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d016      	beq.n	8005584 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 8005556:	4b12      	ldr	r3, [pc, #72]	@ (80055a0 <RadioIrqProcess+0x3e4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	4798      	blx	r3
        break;
 800555e:	e011      	b.n	8005584 <RadioIrqProcess+0x3c8>
        break;
 8005560:	bf00      	nop
 8005562:	e010      	b.n	8005586 <RadioIrqProcess+0x3ca>
        break;
 8005564:	bf00      	nop
 8005566:	e00e      	b.n	8005586 <RadioIrqProcess+0x3ca>
        break;
 8005568:	bf00      	nop
 800556a:	e00c      	b.n	8005586 <RadioIrqProcess+0x3ca>
        break;
 800556c:	bf00      	nop
 800556e:	e00a      	b.n	8005586 <RadioIrqProcess+0x3ca>
        break;
 8005570:	bf00      	nop
 8005572:	e008      	b.n	8005586 <RadioIrqProcess+0x3ca>
        break;
 8005574:	bf00      	nop
 8005576:	e006      	b.n	8005586 <RadioIrqProcess+0x3ca>
        break;
 8005578:	bf00      	nop
 800557a:	e004      	b.n	8005586 <RadioIrqProcess+0x3ca>
        break;
 800557c:	bf00      	nop
 800557e:	e002      	b.n	8005586 <RadioIrqProcess+0x3ca>
        break;
 8005580:	bf00      	nop
 8005582:	e000      	b.n	8005586 <RadioIrqProcess+0x3ca>
        break;
 8005584:	bf00      	nop
    }
}
 8005586:	bf00      	nop
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bdb0      	pop	{r4, r5, r7, pc}
 800558e:	bf00      	nop
 8005590:	200002c8 	.word	0x200002c8
 8005594:	08004fcd 	.word	0x08004fcd
 8005598:	08004ff1 	.word	0x08004ff1
 800559c:	2000033c 	.word	0x2000033c
 80055a0:	200002c4 	.word	0x200002c4

080055a4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80055a8:	4b09      	ldr	r3, [pc, #36]	@ (80055d0 <RadioTxPrbs+0x2c>)
 80055aa:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80055ae:	2101      	movs	r1, #1
 80055b0:	4618      	mov	r0, r3
 80055b2:	f001 fcfd 	bl	8006fb0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80055b6:	4b07      	ldr	r3, [pc, #28]	@ (80055d4 <RadioTxPrbs+0x30>)
 80055b8:	212d      	movs	r1, #45	@ 0x2d
 80055ba:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80055be:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80055c0:	f000 ff27 	bl	8006412 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80055c4:	4804      	ldr	r0, [pc, #16]	@ (80055d8 <RadioTxPrbs+0x34>)
 80055c6:	f000 fe7d 	bl	80062c4 <SUBGRF_SetTx>
}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	200002c8 	.word	0x200002c8
 80055d4:	08004fcd 	.word	0x08004fcd
 80055d8:	000fffff 	.word	0x000fffff

080055dc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80055e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 fd08 	bl	8007000 <SUBGRF_SetRfTxPower>
 80055f0:	4603      	mov	r3, r0
 80055f2:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80055f4:	210e      	movs	r1, #14
 80055f6:	f640 101f 	movw	r0, #2335	@ 0x91f
 80055fa:	f001 fbcb 	bl	8006d94 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	2101      	movs	r1, #1
 8005602:	4618      	mov	r0, r3
 8005604:	f001 fcd4 	bl	8006fb0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8005608:	f000 fefa 	bl	8006400 <SUBGRF_SetTxContinuousWave>
}
 800560c:	bf00      	nop
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8005614:	b480      	push	{r7}
 8005616:	b089      	sub	sp, #36	@ 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	4613      	mov	r3, r2
 8005620:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8005626:	2300      	movs	r3, #0
 8005628:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800562a:	2300      	movs	r3, #0
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	e011      	b.n	8005654 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	4413      	add	r3, r2
 8005636:	781a      	ldrb	r2, [r3, #0]
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	440b      	add	r3, r1
 800563e:	43d2      	mvns	r2, r2
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	2200      	movs	r2, #0
 800564c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	3301      	adds	r3, #1
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	429a      	cmp	r2, r3
 800565a:	dbe9      	blt.n	8005630 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800565c:	2300      	movs	r3, #0
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	e049      	b.n	80056f6 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	425a      	negs	r2, r3
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	f002 0207 	and.w	r2, r2, #7
 800566e:	bf58      	it	pl
 8005670:	4253      	negpl	r3, r2
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f1c3 0307 	rsb	r3, r3, #7
 8005678:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	da00      	bge.n	8005682 <payload_integration+0x6e>
 8005680:	3307      	adds	r3, #7
 8005682:	10db      	asrs	r3, r3, #3
 8005684:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	3301      	adds	r3, #1
 800568a:	425a      	negs	r2, r3
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	f002 0207 	and.w	r2, r2, #7
 8005694:	bf58      	it	pl
 8005696:	4253      	negpl	r3, r2
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f1c3 0307 	rsb	r3, r3, #7
 800569e:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	3301      	adds	r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	da00      	bge.n	80056aa <payload_integration+0x96>
 80056a8:	3307      	adds	r3, #7
 80056aa:	10db      	asrs	r3, r3, #3
 80056ac:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80056ae:	7dbb      	ldrb	r3, [r7, #22]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	4413      	add	r3, r2
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	7dfb      	ldrb	r3, [r7, #23]
 80056ba:	fa42 f303 	asr.w	r3, r2, r3
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80056c6:	7ffa      	ldrb	r2, [r7, #31]
 80056c8:	7cfb      	ldrb	r3, [r7, #19]
 80056ca:	4053      	eors	r3, r2
 80056cc:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80056ce:	7d3b      	ldrb	r3, [r7, #20]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	b25a      	sxtb	r2, r3
 80056d8:	7ff9      	ldrb	r1, [r7, #31]
 80056da:	7d7b      	ldrb	r3, [r7, #21]
 80056dc:	fa01 f303 	lsl.w	r3, r1, r3
 80056e0:	b25b      	sxtb	r3, r3
 80056e2:	4313      	orrs	r3, r2
 80056e4:	b259      	sxtb	r1, r3
 80056e6:	7d3b      	ldrb	r3, [r7, #20]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	b2ca      	uxtb	r2, r1
 80056ee:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	3301      	adds	r3, #1
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	dbb0      	blt.n	8005662 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8005700:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005704:	01db      	lsls	r3, r3, #7
 8005706:	b25a      	sxtb	r2, r3
 8005708:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800570c:	019b      	lsls	r3, r3, #6
 800570e:	b25b      	sxtb	r3, r3
 8005710:	4313      	orrs	r3, r2
 8005712:	b25b      	sxtb	r3, r3
 8005714:	7ffa      	ldrb	r2, [r7, #31]
 8005716:	2a00      	cmp	r2, #0
 8005718:	d101      	bne.n	800571e <payload_integration+0x10a>
 800571a:	2220      	movs	r2, #32
 800571c:	e000      	b.n	8005720 <payload_integration+0x10c>
 800571e:	2200      	movs	r2, #0
 8005720:	4313      	orrs	r3, r2
 8005722:	b259      	sxtb	r1, r3
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	b2ca      	uxtb	r2, r1
 800572c:	701a      	strb	r2, [r3, #0]
}
 800572e:	bf00      	nop
 8005730:	3724      	adds	r7, #36	@ 0x24
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr

08005738 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08c      	sub	sp, #48	@ 0x30
 800573c:	af00      	add	r7, sp, #0
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	4603      	mov	r3, r0
 8005746:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 800574c:	f107 0320 	add.w	r3, r7, #32
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8005756:	f001 fd7c 	bl	8007252 <RFW_DeInit>

    if( rxContinuous != 0 )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	bf14      	ite	ne
 800576a:	2301      	movne	r3, #1
 800576c:	2300      	moveq	r3, #0
 800576e:	b2da      	uxtb	r2, r3
 8005770:	4ba3      	ldr	r3, [pc, #652]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 8005772:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <RadioSetRxGenericConfig+0x4a>
 800577a:	2b01      	cmp	r3, #1
 800577c:	f000 80dc 	beq.w	8005938 <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8005780:	e195      	b.n	8005aae <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <RadioSetRxGenericConfig+0x5a>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d102      	bne.n	8005798 <RadioSetRxGenericConfig+0x60>
            return -1;
 8005792:	f04f 33ff 	mov.w	r3, #4294967295
 8005796:	e18b      	b.n	8005ab0 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	7f9b      	ldrb	r3, [r3, #30]
 800579c:	2b08      	cmp	r3, #8
 800579e:	d902      	bls.n	80057a6 <RadioSetRxGenericConfig+0x6e>
            return -1;
 80057a0:	f04f 33ff 	mov.w	r3, #4294967295
 80057a4:	e184      	b.n	8005ab0 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6919      	ldr	r1, [r3, #16]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	7f9b      	ldrb	r3, [r3, #30]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f107 0320 	add.w	r3, r7, #32
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 fe45 	bl	8007444 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	bf14      	ite	ne
 80057c2:	2301      	movne	r3, #1
 80057c4:	2300      	moveq	r3, #0
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fe2b 	bl	8006424 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80057ce:	4b8c      	ldr	r3, [pc, #560]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	4a89      	ldr	r2, [pc, #548]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80057dc:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80057e4:	4b86      	ldr	r3, [pc, #536]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80057e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 fc62 	bl	80070b8 <SUBGRF_GetFskBandwidthRegValue>
 80057f4:	4603      	mov	r3, r0
 80057f6:	461a      	mov	r2, r3
 80057f8:	4b81      	ldr	r3, [pc, #516]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80057fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80057fe:	4b80      	ldr	r3, [pc, #512]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 8005800:	2200      	movs	r2, #0
 8005802:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	b29b      	uxth	r3, r3
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	b29a      	uxth	r2, r3
 800580e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 8005810:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	7fda      	ldrb	r2, [r3, #31]
 8005816:	4b7a      	ldr	r3, [pc, #488]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 8005818:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	7f9b      	ldrb	r3, [r3, #30]
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	b2da      	uxtb	r2, r3
 8005822:	4b77      	ldr	r3, [pc, #476]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 8005824:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800582c:	4b74      	ldr	r3, [pc, #464]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 800582e:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005836:	2b00      	cmp	r3, #0
 8005838:	d105      	bne.n	8005846 <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	b2da      	uxtb	r2, r3
 8005840:	4b6f      	ldr	r3, [pc, #444]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 8005842:	759a      	strb	r2, [r3, #22]
 8005844:	e00b      	b.n	800585e <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800584c:	2b02      	cmp	r3, #2
 800584e:	d103      	bne.n	8005858 <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8005850:	4b6b      	ldr	r3, [pc, #428]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 8005852:	22ff      	movs	r2, #255	@ 0xff
 8005854:	759a      	strb	r2, [r3, #22]
 8005856:	e002      	b.n	800585e <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8005858:	4b69      	ldr	r3, [pc, #420]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 800585a:	22ff      	movs	r2, #255	@ 0xff
 800585c:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005864:	2b02      	cmp	r3, #2
 8005866:	d004      	beq.n	8005872 <RadioSetRxGenericConfig+0x13a>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800586e:	2b02      	cmp	r3, #2
 8005870:	d12d      	bne.n	80058ce <RadioSetRxGenericConfig+0x196>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005878:	2bf1      	cmp	r3, #241	@ 0xf1
 800587a:	d00c      	beq.n	8005896 <RadioSetRxGenericConfig+0x15e>
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005882:	2bf2      	cmp	r3, #242	@ 0xf2
 8005884:	d007      	beq.n	8005896 <RadioSetRxGenericConfig+0x15e>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800588c:	2b01      	cmp	r3, #1
 800588e:	d002      	beq.n	8005896 <RadioSetRxGenericConfig+0x15e>
                return -1;
 8005890:	f04f 33ff 	mov.w	r3, #4294967295
 8005894:	e10c      	b.n	8005ab0 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 8005896:	2300      	movs	r3, #0
 8005898:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800589e:	4b59      	ldr	r3, [pc, #356]	@ (8005a04 <RadioSetRxGenericConfig+0x2cc>)
 80058a0:	6819      	ldr	r1, [r3, #0]
 80058a2:	f107 0314 	add.w	r3, r7, #20
 80058a6:	4a58      	ldr	r2, [pc, #352]	@ (8005a08 <RadioSetRxGenericConfig+0x2d0>)
 80058a8:	4618      	mov	r0, r3
 80058aa:	f001 fcc5 	bl	8007238 <RFW_Init>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <RadioSetRxGenericConfig+0x182>
                return -1;
 80058b4:	f04f 33ff 	mov.w	r3, #4294967295
 80058b8:	e0fa      	b.n	8005ab0 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80058ba:	4b51      	ldr	r3, [pc, #324]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80058bc:	2200      	movs	r2, #0
 80058be:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80058c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80058c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	755a      	strb	r2, [r3, #21]
        {
 80058cc:	e00e      	b.n	80058ec <RadioSetRxGenericConfig+0x1b4>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80058d4:	4b4a      	ldr	r3, [pc, #296]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80058d6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80058de:	4b48      	ldr	r3, [pc, #288]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80058e0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80058e8:	4b45      	ldr	r3, [pc, #276]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80058ea:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80058ec:	f7ff fa6d 	bl	8004dca <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80058f0:	2000      	movs	r0, #0
 80058f2:	f7fe fc09 	bl	8004108 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80058f6:	4845      	ldr	r0, [pc, #276]	@ (8005a0c <RadioSetRxGenericConfig+0x2d4>)
 80058f8:	f001 f838 	bl	800696c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80058fc:	4844      	ldr	r0, [pc, #272]	@ (8005a10 <RadioSetRxGenericConfig+0x2d8>)
 80058fe:	f001 f903 	bl	8006b08 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8005902:	f107 0320 	add.w	r3, r7, #32
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fbc3 	bl	8006092 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	8b9b      	ldrh	r3, [r3, #28]
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fc0d 	bl	8006130 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	8b1b      	ldrh	r3, [r3, #24]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fbe8 	bl	80060f0 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8005926:	fb03 f202 	mul.w	r2, r3, r2
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005932:	4a33      	ldr	r2, [pc, #204]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 8005934:	6093      	str	r3, [r2, #8]
        break;
 8005936:	e0ba      	b.n	8005aae <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800593c:	2b00      	cmp	r3, #0
 800593e:	d102      	bne.n	8005946 <RadioSetRxGenericConfig+0x20e>
            return -1;
 8005940:	f04f 33ff 	mov.w	r3, #4294967295
 8005944:	e0b4      	b.n	8005ab0 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800594c:	2b01      	cmp	r3, #1
 800594e:	d105      	bne.n	800595c <RadioSetRxGenericConfig+0x224>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005956:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800595a:	e002      	b.n	8005962 <RadioSetRxGenericConfig+0x22a>
            MaxPayloadLength = 0xFF;
 800595c:	23ff      	movs	r3, #255	@ 0xff
 800595e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005966:	2b00      	cmp	r3, #0
 8005968:	bf14      	ite	ne
 800596a:	2301      	movne	r3, #1
 800596c:	2300      	moveq	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fd57 	bl	8006424 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	b2db      	uxtb	r3, r3
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fd61 	bl	8006442 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005980:	4b1f      	ldr	r3, [pc, #124]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800598e:	4b1c      	ldr	r3, [pc, #112]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 8005990:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800599a:	4b19      	ldr	r3, [pc, #100]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 800599c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80059a6:	4b16      	ldr	r3, [pc, #88]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80059a8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d010      	beq.n	80059d8 <RadioSetRxGenericConfig+0x2a0>
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	dc2c      	bgt.n	8005a14 <RadioSetRxGenericConfig+0x2dc>
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <RadioSetRxGenericConfig+0x28c>
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d005      	beq.n	80059ce <RadioSetRxGenericConfig+0x296>
            break;
 80059c2:	e027      	b.n	8005a14 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80059c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80059cc:	e023      	b.n	8005a16 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80059ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80059d6:	e01e      	b.n	8005a16 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80059de:	2b0b      	cmp	r3, #11
 80059e0:	d004      	beq.n	80059ec <RadioSetRxGenericConfig+0x2b4>
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80059e8:	2b0c      	cmp	r3, #12
 80059ea:	d104      	bne.n	80059f6 <RadioSetRxGenericConfig+0x2be>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80059ec:	4b04      	ldr	r3, [pc, #16]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80059f4:	e00f      	b.n	8005a16 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80059f6:	4b02      	ldr	r3, [pc, #8]	@ (8005a00 <RadioSetRxGenericConfig+0x2c8>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80059fe:	e00a      	b.n	8005a16 <RadioSetRxGenericConfig+0x2de>
 8005a00:	200002c8 	.word	0x200002c8
 8005a04:	200002c4 	.word	0x200002c4
 8005a08:	2000033c 	.word	0x2000033c
 8005a0c:	20000300 	.word	0x20000300
 8005a10:	200002d6 	.word	0x200002d6
            break;
 8005a14:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005a16:	4b28      	ldr	r3, [pc, #160]	@ (8005ab8 <RadioSetRxGenericConfig+0x380>)
 8005a18:	2201      	movs	r2, #1
 8005a1a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8005a20:	4b25      	ldr	r3, [pc, #148]	@ (8005ab8 <RadioSetRxGenericConfig+0x380>)
 8005a22:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8005a2a:	4b23      	ldr	r3, [pc, #140]	@ (8005ab8 <RadioSetRxGenericConfig+0x380>)
 8005a2c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005a2e:	4a22      	ldr	r2, [pc, #136]	@ (8005ab8 <RadioSetRxGenericConfig+0x380>)
 8005a30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a34:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8005a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ab8 <RadioSetRxGenericConfig+0x380>)
 8005a3e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8005a48:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab8 <RadioSetRxGenericConfig+0x380>)
 8005a4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8005a4e:	f7ff f9bc 	bl	8004dca <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8005a52:	2001      	movs	r0, #1
 8005a54:	f7fe fb58 	bl	8004108 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005a58:	4818      	ldr	r0, [pc, #96]	@ (8005abc <RadioSetRxGenericConfig+0x384>)
 8005a5a:	f000 ff87 	bl	800696c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005a5e:	4818      	ldr	r0, [pc, #96]	@ (8005ac0 <RadioSetRxGenericConfig+0x388>)
 8005a60:	f001 f852 	bl	8006b08 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8005a64:	4b14      	ldr	r3, [pc, #80]	@ (8005ab8 <RadioSetRxGenericConfig+0x380>)
 8005a66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d10d      	bne.n	8005a8a <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8005a6e:	f240 7036 	movw	r0, #1846	@ 0x736
 8005a72:	f001 f9b1 	bl	8006dd8 <SUBGRF_ReadRegister>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f023 0304 	bic.w	r3, r3, #4
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	4619      	mov	r1, r3
 8005a80:	f240 7036 	movw	r0, #1846	@ 0x736
 8005a84:	f001 f986 	bl	8006d94 <SUBGRF_WriteRegister>
 8005a88:	e00c      	b.n	8005aa4 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8005a8a:	f240 7036 	movw	r0, #1846	@ 0x736
 8005a8e:	f001 f9a3 	bl	8006dd8 <SUBGRF_ReadRegister>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f043 0304 	orr.w	r3, r3, #4
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	f240 7036 	movw	r0, #1846	@ 0x736
 8005aa0:	f001 f978 	bl	8006d94 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8005aa4:	4b04      	ldr	r3, [pc, #16]	@ (8005ab8 <RadioSetRxGenericConfig+0x380>)
 8005aa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005aaa:	609a      	str	r2, [r3, #8]
        break;
 8005aac:	bf00      	nop
    }
    return status;
 8005aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3730      	adds	r7, #48	@ 0x30
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	200002c8 	.word	0x200002c8
 8005abc:	20000300 	.word	0x20000300
 8005ac0:	200002d6 	.word	0x200002d6

08005ac4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08e      	sub	sp, #56	@ 0x38
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	607b      	str	r3, [r7, #4]
 8005ace:	4603      	mov	r3, r0
 8005ad0:	73fb      	strb	r3, [r7, #15]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8005ad6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8005ae0:	f001 fbb7 	bl	8007252 <RFW_DeInit>
    switch( modem )
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	f200 8205 	bhi.w	8005ef6 <RadioSetTxGenericConfig+0x432>
 8005aec:	a201      	add	r2, pc, #4	@ (adr r2, 8005af4 <RadioSetTxGenericConfig+0x30>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005c79 	.word	0x08005c79
 8005af8:	08005dc1 	.word	0x08005dc1
 8005afc:	08005eb9 	.word	0x08005eb9
 8005b00:	08005b05 	.word	0x08005b05
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	7c9b      	ldrb	r3, [r3, #18]
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d902      	bls.n	8005b12 <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 8005b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b10:	e206      	b.n	8005f20 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	6899      	ldr	r1, [r3, #8]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	7c9b      	ldrb	r3, [r3, #18]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 fc8f 	bl	8007444 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d102      	bne.n	8005b34 <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 8005b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b32:	e1f5      	b.n	8005f20 <RadioSetTxGenericConfig+0x45c>
        }
        else if( config->msk.BitRate <= 10000 )
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d813      	bhi.n	8005b68 <RadioSetTxGenericConfig+0xa4>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8005b40:	2302      	movs	r3, #2
 8005b42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8005b46:	4b99      	ldr	r3, [pc, #612]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005b48:	2203      	movs	r2, #3
 8005b4a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8005b4c:	4b97      	ldr	r3, [pc, #604]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005b4e:	2203      	movs	r2, #3
 8005b50:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a94      	ldr	r2, [pc, #592]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005b5a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	7cda      	ldrb	r2, [r3, #19]
 8005b60:	4b92      	ldr	r3, [pc, #584]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005b62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b66:	e017      	b.n	8005b98 <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005b6e:	4b8f      	ldr	r3, [pc, #572]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005b74:	4b8d      	ldr	r3, [pc, #564]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a8a      	ldr	r2, [pc, #552]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005b82:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	7cda      	ldrb	r2, [r3, #19]
 8005b88:	4b88      	ldr	r3, [pc, #544]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005b8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	089b      	lsrs	r3, r3, #2
 8005b94:	4a85      	ldr	r2, [pc, #532]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005b96:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	4b82      	ldr	r3, [pc, #520]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005ba4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8005ba6:	4b81      	ldr	r3, [pc, #516]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005ba8:	2204      	movs	r2, #4
 8005baa:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	7c9b      	ldrb	r3, [r3, #18]
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	4b7d      	ldr	r3, [pc, #500]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005bb6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8005bb8:	4b7c      	ldr	r3, [pc, #496]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	7d9b      	ldrb	r3, [r3, #22]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d003      	beq.n	8005bce <RadioSetTxGenericConfig+0x10a>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	7d1b      	ldrb	r3, [r3, #20]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d12b      	bne.n	8005c26 <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	7d5b      	ldrb	r3, [r3, #21]
 8005bd2:	2bf1      	cmp	r3, #241	@ 0xf1
 8005bd4:	d00a      	beq.n	8005bec <RadioSetTxGenericConfig+0x128>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	7d5b      	ldrb	r3, [r3, #21]
 8005bda:	2bf2      	cmp	r3, #242	@ 0xf2
 8005bdc:	d006      	beq.n	8005bec <RadioSetTxGenericConfig+0x128>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	7d5b      	ldrb	r3, [r3, #21]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d002      	beq.n	8005bec <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 8005be6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bea:	e199      	b.n	8005f20 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8005bf6:	4b6e      	ldr	r3, [pc, #440]	@ (8005db0 <RadioSetTxGenericConfig+0x2ec>)
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	f107 0320 	add.w	r3, r7, #32
 8005bfe:	4a6d      	ldr	r2, [pc, #436]	@ (8005db4 <RadioSetTxGenericConfig+0x2f0>)
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 fb19 	bl	8007238 <RFW_Init>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <RadioSetTxGenericConfig+0x14e>
            {
                return -1;
 8005c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c10:	e186      	b.n	8005f20 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8005c12:	4b66      	ldr	r3, [pc, #408]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8005c18:	4b64      	ldr	r3, [pc, #400]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8005c1e:	4b63      	ldr	r3, [pc, #396]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	755a      	strb	r2, [r3, #21]
        {
 8005c24:	e00b      	b.n	8005c3e <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	7d5a      	ldrb	r2, [r3, #21]
 8005c2a:	4b60      	ldr	r3, [pc, #384]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005c2c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	7d9a      	ldrb	r2, [r3, #22]
 8005c32:	4b5e      	ldr	r3, [pc, #376]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005c34:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	7d1a      	ldrb	r2, [r3, #20]
 8005c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005c3c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8005c3e:	f7ff f8c4 	bl	8004dca <RadioStandby>
        RadioSetModem( radio_modem );
 8005c42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fe fa5e 	bl	8004108 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005c4c:	485a      	ldr	r0, [pc, #360]	@ (8005db8 <RadioSetTxGenericConfig+0x2f4>)
 8005c4e:	f000 fe8d 	bl	800696c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005c52:	485a      	ldr	r0, [pc, #360]	@ (8005dbc <RadioSetTxGenericConfig+0x2f8>)
 8005c54:	f000 ff58 	bl	8006b08 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8005c58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fa18 	bl	8006092 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	8a1b      	ldrh	r3, [r3, #16]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fa62 	bl	8006130 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	899b      	ldrh	r3, [r3, #12]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fa3d 	bl	80060f0 <SUBGRF_SetCrcPolynomial>
        break;
 8005c76:	e13f      	b.n	8005ef8 <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d102      	bne.n	8005c86 <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 8005c80:	f04f 33ff 	mov.w	r3, #4294967295
 8005c84:	e14c      	b.n	8005f20 <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	7c9b      	ldrb	r3, [r3, #18]
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d902      	bls.n	8005c94 <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c92:	e145      	b.n	8005f20 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	6899      	ldr	r1, [r3, #8]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	7c9b      	ldrb	r3, [r3, #18]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 fbce 	bl	8007444 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005ca8:	4b40      	ldr	r3, [pc, #256]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a3d      	ldr	r2, [pc, #244]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005cb6:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	7cda      	ldrb	r2, [r3, #19]
 8005cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005cbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	4a39      	ldr	r2, [pc, #228]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005cc8:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005cca:	4b38      	ldr	r3, [pc, #224]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	4b34      	ldr	r3, [pc, #208]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005cdc:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8005cde:	4b33      	ldr	r3, [pc, #204]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005ce0:	2204      	movs	r2, #4
 8005ce2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	7c9b      	ldrb	r3, [r3, #18]
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	4b2f      	ldr	r3, [pc, #188]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005cee:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8005cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	7d9b      	ldrb	r3, [r3, #22]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d003      	beq.n	8005d06 <RadioSetTxGenericConfig+0x242>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	7d1b      	ldrb	r3, [r3, #20]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d12a      	bne.n	8005d5c <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	7d5b      	ldrb	r3, [r3, #21]
 8005d0a:	2bf1      	cmp	r3, #241	@ 0xf1
 8005d0c:	d00a      	beq.n	8005d24 <RadioSetTxGenericConfig+0x260>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	7d5b      	ldrb	r3, [r3, #21]
 8005d12:	2bf2      	cmp	r3, #242	@ 0xf2
 8005d14:	d006      	beq.n	8005d24 <RadioSetTxGenericConfig+0x260>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	7d5b      	ldrb	r3, [r3, #21]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d002      	beq.n	8005d24 <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 8005d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d22:	e0fd      	b.n	8005f20 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8005d24:	2301      	movs	r3, #1
 8005d26:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8005d2c:	4b20      	ldr	r3, [pc, #128]	@ (8005db0 <RadioSetTxGenericConfig+0x2ec>)
 8005d2e:	6819      	ldr	r1, [r3, #0]
 8005d30:	f107 0314 	add.w	r3, r7, #20
 8005d34:	4a1f      	ldr	r2, [pc, #124]	@ (8005db4 <RadioSetTxGenericConfig+0x2f0>)
 8005d36:	4618      	mov	r0, r3
 8005d38:	f001 fa7e 	bl	8007238 <RFW_Init>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <RadioSetTxGenericConfig+0x284>
            {
                return -1;
 8005d42:	f04f 33ff 	mov.w	r3, #4294967295
 8005d46:	e0eb      	b.n	8005f20 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8005d48:	4b18      	ldr	r3, [pc, #96]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8005d4e:	4b17      	ldr	r3, [pc, #92]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8005d54:	4b15      	ldr	r3, [pc, #84]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	755a      	strb	r2, [r3, #21]
        {
 8005d5a:	e00b      	b.n	8005d74 <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	7d5a      	ldrb	r2, [r3, #21]
 8005d60:	4b12      	ldr	r3, [pc, #72]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005d62:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	7d9a      	ldrb	r2, [r3, #22]
 8005d68:	4b10      	ldr	r3, [pc, #64]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005d6a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	7d1a      	ldrb	r2, [r3, #20]
 8005d70:	4b0e      	ldr	r3, [pc, #56]	@ (8005dac <RadioSetTxGenericConfig+0x2e8>)
 8005d72:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8005d74:	f7ff f829 	bl	8004dca <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f7fe f9c5 	bl	8004108 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005d7e:	480e      	ldr	r0, [pc, #56]	@ (8005db8 <RadioSetTxGenericConfig+0x2f4>)
 8005d80:	f000 fdf4 	bl	800696c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d84:	480d      	ldr	r0, [pc, #52]	@ (8005dbc <RadioSetTxGenericConfig+0x2f8>)
 8005d86:	f000 febf 	bl	8006b08 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8005d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 f97f 	bl	8006092 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	8a1b      	ldrh	r3, [r3, #16]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 f9c9 	bl	8006130 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	899b      	ldrh	r3, [r3, #12]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 f9a4 	bl	80060f0 <SUBGRF_SetCrcPolynomial>
        break;
 8005da8:	e0a6      	b.n	8005ef8 <RadioSetTxGenericConfig+0x434>
 8005daa:	bf00      	nop
 8005dac:	200002c8 	.word	0x200002c8
 8005db0:	200002c4 	.word	0x200002c4
 8005db4:	20000324 	.word	0x20000324
 8005db8:	20000300 	.word	0x20000300
 8005dbc:	200002d6 	.word	0x200002d6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005dc0:	4b59      	ldr	r3, [pc, #356]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	781a      	ldrb	r2, [r3, #0]
 8005dcc:	4b56      	ldr	r3, [pc, #344]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	785a      	ldrb	r2, [r3, #1]
 8005dd6:	4b54      	ldr	r3, [pc, #336]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005dd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	789a      	ldrb	r2, [r3, #2]
 8005de0:	4b51      	ldr	r3, [pc, #324]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005de2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	78db      	ldrb	r3, [r3, #3]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d010      	beq.n	8005e10 <RadioSetTxGenericConfig+0x34c>
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	dc20      	bgt.n	8005e34 <RadioSetTxGenericConfig+0x370>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <RadioSetTxGenericConfig+0x338>
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d005      	beq.n	8005e06 <RadioSetTxGenericConfig+0x342>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8005dfa:	e01b      	b.n	8005e34 <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8005dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8005e04:	e017      	b.n	8005e36 <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8005e06:	4b48      	ldr	r3, [pc, #288]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8005e0e:	e012      	b.n	8005e36 <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b0b      	cmp	r3, #11
 8005e16:	d003      	beq.n	8005e20 <RadioSetTxGenericConfig+0x35c>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b0c      	cmp	r3, #12
 8005e1e:	d104      	bne.n	8005e2a <RadioSetTxGenericConfig+0x366>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8005e20:	4b41      	ldr	r3, [pc, #260]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8005e28:	e005      	b.n	8005e36 <RadioSetTxGenericConfig+0x372>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8005e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8005e32:	e000      	b.n	8005e36 <RadioSetTxGenericConfig+0x372>
            break;
 8005e34:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005e36:	4b3c      	ldr	r3, [pc, #240]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005e38:	2201      	movs	r2, #1
 8005e3a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	889a      	ldrh	r2, [r3, #4]
 8005e40:	4b39      	ldr	r3, [pc, #228]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005e42:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	799a      	ldrb	r2, [r3, #6]
 8005e48:	4b37      	ldr	r3, [pc, #220]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005e4a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	79da      	ldrb	r2, [r3, #7]
 8005e50:	4b35      	ldr	r3, [pc, #212]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005e52:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	7a1a      	ldrb	r2, [r3, #8]
 8005e5a:	4b33      	ldr	r3, [pc, #204]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005e5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8005e60:	f7fe ffb3 	bl	8004dca <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8005e64:	2001      	movs	r0, #1
 8005e66:	f7fe f94f 	bl	8004108 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005e6a:	4830      	ldr	r0, [pc, #192]	@ (8005f2c <RadioSetTxGenericConfig+0x468>)
 8005e6c:	f000 fd7e 	bl	800696c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005e70:	482f      	ldr	r0, [pc, #188]	@ (8005f30 <RadioSetTxGenericConfig+0x46c>)
 8005e72:	f000 fe49 	bl	8006b08 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8005e76:	4b2c      	ldr	r3, [pc, #176]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005e78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e7c:	2b06      	cmp	r3, #6
 8005e7e:	d10d      	bne.n	8005e9c <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8005e80:	f640 0089 	movw	r0, #2185	@ 0x889
 8005e84:	f000 ffa8 	bl	8006dd8 <SUBGRF_ReadRegister>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f023 0304 	bic.w	r3, r3, #4
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	4619      	mov	r1, r3
 8005e92:	f640 0089 	movw	r0, #2185	@ 0x889
 8005e96:	f000 ff7d 	bl	8006d94 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8005e9a:	e02d      	b.n	8005ef8 <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8005e9c:	f640 0089 	movw	r0, #2185	@ 0x889
 8005ea0:	f000 ff9a 	bl	8006dd8 <SUBGRF_ReadRegister>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	f043 0304 	orr.w	r3, r3, #4
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	4619      	mov	r1, r3
 8005eae:	f640 0089 	movw	r0, #2185	@ 0x889
 8005eb2:	f000 ff6f 	bl	8006d94 <SUBGRF_WriteRegister>
        break;
 8005eb6:	e01f      	b.n	8005ef8 <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d004      	beq.n	8005eca <RadioSetTxGenericConfig+0x406>
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ec8:	d902      	bls.n	8005ed0 <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 8005eca:	f04f 33ff 	mov.w	r3, #4294967295
 8005ece:	e027      	b.n	8005f20 <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 8005ed0:	2003      	movs	r0, #3
 8005ed2:	f7fe f919 	bl	8004108 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8005ed6:	4b14      	ldr	r3, [pc, #80]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a11      	ldr	r2, [pc, #68]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005ee4:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8005ee6:	4b10      	ldr	r3, [pc, #64]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005ee8:	2216      	movs	r2, #22
 8005eea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005eee:	480f      	ldr	r0, [pc, #60]	@ (8005f2c <RadioSetTxGenericConfig+0x468>)
 8005ef0:	f000 fd3c 	bl	800696c <SUBGRF_SetModulationParams>
        break;
 8005ef4:	e000      	b.n	8005ef8 <RadioSetTxGenericConfig+0x434>
    default:
        break;
 8005ef6:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8005ef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 f87f 	bl	8007000 <SUBGRF_SetRfTxPower>
 8005f02:	4603      	mov	r3, r0
 8005f04:	461a      	mov	r2, r3
 8005f06:	4b08      	ldr	r3, [pc, #32]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005f08:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8005f0c:	4b06      	ldr	r3, [pc, #24]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005f0e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 f9b1 	bl	800727a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8005f18:	4a03      	ldr	r2, [pc, #12]	@ (8005f28 <RadioSetTxGenericConfig+0x464>)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6053      	str	r3, [r2, #4]
    return 0;
 8005f1e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3738      	adds	r7, #56	@ 0x38
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	200002c8 	.word	0x200002c8
 8005f2c:	20000300 	.word	0x20000300
 8005f30:	200002d6 	.word	0x200002d6

08005f34 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr

08005f4c <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8005f56:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr
	...

08005f64 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8005f72:	4a1d      	ldr	r2, [pc, #116]	@ (8005fe8 <SUBGRF_Init+0x84>)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8005f78:	f7fa fb94 	bl	80006a4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8005f7c:	2002      	movs	r0, #2
 8005f7e:	f001 f87a 	bl	8007076 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8005f82:	4b1a      	ldr	r3, [pc, #104]	@ (8005fec <SUBGRF_Init+0x88>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8005f88:	2000      	movs	r0, #0
 8005f8a:	f000 f97f 	bl	800628c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8005f8e:	f001 fa2e 	bl	80073ee <RBI_IsTCXO>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d10e      	bne.n	8005fb6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8005f98:	2140      	movs	r1, #64	@ 0x40
 8005f9a:	2001      	movs	r0, #1
 8005f9c:	f000 fb8a 	bl	80066b4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	f640 1011 	movw	r0, #2321	@ 0x911
 8005fa6:	f000 fef5 	bl	8006d94 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8005faa:	237f      	movs	r3, #127	@ 0x7f
 8005fac:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8005fae:	7b38      	ldrb	r0, [r7, #12]
 8005fb0:	f000 fa8d 	bl	80064ce <SUBGRF_Calibrate>
 8005fb4:	e009      	b.n	8005fca <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8005fb6:	2120      	movs	r1, #32
 8005fb8:	f640 1011 	movw	r0, #2321	@ 0x911
 8005fbc:	f000 feea 	bl	8006d94 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8005fc0:	2120      	movs	r1, #32
 8005fc2:	f640 1012 	movw	r0, #2322	@ 0x912
 8005fc6:	f000 fee5 	bl	8006d94 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8005fca:	210e      	movs	r1, #14
 8005fcc:	f640 101f 	movw	r0, #2335	@ 0x91f
 8005fd0:	f000 fee0 	bl	8006d94 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8005fd4:	f001 f9e8 	bl	80073a8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8005fd8:	4b05      	ldr	r3, [pc, #20]	@ (8005ff0 <SUBGRF_Init+0x8c>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
}
 8005fde:	bf00      	nop
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000360 	.word	0x20000360
 8005fec:	2000035c 	.word	0x2000035c
 8005ff0:	20000354 	.word	0x20000354

08005ff4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
    return OperatingMode;
 8005ff8:	4b02      	ldr	r3, [pc, #8]	@ (8006004 <SUBGRF_GetOperatingMode+0x10>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr
 8006004:	20000354 	.word	0x20000354

08006008 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	460b      	mov	r3, r1
 8006012:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	461a      	mov	r2, r3
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	2000      	movs	r0, #0
 800601c:	f000 ff40 	bl	8006ea0 <SUBGRF_WriteBuffer>
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	4613      	mov	r3, r2
 8006034:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800603a:	f107 0317 	add.w	r3, r7, #23
 800603e:	4619      	mov	r1, r3
 8006040:	68b8      	ldr	r0, [r7, #8]
 8006042:	f000 fe29 	bl	8006c98 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	79fa      	ldrb	r2, [r7, #7]
 800604c:	429a      	cmp	r2, r3
 800604e:	d201      	bcs.n	8006054 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8006050:	2301      	movs	r3, #1
 8006052:	e007      	b.n	8006064 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8006054:	7df8      	ldrb	r0, [r7, #23]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	68f9      	ldr	r1, [r7, #12]
 800605e:	f000 ff41 	bl	8006ee4 <SUBGRF_ReadBuffer>

    return 0;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	460b      	mov	r3, r1
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800607a:	7afb      	ldrb	r3, [r7, #11]
 800607c:	4619      	mov	r1, r3
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff ffc2 	bl	8006008 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f91d 	bl	80062c4 <SUBGRF_SetTx>
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b082      	sub	sp, #8
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800609a:	2208      	movs	r2, #8
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 80060a2:	f000 feb9 	bl	8006e18 <SUBGRF_WriteRegisters>
    return 0;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	4603      	mov	r3, r0
 80060b8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80060ba:	88fb      	ldrh	r3, [r7, #6]
 80060bc:	0a1b      	lsrs	r3, r3, #8
 80060be:	b29b      	uxth	r3, r3
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80060ca:	f000 fb77 	bl	80067bc <SUBGRF_GetPacketType>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d108      	bne.n	80060e6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80060d4:	f107 030c 	add.w	r3, r7, #12
 80060d8:	2202      	movs	r2, #2
 80060da:	4619      	mov	r1, r3
 80060dc:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80060e0:	f000 fe9a 	bl	8006e18 <SUBGRF_WriteRegisters>
            break;
 80060e4:	e000      	b.n	80060e8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80060e6:	bf00      	nop
    }
}
 80060e8:	bf00      	nop
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	0a1b      	lsrs	r3, r3, #8
 80060fe:	b29b      	uxth	r3, r3
 8006100:	b2db      	uxtb	r3, r3
 8006102:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8006104:	88fb      	ldrh	r3, [r7, #6]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800610a:	f000 fb57 	bl	80067bc <SUBGRF_GetPacketType>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d108      	bne.n	8006126 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006114:	f107 030c 	add.w	r3, r7, #12
 8006118:	2202      	movs	r2, #2
 800611a:	4619      	mov	r1, r3
 800611c:	f240 60be 	movw	r0, #1726	@ 0x6be
 8006120:	f000 fe7a 	bl	8006e18 <SUBGRF_WriteRegisters>
            break;
 8006124:	e000      	b.n	8006128 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8006126:	bf00      	nop
    }
}
 8006128:	bf00      	nop
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	4603      	mov	r3, r0
 8006138:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800613e:	f000 fb3d 	bl	80067bc <SUBGRF_GetPacketType>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d121      	bne.n	800618c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8006148:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800614c:	f000 fe44 	bl	8006dd8 <SUBGRF_ReadRegister>
 8006150:	4603      	mov	r3, r0
 8006152:	f023 0301 	bic.w	r3, r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	0a1b      	lsrs	r3, r3, #8
 800615c:	b29b      	uxth	r3, r3
 800615e:	b25b      	sxtb	r3, r3
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	b25a      	sxtb	r2, r3
 8006166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800616a:	4313      	orrs	r3, r2
 800616c:	b25b      	sxtb	r3, r3
 800616e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	4619      	mov	r1, r3
 8006174:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8006178:	f000 fe0c 	bl	8006d94 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	4619      	mov	r1, r3
 8006182:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8006186:	f000 fe05 	bl	8006d94 <SUBGRF_WriteRegister>
            break;
 800618a:	e000      	b.n	800618e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800618c:	bf00      	nop
    }
}
 800618e:	bf00      	nop
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80061a8:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80061ac:	f000 fe14 	bl	8006dd8 <SUBGRF_ReadRegister>
 80061b0:	4603      	mov	r3, r0
 80061b2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	4619      	mov	r1, r3
 80061be:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80061c2:	f000 fde7 	bl	8006d94 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80061c6:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80061ca:	f000 fe05 	bl	8006dd8 <SUBGRF_ReadRegister>
 80061ce:	4603      	mov	r3, r0
 80061d0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80061d2:	79bb      	ldrb	r3, [r7, #6]
 80061d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	4619      	mov	r1, r3
 80061dc:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80061e0:	f000 fdd8 	bl	8006d94 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80061e4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80061e8:	f000 f88c 	bl	8006304 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80061ec:	463b      	mov	r3, r7
 80061ee:	2204      	movs	r2, #4
 80061f0:	4619      	mov	r1, r3
 80061f2:	f640 0019 	movw	r0, #2073	@ 0x819
 80061f6:	f000 fe31 	bl	8006e5c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80061fa:	2000      	movs	r0, #0
 80061fc:	f000 f846 	bl	800628c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	4619      	mov	r1, r3
 8006204:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8006208:	f000 fdc4 	bl	8006d94 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800620c:	79bb      	ldrb	r3, [r7, #6]
 800620e:	4619      	mov	r1, r3
 8006210:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8006214:	f000 fdbe 	bl	8006d94 <SUBGRF_WriteRegister>

    return number;
 8006218:	683b      	ldr	r3, [r7, #0]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800622c:	2000      	movs	r0, #0
 800622e:	f001 f8c6 	bl	80073be <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006232:	2002      	movs	r0, #2
 8006234:	f000 ff1f 	bl	8007076 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006238:	793b      	ldrb	r3, [r7, #4]
 800623a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800623e:	b2db      	uxtb	r3, r3
 8006240:	b25b      	sxtb	r3, r3
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006246:	793b      	ldrb	r3, [r7, #4]
 8006248:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800624c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800624e:	b25b      	sxtb	r3, r3
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	b25b      	sxtb	r3, r3
 8006254:	4313      	orrs	r3, r2
 8006256:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8006258:	793b      	ldrb	r3, [r7, #4]
 800625a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800625e:	b2db      	uxtb	r3, r3
 8006260:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006262:	4313      	orrs	r3, r2
 8006264:	b25b      	sxtb	r3, r3
 8006266:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006268:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800626a:	f107 030f 	add.w	r3, r7, #15
 800626e:	2201      	movs	r2, #1
 8006270:	4619      	mov	r1, r3
 8006272:	2084      	movs	r0, #132	@ 0x84
 8006274:	f000 fe58 	bl	8006f28 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8006278:	4b03      	ldr	r3, [pc, #12]	@ (8006288 <SUBGRF_SetSleep+0x64>)
 800627a:	2200      	movs	r2, #0
 800627c:	701a      	strb	r2, [r3, #0]
}
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20000354 	.word	0x20000354

0800628c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	4603      	mov	r3, r0
 8006294:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8006296:	1dfb      	adds	r3, r7, #7
 8006298:	2201      	movs	r2, #1
 800629a:	4619      	mov	r1, r3
 800629c:	2080      	movs	r0, #128	@ 0x80
 800629e:	f000 fe43 	bl	8006f28 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80062a2:	79fb      	ldrb	r3, [r7, #7]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80062a8:	4b05      	ldr	r3, [pc, #20]	@ (80062c0 <SUBGRF_SetStandby+0x34>)
 80062aa:	2201      	movs	r2, #1
 80062ac:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80062ae:	e002      	b.n	80062b6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80062b0:	4b03      	ldr	r3, [pc, #12]	@ (80062c0 <SUBGRF_SetStandby+0x34>)
 80062b2:	2202      	movs	r2, #2
 80062b4:	701a      	strb	r2, [r3, #0]
}
 80062b6:	bf00      	nop
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000354 	.word	0x20000354

080062c4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80062cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <SUBGRF_SetTx+0x3c>)
 80062ce:	2204      	movs	r2, #4
 80062d0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	0c1b      	lsrs	r3, r3, #16
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	0a1b      	lsrs	r3, r3, #8
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80062e8:	f107 030c 	add.w	r3, r7, #12
 80062ec:	2203      	movs	r2, #3
 80062ee:	4619      	mov	r1, r3
 80062f0:	2083      	movs	r0, #131	@ 0x83
 80062f2:	f000 fe19 	bl	8006f28 <SUBGRF_WriteCommand>
}
 80062f6:	bf00      	nop
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000354 	.word	0x20000354

08006304 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800630c:	4b0c      	ldr	r3, [pc, #48]	@ (8006340 <SUBGRF_SetRx+0x3c>)
 800630e:	2205      	movs	r2, #5
 8006310:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	0c1b      	lsrs	r3, r3, #16
 8006316:	b2db      	uxtb	r3, r3
 8006318:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	0a1b      	lsrs	r3, r3, #8
 800631e:	b2db      	uxtb	r3, r3
 8006320:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006328:	f107 030c 	add.w	r3, r7, #12
 800632c:	2203      	movs	r2, #3
 800632e:	4619      	mov	r1, r3
 8006330:	2082      	movs	r0, #130	@ 0x82
 8006332:	f000 fdf9 	bl	8006f28 <SUBGRF_WriteCommand>
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000354 	.word	0x20000354

08006344 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800634c:	4b0e      	ldr	r3, [pc, #56]	@ (8006388 <SUBGRF_SetRxBoosted+0x44>)
 800634e:	2205      	movs	r2, #5
 8006350:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8006352:	2197      	movs	r1, #151	@ 0x97
 8006354:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8006358:	f000 fd1c 	bl	8006d94 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	0c1b      	lsrs	r3, r3, #16
 8006360:	b2db      	uxtb	r3, r3
 8006362:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	0a1b      	lsrs	r3, r3, #8
 8006368:	b2db      	uxtb	r3, r3
 800636a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006372:	f107 030c 	add.w	r3, r7, #12
 8006376:	2203      	movs	r2, #3
 8006378:	4619      	mov	r1, r3
 800637a:	2082      	movs	r0, #130	@ 0x82
 800637c:	f000 fdd4 	bl	8006f28 <SUBGRF_WriteCommand>
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	20000354 	.word	0x20000354

0800638c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	0c1b      	lsrs	r3, r3, #16
 800639a:	b2db      	uxtb	r3, r3
 800639c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	0a1b      	lsrs	r3, r3, #8
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	0c1b      	lsrs	r3, r3, #16
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	0a1b      	lsrs	r3, r3, #8
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80063c2:	f107 0308 	add.w	r3, r7, #8
 80063c6:	2206      	movs	r2, #6
 80063c8:	4619      	mov	r1, r3
 80063ca:	2094      	movs	r0, #148	@ 0x94
 80063cc:	f000 fdac 	bl	8006f28 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80063d0:	4b03      	ldr	r3, [pc, #12]	@ (80063e0 <SUBGRF_SetRxDutyCycle+0x54>)
 80063d2:	2206      	movs	r2, #6
 80063d4:	701a      	strb	r2, [r3, #0]
}
 80063d6:	bf00      	nop
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000354 	.word	0x20000354

080063e4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80063e8:	2200      	movs	r2, #0
 80063ea:	2100      	movs	r1, #0
 80063ec:	20c5      	movs	r0, #197	@ 0xc5
 80063ee:	f000 fd9b 	bl	8006f28 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80063f2:	4b02      	ldr	r3, [pc, #8]	@ (80063fc <SUBGRF_SetCad+0x18>)
 80063f4:	2207      	movs	r2, #7
 80063f6:	701a      	strb	r2, [r3, #0]
}
 80063f8:	bf00      	nop
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000354 	.word	0x20000354

08006400 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8006404:	2200      	movs	r2, #0
 8006406:	2100      	movs	r1, #0
 8006408:	20d1      	movs	r0, #209	@ 0xd1
 800640a:	f000 fd8d 	bl	8006f28 <SUBGRF_WriteCommand>
}
 800640e:	bf00      	nop
 8006410:	bd80      	pop	{r7, pc}

08006412 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8006412:	b580      	push	{r7, lr}
 8006414:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8006416:	2200      	movs	r2, #0
 8006418:	2100      	movs	r1, #0
 800641a:	20d2      	movs	r0, #210	@ 0xd2
 800641c:	f000 fd84 	bl	8006f28 <SUBGRF_WriteCommand>
}
 8006420:	bf00      	nop
 8006422:	bd80      	pop	{r7, pc}

08006424 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	4603      	mov	r3, r0
 800642c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800642e:	1dfb      	adds	r3, r7, #7
 8006430:	2201      	movs	r2, #1
 8006432:	4619      	mov	r1, r3
 8006434:	209f      	movs	r0, #159	@ 0x9f
 8006436:	f000 fd77 	bl	8006f28 <SUBGRF_WriteCommand>
}
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	4603      	mov	r3, r0
 800644a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800644c:	1dfb      	adds	r3, r7, #7
 800644e:	2201      	movs	r2, #1
 8006450:	4619      	mov	r1, r3
 8006452:	20a0      	movs	r0, #160	@ 0xa0
 8006454:	f000 fd68 	bl	8006f28 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8006458:	79fb      	ldrb	r3, [r7, #7]
 800645a:	2b3f      	cmp	r3, #63	@ 0x3f
 800645c:	d91c      	bls.n	8006498 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800646c:	e005      	b.n	800647a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	089b      	lsrs	r3, r3, #2
 8006472:	73fb      	strb	r3, [r7, #15]
            exp++;
 8006474:	7bbb      	ldrb	r3, [r7, #14]
 8006476:	3301      	adds	r3, #1
 8006478:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	2b1f      	cmp	r3, #31
 800647e:	d8f6      	bhi.n	800646e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	b2da      	uxtb	r2, r3
 8006486:	7bbb      	ldrb	r3, [r7, #14]
 8006488:	4413      	add	r3, r2
 800648a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800648c:	7b7b      	ldrb	r3, [r7, #13]
 800648e:	4619      	mov	r1, r3
 8006490:	f240 7006 	movw	r0, #1798	@ 0x706
 8006494:	f000 fc7e 	bl	8006d94 <SUBGRF_WriteRegister>
    }
}
 8006498:	bf00      	nop
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80064a6:	f000 ffad 	bl	8007404 <RBI_IsDCDC>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d102      	bne.n	80064b6 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80064b0:	2301      	movs	r3, #1
 80064b2:	71fb      	strb	r3, [r7, #7]
 80064b4:	e001      	b.n	80064ba <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80064b6:	2300      	movs	r3, #0
 80064b8:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80064ba:	1dfb      	adds	r3, r7, #7
 80064bc:	2201      	movs	r2, #1
 80064be:	4619      	mov	r1, r3
 80064c0:	2096      	movs	r0, #150	@ 0x96
 80064c2:	f000 fd31 	bl	8006f28 <SUBGRF_WriteCommand>
}
 80064c6:	bf00      	nop
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80064d6:	793b      	ldrb	r3, [r7, #4]
 80064d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	b25b      	sxtb	r3, r3
 80064e0:	019b      	lsls	r3, r3, #6
 80064e2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80064e4:	793b      	ldrb	r3, [r7, #4]
 80064e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80064ea:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80064ec:	b25b      	sxtb	r3, r3
 80064ee:	015b      	lsls	r3, r3, #5
 80064f0:	b25b      	sxtb	r3, r3
 80064f2:	4313      	orrs	r3, r2
 80064f4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80064f6:	793b      	ldrb	r3, [r7, #4]
 80064f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80064fc:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80064fe:	b25b      	sxtb	r3, r3
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	b25b      	sxtb	r3, r3
 8006504:	4313      	orrs	r3, r2
 8006506:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006508:	793b      	ldrb	r3, [r7, #4]
 800650a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800650e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006510:	b25b      	sxtb	r3, r3
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	b25b      	sxtb	r3, r3
 8006516:	4313      	orrs	r3, r2
 8006518:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800651a:	793b      	ldrb	r3, [r7, #4]
 800651c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006520:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006522:	b25b      	sxtb	r3, r3
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	b25b      	sxtb	r3, r3
 8006528:	4313      	orrs	r3, r2
 800652a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800652c:	793b      	ldrb	r3, [r7, #4]
 800652e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006532:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006534:	b25b      	sxtb	r3, r3
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	b25b      	sxtb	r3, r3
 800653a:	4313      	orrs	r3, r2
 800653c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800653e:	793b      	ldrb	r3, [r7, #4]
 8006540:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006544:	b2db      	uxtb	r3, r3
 8006546:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006548:	4313      	orrs	r3, r2
 800654a:	b25b      	sxtb	r3, r3
 800654c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800654e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8006550:	f107 030f 	add.w	r3, r7, #15
 8006554:	2201      	movs	r2, #1
 8006556:	4619      	mov	r1, r3
 8006558:	2089      	movs	r0, #137	@ 0x89
 800655a:	f000 fce5 	bl	8006f28 <SUBGRF_WriteCommand>
}
 800655e:	bf00      	nop
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a1d      	ldr	r2, [pc, #116]	@ (80065e8 <SUBGRF_CalibrateImage+0x80>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d904      	bls.n	8006582 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8006578:	23e1      	movs	r3, #225	@ 0xe1
 800657a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800657c:	23e9      	movs	r3, #233	@ 0xe9
 800657e:	737b      	strb	r3, [r7, #13]
 8006580:	e027      	b.n	80065d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a19      	ldr	r2, [pc, #100]	@ (80065ec <SUBGRF_CalibrateImage+0x84>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d904      	bls.n	8006594 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800658a:	23d7      	movs	r3, #215	@ 0xd7
 800658c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800658e:	23db      	movs	r3, #219	@ 0xdb
 8006590:	737b      	strb	r3, [r7, #13]
 8006592:	e01e      	b.n	80065d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a16      	ldr	r2, [pc, #88]	@ (80065f0 <SUBGRF_CalibrateImage+0x88>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d904      	bls.n	80065a6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800659c:	23c1      	movs	r3, #193	@ 0xc1
 800659e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80065a0:	23c5      	movs	r3, #197	@ 0xc5
 80065a2:	737b      	strb	r3, [r7, #13]
 80065a4:	e015      	b.n	80065d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a12      	ldr	r2, [pc, #72]	@ (80065f4 <SUBGRF_CalibrateImage+0x8c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d904      	bls.n	80065b8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80065ae:	2375      	movs	r3, #117	@ 0x75
 80065b0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80065b2:	2381      	movs	r3, #129	@ 0x81
 80065b4:	737b      	strb	r3, [r7, #13]
 80065b6:	e00c      	b.n	80065d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a0f      	ldr	r2, [pc, #60]	@ (80065f8 <SUBGRF_CalibrateImage+0x90>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d904      	bls.n	80065ca <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80065c0:	236b      	movs	r3, #107	@ 0x6b
 80065c2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80065c4:	236f      	movs	r3, #111	@ 0x6f
 80065c6:	737b      	strb	r3, [r7, #13]
 80065c8:	e003      	b.n	80065d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80065ca:	2329      	movs	r3, #41	@ 0x29
 80065cc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80065ce:	232b      	movs	r3, #43	@ 0x2b
 80065d0:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80065d2:	f107 030c 	add.w	r3, r7, #12
 80065d6:	2202      	movs	r2, #2
 80065d8:	4619      	mov	r1, r3
 80065da:	2098      	movs	r0, #152	@ 0x98
 80065dc:	f000 fca4 	bl	8006f28 <SUBGRF_WriteCommand>
}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	35a4e900 	.word	0x35a4e900
 80065ec:	32a9f880 	.word	0x32a9f880
 80065f0:	2de54480 	.word	0x2de54480
 80065f4:	1b6b0b00 	.word	0x1b6b0b00
 80065f8:	1954fc40 	.word	0x1954fc40

080065fc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80065fc:	b590      	push	{r4, r7, lr}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	4604      	mov	r4, r0
 8006604:	4608      	mov	r0, r1
 8006606:	4611      	mov	r1, r2
 8006608:	461a      	mov	r2, r3
 800660a:	4623      	mov	r3, r4
 800660c:	71fb      	strb	r3, [r7, #7]
 800660e:	4603      	mov	r3, r0
 8006610:	71bb      	strb	r3, [r7, #6]
 8006612:	460b      	mov	r3, r1
 8006614:	717b      	strb	r3, [r7, #5]
 8006616:	4613      	mov	r3, r2
 8006618:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800661e:	79bb      	ldrb	r3, [r7, #6]
 8006620:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8006622:	797b      	ldrb	r3, [r7, #5]
 8006624:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8006626:	793b      	ldrb	r3, [r7, #4]
 8006628:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800662a:	f107 030c 	add.w	r3, r7, #12
 800662e:	2204      	movs	r2, #4
 8006630:	4619      	mov	r1, r3
 8006632:	2095      	movs	r0, #149	@ 0x95
 8006634:	f000 fc78 	bl	8006f28 <SUBGRF_WriteCommand>
}
 8006638:	bf00      	nop
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	bd90      	pop	{r4, r7, pc}

08006640 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8006640:	b590      	push	{r4, r7, lr}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	4604      	mov	r4, r0
 8006648:	4608      	mov	r0, r1
 800664a:	4611      	mov	r1, r2
 800664c:	461a      	mov	r2, r3
 800664e:	4623      	mov	r3, r4
 8006650:	80fb      	strh	r3, [r7, #6]
 8006652:	4603      	mov	r3, r0
 8006654:	80bb      	strh	r3, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	807b      	strh	r3, [r7, #2]
 800665a:	4613      	mov	r3, r2
 800665c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800665e:	88fb      	ldrh	r3, [r7, #6]
 8006660:	0a1b      	lsrs	r3, r3, #8
 8006662:	b29b      	uxth	r3, r3
 8006664:	b2db      	uxtb	r3, r3
 8006666:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8006668:	88fb      	ldrh	r3, [r7, #6]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800666e:	88bb      	ldrh	r3, [r7, #4]
 8006670:	0a1b      	lsrs	r3, r3, #8
 8006672:	b29b      	uxth	r3, r3
 8006674:	b2db      	uxtb	r3, r3
 8006676:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8006678:	88bb      	ldrh	r3, [r7, #4]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800667e:	887b      	ldrh	r3, [r7, #2]
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	b29b      	uxth	r3, r3
 8006684:	b2db      	uxtb	r3, r3
 8006686:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8006688:	887b      	ldrh	r3, [r7, #2]
 800668a:	b2db      	uxtb	r3, r3
 800668c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800668e:	883b      	ldrh	r3, [r7, #0]
 8006690:	0a1b      	lsrs	r3, r3, #8
 8006692:	b29b      	uxth	r3, r3
 8006694:	b2db      	uxtb	r3, r3
 8006696:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8006698:	883b      	ldrh	r3, [r7, #0]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800669e:	f107 0308 	add.w	r3, r7, #8
 80066a2:	2208      	movs	r2, #8
 80066a4:	4619      	mov	r1, r3
 80066a6:	2008      	movs	r0, #8
 80066a8:	f000 fc3e 	bl	8006f28 <SUBGRF_WriteCommand>
}
 80066ac:	bf00      	nop
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd90      	pop	{r4, r7, pc}

080066b4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	6039      	str	r1, [r7, #0]
 80066be:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	0c1b      	lsrs	r3, r3, #16
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	0a1b      	lsrs	r3, r3, #8
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80066e0:	f107 030c 	add.w	r3, r7, #12
 80066e4:	2204      	movs	r2, #4
 80066e6:	4619      	mov	r1, r3
 80066e8:	2097      	movs	r0, #151	@ 0x97
 80066ea:	f000 fc1d 	bl	8006f28 <SUBGRF_WriteCommand>
}
 80066ee:	bf00      	nop
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
	...

080066f8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80066f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8006706:	4b1d      	ldr	r3, [pc, #116]	@ (800677c <SUBGRF_SetRfFrequency+0x84>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	f083 0301 	eor.w	r3, r3, #1
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d005      	beq.n	8006720 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff ff27 	bl	8006568 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800671a:	4b18      	ldr	r3, [pc, #96]	@ (800677c <SUBGRF_SetRfFrequency+0x84>)
 800671c:	2201      	movs	r2, #1
 800671e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	461c      	mov	r4, r3
 8006726:	4615      	mov	r5, r2
 8006728:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800672c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8006730:	4a13      	ldr	r2, [pc, #76]	@ (8006780 <SUBGRF_SetRfFrequency+0x88>)
 8006732:	f04f 0300 	mov.w	r3, #0
 8006736:	4640      	mov	r0, r8
 8006738:	4649      	mov	r1, r9
 800673a:	f7f9 fd71 	bl	8000220 <__aeabi_uldivmod>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4613      	mov	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	0e1b      	lsrs	r3, r3, #24
 800674a:	b2db      	uxtb	r3, r3
 800674c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	0c1b      	lsrs	r3, r3, #16
 8006752:	b2db      	uxtb	r3, r3
 8006754:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	0a1b      	lsrs	r3, r3, #8
 800675a:	b2db      	uxtb	r3, r3
 800675c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8006764:	f107 0308 	add.w	r3, r7, #8
 8006768:	2204      	movs	r2, #4
 800676a:	4619      	mov	r1, r3
 800676c:	2086      	movs	r0, #134	@ 0x86
 800676e:	f000 fbdb 	bl	8006f28 <SUBGRF_WriteCommand>
}
 8006772:	bf00      	nop
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800677c:	2000035c 	.word	0x2000035c
 8006780:	01e84800 	.word	0x01e84800

08006784 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800678e:	79fa      	ldrb	r2, [r7, #7]
 8006790:	4b09      	ldr	r3, [pc, #36]	@ (80067b8 <SUBGRF_SetPacketType+0x34>)
 8006792:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d104      	bne.n	80067a4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800679a:	2100      	movs	r1, #0
 800679c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80067a0:	f000 faf8 	bl	8006d94 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80067a4:	1dfb      	adds	r3, r7, #7
 80067a6:	2201      	movs	r2, #1
 80067a8:	4619      	mov	r1, r3
 80067aa:	208a      	movs	r0, #138	@ 0x8a
 80067ac:	f000 fbbc 	bl	8006f28 <SUBGRF_WriteCommand>
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	20000355 	.word	0x20000355

080067bc <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
    return PacketType;
 80067c0:	4b02      	ldr	r3, [pc, #8]	@ (80067cc <SUBGRF_GetPacketType+0x10>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr
 80067cc:	20000355 	.word	0x20000355

080067d0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	71fb      	strb	r3, [r7, #7]
 80067da:	460b      	mov	r3, r1
 80067dc:	71bb      	strb	r3, [r7, #6]
 80067de:	4613      	mov	r3, r2
 80067e0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d149      	bne.n	800687c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80067e8:	2000      	movs	r0, #0
 80067ea:	f000 fe16 	bl	800741a <RBI_GetRFOMaxPowerConfig>
 80067ee:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80067f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	da01      	bge.n	80067fe <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b0e      	cmp	r3, #14
 8006802:	d10e      	bne.n	8006822 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8006804:	2301      	movs	r3, #1
 8006806:	2201      	movs	r2, #1
 8006808:	2100      	movs	r1, #0
 800680a:	2004      	movs	r0, #4
 800680c:	f7ff fef6 	bl	80065fc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8006810:	79ba      	ldrb	r2, [r7, #6]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	b2db      	uxtb	r3, r3
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	b2db      	uxtb	r3, r3
 800681a:	330e      	adds	r3, #14
 800681c:	b2db      	uxtb	r3, r3
 800681e:	71bb      	strb	r3, [r7, #6]
 8006820:	e01f      	b.n	8006862 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b0a      	cmp	r3, #10
 8006826:	d10e      	bne.n	8006846 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8006828:	2301      	movs	r3, #1
 800682a:	2201      	movs	r2, #1
 800682c:	2100      	movs	r1, #0
 800682e:	2001      	movs	r0, #1
 8006830:	f7ff fee4 	bl	80065fc <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8006834:	79ba      	ldrb	r2, [r7, #6]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	b2db      	uxtb	r3, r3
 800683e:	330d      	adds	r3, #13
 8006840:	b2db      	uxtb	r3, r3
 8006842:	71bb      	strb	r3, [r7, #6]
 8006844:	e00d      	b.n	8006862 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8006846:	2301      	movs	r3, #1
 8006848:	2201      	movs	r2, #1
 800684a:	2100      	movs	r1, #0
 800684c:	2007      	movs	r0, #7
 800684e:	f7ff fed5 	bl	80065fc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8006852:	79ba      	ldrb	r2, [r7, #6]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	b2db      	uxtb	r3, r3
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	b2db      	uxtb	r3, r3
 800685c:	330e      	adds	r3, #14
 800685e:	b2db      	uxtb	r3, r3
 8006860:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8006862:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006866:	f113 0f11 	cmn.w	r3, #17
 800686a:	da01      	bge.n	8006870 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800686c:	23ef      	movs	r3, #239	@ 0xef
 800686e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8006870:	2118      	movs	r1, #24
 8006872:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8006876:	f000 fa8d 	bl	8006d94 <SUBGRF_WriteRegister>
 800687a:	e067      	b.n	800694c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800687c:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8006880:	f000 faaa 	bl	8006dd8 <SUBGRF_ReadRegister>
 8006884:	4603      	mov	r3, r0
 8006886:	f043 031e 	orr.w	r3, r3, #30
 800688a:	b2db      	uxtb	r3, r3
 800688c:	4619      	mov	r1, r3
 800688e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8006892:	f000 fa7f 	bl	8006d94 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8006896:	2001      	movs	r0, #1
 8006898:	f000 fdbf 	bl	800741a <RBI_GetRFOMaxPowerConfig>
 800689c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800689e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	da01      	bge.n	80068ac <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b14      	cmp	r3, #20
 80068b0:	d10e      	bne.n	80068d0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80068b2:	2301      	movs	r3, #1
 80068b4:	2200      	movs	r2, #0
 80068b6:	2105      	movs	r1, #5
 80068b8:	2003      	movs	r0, #3
 80068ba:	f7ff fe9f 	bl	80065fc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80068be:	79ba      	ldrb	r2, [r7, #6]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	3316      	adds	r3, #22
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	71bb      	strb	r3, [r7, #6]
 80068ce:	e031      	b.n	8006934 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b11      	cmp	r3, #17
 80068d4:	d10e      	bne.n	80068f4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80068d6:	2301      	movs	r3, #1
 80068d8:	2200      	movs	r2, #0
 80068da:	2103      	movs	r1, #3
 80068dc:	2002      	movs	r0, #2
 80068de:	f7ff fe8d 	bl	80065fc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80068e2:	79ba      	ldrb	r2, [r7, #6]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	3316      	adds	r3, #22
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	71bb      	strb	r3, [r7, #6]
 80068f2:	e01f      	b.n	8006934 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b0e      	cmp	r3, #14
 80068f8:	d10e      	bne.n	8006918 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80068fa:	2301      	movs	r3, #1
 80068fc:	2200      	movs	r2, #0
 80068fe:	2102      	movs	r1, #2
 8006900:	2002      	movs	r0, #2
 8006902:	f7ff fe7b 	bl	80065fc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8006906:	79ba      	ldrb	r2, [r7, #6]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	b2db      	uxtb	r3, r3
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	b2db      	uxtb	r3, r3
 8006910:	330e      	adds	r3, #14
 8006912:	b2db      	uxtb	r3, r3
 8006914:	71bb      	strb	r3, [r7, #6]
 8006916:	e00d      	b.n	8006934 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8006918:	2301      	movs	r3, #1
 800691a:	2200      	movs	r2, #0
 800691c:	2107      	movs	r1, #7
 800691e:	2004      	movs	r0, #4
 8006920:	f7ff fe6c 	bl	80065fc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8006924:	79ba      	ldrb	r2, [r7, #6]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	b2db      	uxtb	r3, r3
 800692e:	3316      	adds	r3, #22
 8006930:	b2db      	uxtb	r3, r3
 8006932:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8006934:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006938:	f113 0f09 	cmn.w	r3, #9
 800693c:	da01      	bge.n	8006942 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800693e:	23f7      	movs	r3, #247	@ 0xf7
 8006940:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8006942:	2138      	movs	r1, #56	@ 0x38
 8006944:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8006948:	f000 fa24 	bl	8006d94 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800694c:	79bb      	ldrb	r3, [r7, #6]
 800694e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8006950:	797b      	ldrb	r3, [r7, #5]
 8006952:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8006954:	f107 0308 	add.w	r3, r7, #8
 8006958:	2202      	movs	r2, #2
 800695a:	4619      	mov	r1, r3
 800695c:	208e      	movs	r0, #142	@ 0x8e
 800695e:	f000 fae3 	bl	8006f28 <SUBGRF_WriteCommand>
}
 8006962:	bf00      	nop
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800696c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006970:	b086      	sub	sp, #24
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800697a:	f107 0308 	add.w	r3, r7, #8
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	781a      	ldrb	r2, [r3, #0]
 8006988:	4b5c      	ldr	r3, [pc, #368]	@ (8006afc <SUBGRF_SetModulationParams+0x190>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d004      	beq.n	800699a <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	4618      	mov	r0, r3
 8006996:	f7ff fef5 	bl	8006784 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b03      	cmp	r3, #3
 80069a0:	f200 80a5 	bhi.w	8006aee <SUBGRF_SetModulationParams+0x182>
 80069a4:	a201      	add	r2, pc, #4	@ (adr r2, 80069ac <SUBGRF_SetModulationParams+0x40>)
 80069a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069aa:	bf00      	nop
 80069ac:	080069bd 	.word	0x080069bd
 80069b0:	08006a7d 	.word	0x08006a7d
 80069b4:	08006a3f 	.word	0x08006a3f
 80069b8:	08006aab 	.word	0x08006aab
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80069bc:	2308      	movs	r3, #8
 80069be:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	4a4e      	ldr	r2, [pc, #312]	@ (8006b00 <SUBGRF_SetModulationParams+0x194>)
 80069c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ca:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	0c1b      	lsrs	r3, r3, #16
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	0a1b      	lsrs	r3, r3, #8
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	7b1b      	ldrb	r3, [r3, #12]
 80069e6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7b5b      	ldrb	r3, [r3, #13]
 80069ec:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	2200      	movs	r2, #0
 80069f4:	461c      	mov	r4, r3
 80069f6:	4615      	mov	r5, r2
 80069f8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80069fc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8006a00:	4a40      	ldr	r2, [pc, #256]	@ (8006b04 <SUBGRF_SetModulationParams+0x198>)
 8006a02:	f04f 0300 	mov.w	r3, #0
 8006a06:	4640      	mov	r0, r8
 8006a08:	4649      	mov	r1, r9
 8006a0a:	f7f9 fc09 	bl	8000220 <__aeabi_uldivmod>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4613      	mov	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	0c1b      	lsrs	r3, r3, #16
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	0a1b      	lsrs	r3, r3, #8
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006a2c:	7cfb      	ldrb	r3, [r7, #19]
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	f107 0308 	add.w	r3, r7, #8
 8006a34:	4619      	mov	r1, r3
 8006a36:	208b      	movs	r0, #139	@ 0x8b
 8006a38:	f000 fa76 	bl	8006f28 <SUBGRF_WriteCommand>
        break;
 8006a3c:	e058      	b.n	8006af0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8006a3e:	2304      	movs	r3, #4
 8006a40:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	4a2e      	ldr	r2, [pc, #184]	@ (8006b00 <SUBGRF_SetModulationParams+0x194>)
 8006a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	0c1b      	lsrs	r3, r3, #16
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	7d1b      	ldrb	r3, [r3, #20]
 8006a68:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006a6a:	7cfb      	ldrb	r3, [r7, #19]
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	f107 0308 	add.w	r3, r7, #8
 8006a72:	4619      	mov	r1, r3
 8006a74:	208b      	movs	r0, #139	@ 0x8b
 8006a76:	f000 fa57 	bl	8006f28 <SUBGRF_WriteCommand>
        break;
 8006a7a:	e039      	b.n	8006af0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8006a7c:	2304      	movs	r3, #4
 8006a7e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	7e1b      	ldrb	r3, [r3, #24]
 8006a84:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	7e5b      	ldrb	r3, [r3, #25]
 8006a8a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	7e9b      	ldrb	r3, [r3, #26]
 8006a90:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	7edb      	ldrb	r3, [r3, #27]
 8006a96:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006a98:	7cfb      	ldrb	r3, [r7, #19]
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	f107 0308 	add.w	r3, r7, #8
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	208b      	movs	r0, #139	@ 0x8b
 8006aa4:	f000 fa40 	bl	8006f28 <SUBGRF_WriteCommand>

        break;
 8006aa8:	e022      	b.n	8006af0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8006aaa:	2305      	movs	r3, #5
 8006aac:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	4a13      	ldr	r2, [pc, #76]	@ (8006b00 <SUBGRF_SetModulationParams+0x194>)
 8006ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	0c1b      	lsrs	r3, r3, #16
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	0a1b      	lsrs	r3, r3, #8
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	7b1b      	ldrb	r3, [r3, #12]
 8006ad4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	7b5b      	ldrb	r3, [r3, #13]
 8006ada:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006adc:	7cfb      	ldrb	r3, [r7, #19]
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f107 0308 	add.w	r3, r7, #8
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	208b      	movs	r0, #139	@ 0x8b
 8006ae8:	f000 fa1e 	bl	8006f28 <SUBGRF_WriteCommand>
        break;
 8006aec:	e000      	b.n	8006af0 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8006aee:	bf00      	nop
    }
}
 8006af0:	bf00      	nop
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006afa:	bf00      	nop
 8006afc:	20000355 	.word	0x20000355
 8006b00:	3d090000 	.word	0x3d090000
 8006b04:	01e84800 	.word	0x01e84800

08006b08 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006b14:	f107 030c 	add.w	r3, r7, #12
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	605a      	str	r2, [r3, #4]
 8006b1e:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	781a      	ldrb	r2, [r3, #0]
 8006b24:	4b44      	ldr	r3, [pc, #272]	@ (8006c38 <SUBGRF_SetPacketParams+0x130>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d004      	beq.n	8006b36 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff fe27 	bl	8006784 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d878      	bhi.n	8006c30 <SUBGRF_SetPacketParams+0x128>
 8006b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b44 <SUBGRF_SetPacketParams+0x3c>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006b55 	.word	0x08006b55
 8006b48:	08006be5 	.word	0x08006be5
 8006b4c:	08006bd9 	.word	0x08006bd9
 8006b50:	08006b55 	.word	0x08006b55
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	7a5b      	ldrb	r3, [r3, #9]
 8006b58:	2bf1      	cmp	r3, #241	@ 0xf1
 8006b5a:	d10a      	bne.n	8006b72 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8006b5c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006b60:	f7ff faa6 	bl	80060b0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8006b64:	f248 0005 	movw	r0, #32773	@ 0x8005
 8006b68:	f7ff fac2 	bl	80060f0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	75bb      	strb	r3, [r7, #22]
 8006b70:	e011      	b.n	8006b96 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	7a5b      	ldrb	r3, [r3, #9]
 8006b76:	2bf2      	cmp	r3, #242	@ 0xf2
 8006b78:	d10a      	bne.n	8006b90 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8006b7a:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8006b7e:	f7ff fa97 	bl	80060b0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8006b82:	f241 0021 	movw	r0, #4129	@ 0x1021
 8006b86:	f7ff fab3 	bl	80060f0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8006b8a:	2306      	movs	r3, #6
 8006b8c:	75bb      	strb	r3, [r7, #22]
 8006b8e:	e002      	b.n	8006b96 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	7a5b      	ldrb	r3, [r3, #9]
 8006b94:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8006b96:	2309      	movs	r3, #9
 8006b98:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	885b      	ldrh	r3, [r3, #2]
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	885b      	ldrh	r3, [r3, #2]
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	791b      	ldrb	r3, [r3, #4]
 8006bb2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	795b      	ldrb	r3, [r3, #5]
 8006bb8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	799b      	ldrb	r3, [r3, #6]
 8006bbe:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	79db      	ldrb	r3, [r3, #7]
 8006bc4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	7a1b      	ldrb	r3, [r3, #8]
 8006bca:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8006bcc:	7dbb      	ldrb	r3, [r7, #22]
 8006bce:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	7a9b      	ldrb	r3, [r3, #10]
 8006bd4:	753b      	strb	r3, [r7, #20]
        break;
 8006bd6:	e022      	b.n	8006c1e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	7b1b      	ldrb	r3, [r3, #12]
 8006be0:	733b      	strb	r3, [r7, #12]
        break;
 8006be2:	e01c      	b.n	8006c1e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8006be4:	2306      	movs	r3, #6
 8006be6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	89db      	ldrh	r3, [r3, #14]
 8006bec:	0a1b      	lsrs	r3, r3, #8
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	89db      	ldrh	r3, [r3, #14]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	7c1a      	ldrb	r2, [r3, #16]
 8006c00:	4b0e      	ldr	r3, [pc, #56]	@ (8006c3c <SUBGRF_SetPacketParams+0x134>)
 8006c02:	4611      	mov	r1, r2
 8006c04:	7019      	strb	r1, [r3, #0]
 8006c06:	4613      	mov	r3, r2
 8006c08:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	7c5b      	ldrb	r3, [r3, #17]
 8006c0e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	7c9b      	ldrb	r3, [r3, #18]
 8006c14:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	7cdb      	ldrb	r3, [r3, #19]
 8006c1a:	747b      	strb	r3, [r7, #17]
        break;
 8006c1c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	f107 030c 	add.w	r3, r7, #12
 8006c26:	4619      	mov	r1, r3
 8006c28:	208c      	movs	r0, #140	@ 0x8c
 8006c2a:	f000 f97d 	bl	8006f28 <SUBGRF_WriteCommand>
 8006c2e:	e000      	b.n	8006c32 <SUBGRF_SetPacketParams+0x12a>
        return;
 8006c30:	bf00      	nop
}
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	20000355 	.word	0x20000355
 8006c3c:	20000356 	.word	0x20000356

08006c40 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	4603      	mov	r3, r0
 8006c48:	460a      	mov	r2, r1
 8006c4a:	71fb      	strb	r3, [r7, #7]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8006c50:	79fb      	ldrb	r3, [r7, #7]
 8006c52:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8006c54:	79bb      	ldrb	r3, [r7, #6]
 8006c56:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8006c58:	f107 030c 	add.w	r3, r7, #12
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	4619      	mov	r1, r3
 8006c60:	208f      	movs	r0, #143	@ 0x8f
 8006c62:	f000 f961 	bl	8006f28 <SUBGRF_WriteCommand>
}
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b082      	sub	sp, #8
 8006c72:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8006c78:	1d3b      	adds	r3, r7, #4
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	2015      	movs	r0, #21
 8006c80:	f000 f974 	bl	8006f6c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8006c84:	793b      	ldrb	r3, [r7, #4]
 8006c86:	425b      	negs	r3, r3
 8006c88:	105b      	asrs	r3, r3, #1
 8006c8a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8006c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8006ca2:	f107 030c 	add.w	r3, r7, #12
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	4619      	mov	r1, r3
 8006caa:	2013      	movs	r0, #19
 8006cac:	f000 f95e 	bl	8006f6c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8006cb0:	f7ff fd84 	bl	80067bc <SUBGRF_GetPacketType>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d10d      	bne.n	8006cd6 <SUBGRF_GetRxBufferStatus+0x3e>
 8006cba:	4b0c      	ldr	r3, [pc, #48]	@ (8006cec <SUBGRF_GetRxBufferStatus+0x54>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d108      	bne.n	8006cd6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8006cc4:	f240 7002 	movw	r0, #1794	@ 0x702
 8006cc8:	f000 f886 	bl	8006dd8 <SUBGRF_ReadRegister>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	461a      	mov	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	701a      	strb	r2, [r3, #0]
 8006cd4:	e002      	b.n	8006cdc <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8006cd6:	7b3a      	ldrb	r2, [r7, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8006cdc:	7b7a      	ldrb	r2, [r7, #13]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	701a      	strb	r2, [r3, #0]
}
 8006ce2:	bf00      	nop
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20000356 	.word	0x20000356

08006cf0 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8006cf8:	f107 030c 	add.w	r3, r7, #12
 8006cfc:	2203      	movs	r2, #3
 8006cfe:	4619      	mov	r1, r3
 8006d00:	2014      	movs	r0, #20
 8006d02:	f000 f933 	bl	8006f6c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8006d06:	f7ff fd59 	bl	80067bc <SUBGRF_GetPacketType>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <SUBGRF_GetPacketStatus+0x30>
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d013      	beq.n	8006d46 <SUBGRF_GetPacketStatus+0x56>
 8006d1e:	e02a      	b.n	8006d76 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8006d20:	7b3a      	ldrb	r2, [r7, #12]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8006d26:	7b7b      	ldrb	r3, [r7, #13]
 8006d28:	425b      	negs	r3, r3
 8006d2a:	105b      	asrs	r3, r3, #1
 8006d2c:	b25a      	sxtb	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	425b      	negs	r3, r3
 8006d36:	105b      	asrs	r3, r3, #1
 8006d38:	b25a      	sxtb	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	609a      	str	r2, [r3, #8]
            break;
 8006d44:	e020      	b.n	8006d88 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8006d46:	7b3b      	ldrb	r3, [r7, #12]
 8006d48:	425b      	negs	r3, r3
 8006d4a:	105b      	asrs	r3, r3, #1
 8006d4c:	b25a      	sxtb	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8006d52:	7b7b      	ldrb	r3, [r7, #13]
 8006d54:	b25b      	sxtb	r3, r3
 8006d56:	3302      	adds	r3, #2
 8006d58:	109b      	asrs	r3, r3, #2
 8006d5a:	b25a      	sxtb	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8006d60:	7bbb      	ldrb	r3, [r7, #14]
 8006d62:	425b      	negs	r3, r3
 8006d64:	105b      	asrs	r3, r3, #1
 8006d66:	b25a      	sxtb	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8006d6c:	4b08      	ldr	r3, [pc, #32]	@ (8006d90 <SUBGRF_GetPacketStatus+0xa0>)
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	611a      	str	r2, [r3, #16]
            break;
 8006d74:	e008      	b.n	8006d88 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8006d76:	2214      	movs	r2, #20
 8006d78:	2100      	movs	r1, #0
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fb81 	bl	8007482 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	220f      	movs	r2, #15
 8006d84:	701a      	strb	r2, [r3, #0]
            break;
 8006d86:	bf00      	nop
    }
}
 8006d88:	bf00      	nop
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20000358 	.word	0x20000358

08006d94 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	460a      	mov	r2, r1
 8006d9e:	80fb      	strh	r3, [r7, #6]
 8006da0:	4613      	mov	r3, r2
 8006da2:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006da4:	f3ef 8310 	mrs	r3, PRIMASK
 8006da8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006daa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006dac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006dae:	b672      	cpsid	i
}
 8006db0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8006db2:	1d7a      	adds	r2, r7, #5
 8006db4:	88f9      	ldrh	r1, [r7, #6]
 8006db6:	2301      	movs	r3, #1
 8006db8:	4806      	ldr	r0, [pc, #24]	@ (8006dd4 <SUBGRF_WriteRegister+0x40>)
 8006dba:	f7fb ffc9 	bl	8002d50 <HAL_SUBGHZ_WriteRegisters>
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f383 8810 	msr	PRIMASK, r3
}
 8006dc8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006dca:	bf00      	nop
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000084 	.word	0x20000084

08006dd8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de2:	f3ef 8310 	mrs	r3, PRIMASK
 8006de6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006de8:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 8006dea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006dec:	b672      	cpsid	i
}
 8006dee:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8006df0:	f107 020b 	add.w	r2, r7, #11
 8006df4:	88f9      	ldrh	r1, [r7, #6]
 8006df6:	2301      	movs	r3, #1
 8006df8:	4806      	ldr	r0, [pc, #24]	@ (8006e14 <SUBGRF_ReadRegister+0x3c>)
 8006dfa:	f7fc f808 	bl	8002e0e <HAL_SUBGHZ_ReadRegisters>
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f383 8810 	msr	PRIMASK, r3
}
 8006e08:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 8006e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20000084 	.word	0x20000084

08006e18 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	6039      	str	r1, [r7, #0]
 8006e22:	80fb      	strh	r3, [r7, #6]
 8006e24:	4613      	mov	r3, r2
 8006e26:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e28:	f3ef 8310 	mrs	r3, PRIMASK
 8006e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006e30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e32:	b672      	cpsid	i
}
 8006e34:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8006e36:	88bb      	ldrh	r3, [r7, #4]
 8006e38:	88f9      	ldrh	r1, [r7, #6]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	4806      	ldr	r0, [pc, #24]	@ (8006e58 <SUBGRF_WriteRegisters+0x40>)
 8006e3e:	f7fb ff87 	bl	8002d50 <HAL_SUBGHZ_WriteRegisters>
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f383 8810 	msr	PRIMASK, r3
}
 8006e4c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006e4e:	bf00      	nop
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000084 	.word	0x20000084

08006e5c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	6039      	str	r1, [r7, #0]
 8006e66:	80fb      	strh	r3, [r7, #6]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e70:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e72:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006e74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e76:	b672      	cpsid	i
}
 8006e78:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8006e7a:	88bb      	ldrh	r3, [r7, #4]
 8006e7c:	88f9      	ldrh	r1, [r7, #6]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	4806      	ldr	r0, [pc, #24]	@ (8006e9c <SUBGRF_ReadRegisters+0x40>)
 8006e82:	f7fb ffc4 	bl	8002e0e <HAL_SUBGHZ_ReadRegisters>
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f383 8810 	msr	PRIMASK, r3
}
 8006e90:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006e92:	bf00      	nop
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20000084 	.word	0x20000084

08006ea0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	6039      	str	r1, [r7, #0]
 8006eaa:	71fb      	strb	r3, [r7, #7]
 8006eac:	4613      	mov	r3, r2
 8006eae:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8006eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006eb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006eba:	b672      	cpsid	i
}
 8006ebc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8006ebe:	79bb      	ldrb	r3, [r7, #6]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	79f9      	ldrb	r1, [r7, #7]
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	4806      	ldr	r0, [pc, #24]	@ (8006ee0 <SUBGRF_WriteBuffer+0x40>)
 8006ec8:	f7fc f8b5 	bl	8003036 <HAL_SUBGHZ_WriteBuffer>
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f383 8810 	msr	PRIMASK, r3
}
 8006ed6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006ed8:	bf00      	nop
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000084 	.word	0x20000084

08006ee4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	6039      	str	r1, [r7, #0]
 8006eee:	71fb      	strb	r3, [r7, #7]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ef8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006efa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006efc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006efe:	b672      	cpsid	i
}
 8006f00:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8006f02:	79bb      	ldrb	r3, [r7, #6]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	79f9      	ldrb	r1, [r7, #7]
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	4806      	ldr	r0, [pc, #24]	@ (8006f24 <SUBGRF_ReadBuffer+0x40>)
 8006f0c:	f7fc f8e6 	bl	80030dc <HAL_SUBGHZ_ReadBuffer>
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f383 8810 	msr	PRIMASK, r3
}
 8006f1a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006f1c:	bf00      	nop
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20000084 	.word	0x20000084

08006f28 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	6039      	str	r1, [r7, #0]
 8006f32:	71fb      	strb	r3, [r7, #7]
 8006f34:	4613      	mov	r3, r2
 8006f36:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f38:	f3ef 8310 	mrs	r3, PRIMASK
 8006f3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006f40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f42:	b672      	cpsid	i
}
 8006f44:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8006f46:	88bb      	ldrh	r3, [r7, #4]
 8006f48:	79f9      	ldrb	r1, [r7, #7]
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	4806      	ldr	r0, [pc, #24]	@ (8006f68 <SUBGRF_WriteCommand+0x40>)
 8006f4e:	f7fb ffbf 	bl	8002ed0 <HAL_SUBGHZ_ExecSetCmd>
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f383 8810 	msr	PRIMASK, r3
}
 8006f5c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006f5e:	bf00      	nop
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000084 	.word	0x20000084

08006f6c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	6039      	str	r1, [r7, #0]
 8006f76:	71fb      	strb	r3, [r7, #7]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f80:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f82:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006f84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f86:	b672      	cpsid	i
}
 8006f88:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8006f8a:	88bb      	ldrh	r3, [r7, #4]
 8006f8c:	79f9      	ldrb	r1, [r7, #7]
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	4806      	ldr	r0, [pc, #24]	@ (8006fac <SUBGRF_ReadCommand+0x40>)
 8006f92:	f7fb fffc 	bl	8002f8e <HAL_SUBGHZ_ExecGetCmd>
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f383 8810 	msr	PRIMASK, r3
}
 8006fa0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006fa2:	bf00      	nop
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000084 	.word	0x20000084

08006fb0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	460a      	mov	r2, r1
 8006fba:	71fb      	strb	r3, [r7, #7]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8006fc4:	79bb      	ldrb	r3, [r7, #6]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d10d      	bne.n	8006fe6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d104      	bne.n	8006fda <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8006fd4:	2004      	movs	r0, #4
 8006fd6:	f000 f84e 	bl	8007076 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d107      	bne.n	8006ff0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	73fb      	strb	r3, [r7, #15]
 8006fe4:	e004      	b.n	8006ff0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8006fe6:	79bb      	ldrb	r3, [r7, #6]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8006fec:	2301      	movs	r3, #1
 8006fee:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 f9e3 	bl	80073be <RBI_ConfigRFSwitch>
}
 8006ff8:	bf00      	nop
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800700a:	2301      	movs	r3, #1
 800700c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800700e:	f000 f9e3 	bl	80073d8 <RBI_GetTxConfig>
 8007012:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d016      	beq.n	8007048 <SUBGRF_SetRfTxPower+0x48>
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b02      	cmp	r3, #2
 800701e:	dc16      	bgt.n	800704e <SUBGRF_SetRfTxPower+0x4e>
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <SUBGRF_SetRfTxPower+0x2e>
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d00a      	beq.n	8007042 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800702c:	e00f      	b.n	800704e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800702e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007032:	2b0f      	cmp	r3, #15
 8007034:	dd02      	ble.n	800703c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8007036:	2302      	movs	r3, #2
 8007038:	73fb      	strb	r3, [r7, #15]
            break;
 800703a:	e009      	b.n	8007050 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800703c:	2301      	movs	r3, #1
 800703e:	73fb      	strb	r3, [r7, #15]
            break;
 8007040:	e006      	b.n	8007050 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8007042:	2301      	movs	r3, #1
 8007044:	73fb      	strb	r3, [r7, #15]
            break;
 8007046:	e003      	b.n	8007050 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8007048:	2302      	movs	r3, #2
 800704a:	73fb      	strb	r3, [r7, #15]
            break;
 800704c:	e000      	b.n	8007050 <SUBGRF_SetRfTxPower+0x50>
            break;
 800704e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8007050:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	2202      	movs	r2, #2
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff fbb9 	bl	80067d0 <SUBGRF_SetTxParams>

    return paSelect;
 800705e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800706c:	2301      	movs	r3, #1
}
 800706e:	4618      	mov	r0, r3
 8007070:	46bd      	mov	sp, r7
 8007072:	bc80      	pop	{r7}
 8007074:	4770      	bx	lr

08007076 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	4603      	mov	r3, r0
 800707e:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8007080:	f000 f9c0 	bl	8007404 <RBI_IsDCDC>
 8007084:	4603      	mov	r3, r0
 8007086:	2b01      	cmp	r3, #1
 8007088:	d112      	bne.n	80070b0 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800708a:	f640 1023 	movw	r0, #2339	@ 0x923
 800708e:	f7ff fea3 	bl	8006dd8 <SUBGRF_ReadRegister>
 8007092:	4603      	mov	r3, r0
 8007094:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8007096:	7bfb      	ldrb	r3, [r7, #15]
 8007098:	f023 0306 	bic.w	r3, r3, #6
 800709c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800709e:	7bfa      	ldrb	r2, [r7, #15]
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	4619      	mov	r1, r3
 80070a8:	f640 1023 	movw	r0, #2339	@ 0x923
 80070ac:	f7ff fe72 	bl	8006d94 <SUBGRF_WriteRegister>
  }
}
 80070b0:	bf00      	nop
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 80070c6:	231f      	movs	r3, #31
 80070c8:	e017      	b.n	80070fa <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
 80070ce:	e00f      	b.n	80070f0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007104 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80070d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d205      	bcs.n	80070ea <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	4a08      	ldr	r2, [pc, #32]	@ (8007104 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	4413      	add	r3, r2
 80070e6:	791b      	ldrb	r3, [r3, #4]
 80070e8:	e007      	b.n	80070fa <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	3301      	adds	r3, #1
 80070ee:	73fb      	strb	r3, [r7, #15]
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	2b15      	cmp	r3, #21
 80070f4:	d9ec      	bls.n	80070d0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 80070f6:	bf00      	nop
 80070f8:	e7fd      	b.n	80070f6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	bc80      	pop	{r7}
 8007102:	4770      	bx	lr
 8007104:	080088dc 	.word	0x080088dc

08007108 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08a      	sub	sp, #40	@ 0x28
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8007112:	4b35      	ldr	r3, [pc, #212]	@ (80071e8 <SUBGRF_GetCFO+0xe0>)
 8007114:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8007116:	f640 0007 	movw	r0, #2055	@ 0x807
 800711a:	f7ff fe5d 	bl	8006dd8 <SUBGRF_ReadRegister>
 800711e:	4603      	mov	r3, r0
 8007120:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8007122:	7ffb      	ldrb	r3, [r7, #31]
 8007124:	08db      	lsrs	r3, r3, #3
 8007126:	b2db      	uxtb	r3, r3
 8007128:	f003 0303 	and.w	r3, r3, #3
 800712c:	3328      	adds	r3, #40	@ 0x28
 800712e:	443b      	add	r3, r7
 8007130:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007134:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8007136:	7ffb      	ldrb	r3, [r7, #31]
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800713e:	7fba      	ldrb	r2, [r7, #30]
 8007140:	7f7b      	ldrb	r3, [r7, #29]
 8007142:	3301      	adds	r3, #1
 8007144:	fa02 f303 	lsl.w	r3, r2, r3
 8007148:	461a      	mov	r2, r3
 800714a:	4b28      	ldr	r3, [pc, #160]	@ (80071ec <SUBGRF_GetCFO+0xe4>)
 800714c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007150:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	fbb2 f3f3 	udiv	r3, r2, r3
 800715a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800715c:	2301      	movs	r3, #1
 800715e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8007162:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	fb02 f303 	mul.w	r3, r2, r3
 800716c:	2b07      	cmp	r3, #7
 800716e:	d802      	bhi.n	8007176 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8007170:	2302      	movs	r3, #2
 8007172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 8007176:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	fb02 f303 	mul.w	r3, r2, r3
 8007180:	2b03      	cmp	r3, #3
 8007182:	d802      	bhi.n	800718a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8007184:	2304      	movs	r3, #4
 8007186:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800718a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	fb02 f303 	mul.w	r3, r2, r3
 8007194:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8007196:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800719a:	f7ff fe1d 	bl	8006dd8 <SUBGRF_ReadRegister>
 800719e:	4603      	mov	r3, r0
 80071a0:	021b      	lsls	r3, r3, #8
 80071a2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80071a6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80071a8:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 80071ac:	f7ff fe14 	bl	8006dd8 <SUBGRF_ReadRegister>
 80071b0:	4603      	mov	r3, r0
 80071b2:	461a      	mov	r2, r3
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80071ca:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80071ce:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	095b      	lsrs	r3, r3, #5
 80071d4:	6a3a      	ldr	r2, [r7, #32]
 80071d6:	fb02 f303 	mul.w	r3, r2, r3
 80071da:	11da      	asrs	r2, r3, #7
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	601a      	str	r2, [r3, #0]
}
 80071e0:	bf00      	nop
 80071e2:	3728      	adds	r7, #40	@ 0x28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	0c0a0804 	.word	0x0c0a0804
 80071ec:	01e84800 	.word	0x01e84800

080071f0 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 8007202:	f04f 33ff 	mov.w	r3, #4294967295
 8007206:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8007208:	697b      	ldr	r3, [r7, #20]
}
 800720a:	4618      	mov	r0, r3
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	bc80      	pop	{r7}
 8007212:	4770      	bx	lr

08007214 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	4603      	mov	r3, r0
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8007226:	f04f 33ff 	mov.w	r3, #4294967295
 800722a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800722c:	697b      	ldr	r3, [r7, #20]
}
 800722e:	4618      	mov	r0, r3
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	bc80      	pop	{r7}
 8007236:	4770      	bx	lr

08007238 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8007244:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr

08007252 <RFW_DeInit>:

void RFW_DeInit( void )
{
 8007252:	b480      	push	{r7}
 8007254:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8007256:	bf00      	nop
 8007258:	46bd      	mov	sp, r7
 800725a:	bc80      	pop	{r7}
 800725c:	4770      	bx	lr

0800725e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800725e:	b480      	push	{r7}
 8007260:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8007262:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8007264:	4618      	mov	r0, r3
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr

0800726c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800726c:	b480      	push	{r7}
 800726e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8007270:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8007272:	4618      	mov	r0, r3
 8007274:	46bd      	mov	sp, r7
 8007276:	bc80      	pop	{r7}
 8007278:	4770      	bx	lr

0800727a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	4603      	mov	r3, r0
 8007282:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr

0800728e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800728e:	b480      	push	{r7}
 8007290:	b087      	sub	sp, #28
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	460b      	mov	r3, r1
 8007298:	607a      	str	r2, [r7, #4]
 800729a:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800729c:	f04f 33ff 	mov.w	r3, #4294967295
 80072a0:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 80072a2:	697b      	ldr	r3, [r7, #20]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	371c      	adds	r7, #28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bc80      	pop	{r7}
 80072ac:	4770      	bx	lr

080072ae <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 80072ae:	b480      	push	{r7}
 80072b0:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 80072b2:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bc80      	pop	{r7}
 80072bc:	4770      	bx	lr

080072be <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 80072be:	b480      	push	{r7}
 80072c0:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 80072c2:	bf00      	nop
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr

080072ca <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 80072ca:	b480      	push	{r7}
 80072cc:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 80072ce:	bf00      	nop
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr

080072d6 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 80072d6:	b480      	push	{r7}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	4603      	mov	r3, r0
 80072de:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr

080072ea <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 80072ee:	f7f9 fc15 	bl	8000b1c <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 80072f2:	f000 f809 	bl	8007308 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 80072f6:	bf00      	nop
 80072f8:	bd80      	pop	{r7, pc}

080072fa <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 80072fa:	b480      	push	{r7}
 80072fc:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 80072fe:	bf00      	nop
 8007300:	46bd      	mov	sp, r7
 8007302:	bc80      	pop	{r7}
 8007304:	4770      	bx	lr
	...

08007308 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800730c:	4b0a      	ldr	r3, [pc, #40]	@ (8007338 <SubghzApp_Init+0x30>)
 800730e:	4a0b      	ldr	r2, [pc, #44]	@ (800733c <SubghzApp_Init+0x34>)
 8007310:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8007312:	4b09      	ldr	r3, [pc, #36]	@ (8007338 <SubghzApp_Init+0x30>)
 8007314:	4a0a      	ldr	r2, [pc, #40]	@ (8007340 <SubghzApp_Init+0x38>)
 8007316:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8007318:	4b07      	ldr	r3, [pc, #28]	@ (8007338 <SubghzApp_Init+0x30>)
 800731a:	4a0a      	ldr	r2, [pc, #40]	@ (8007344 <SubghzApp_Init+0x3c>)
 800731c:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800731e:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <SubghzApp_Init+0x30>)
 8007320:	4a09      	ldr	r2, [pc, #36]	@ (8007348 <SubghzApp_Init+0x40>)
 8007322:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8007324:	4b04      	ldr	r3, [pc, #16]	@ (8007338 <SubghzApp_Init+0x30>)
 8007326:	4a09      	ldr	r2, [pc, #36]	@ (800734c <SubghzApp_Init+0x44>)
 8007328:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800732a:	4b09      	ldr	r3, [pc, #36]	@ (8007350 <SubghzApp_Init+0x48>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4802      	ldr	r0, [pc, #8]	@ (8007338 <SubghzApp_Init+0x30>)
 8007330:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 8007332:	bf00      	nop
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20000364 	.word	0x20000364
 800733c:	08007355 	.word	0x08007355
 8007340:	08007361 	.word	0x08007361
 8007344:	08007385 	.word	0x08007385
 8007348:	08007391 	.word	0x08007391
 800734c:	0800739d 	.word	0x0800739d
 8007350:	0800884c 	.word	0x0800884c

08007354 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 8007358:	bf00      	nop
 800735a:	46bd      	mov	sp, r7
 800735c:	bc80      	pop	{r7}
 800735e:	4770      	bx	lr

08007360 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	4608      	mov	r0, r1
 800736a:	4611      	mov	r1, r2
 800736c:	461a      	mov	r2, r3
 800736e:	4603      	mov	r3, r0
 8007370:	817b      	strh	r3, [r7, #10]
 8007372:	460b      	mov	r3, r1
 8007374:	813b      	strh	r3, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800737a:	bf00      	nop
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	bc80      	pop	{r7}
 8007382:	4770      	bx	lr

08007384 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 8007388:	bf00      	nop
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr

08007390 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 8007394:	bf00      	nop
 8007396:	46bd      	mov	sp, r7
 8007398:	bc80      	pop	{r7}
 800739a:	4770      	bx	lr

0800739c <OnRxError>:

static void OnRxError(void)
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 80073a0:	bf00      	nop
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bc80      	pop	{r7}
 80073a6:	4770      	bx	lr

080073a8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 80073b2:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bc80      	pop	{r7}
 80073bc:	4770      	bx	lr

080073be <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80073be:	b480      	push	{r7}
 80073c0:	b085      	sub	sp, #20
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	4603      	mov	r3, r0
 80073c6:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 80073cc:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bc80      	pop	{r7}
 80073d6:	4770      	bx	lr

080073d8 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 80073de:	2300      	movs	r3, #0
 80073e0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 80073e2:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bc80      	pop	{r7}
 80073ec:	4770      	bx	lr

080073ee <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 80073f4:	2301      	movs	r3, #1
 80073f6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 80073f8:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	bc80      	pop	{r7}
 8007402:	4770      	bx	lr

08007404 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800740a:	2301      	movs	r3, #1
 800740c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800740e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	bc80      	pop	{r7}
 8007418:	4770      	bx	lr

0800741a <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800741a:	b480      	push	{r7}
 800741c:	b085      	sub	sp, #20
 800741e:	af00      	add	r7, sp, #0
 8007420:	4603      	mov	r3, r0
 8007422:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d102      	bne.n	8007434 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800742e:	230f      	movs	r3, #15
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	e001      	b.n	8007438 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 8007434:	2316      	movs	r3, #22
 8007436:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8007438:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	bc80      	pop	{r7}
 8007442:	4770      	bx	lr

08007444 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	613b      	str	r3, [r7, #16]

  while( size-- )
 800745a:	e007      	b.n	800746c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	1c53      	adds	r3, r2, #1
 8007460:	613b      	str	r3, [r7, #16]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	1c59      	adds	r1, r3, #1
 8007466:	6179      	str	r1, [r7, #20]
 8007468:	7812      	ldrb	r2, [r2, #0]
 800746a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800746c:	88fb      	ldrh	r3, [r7, #6]
 800746e:	1e5a      	subs	r2, r3, #1
 8007470:	80fa      	strh	r2, [r7, #6]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1f2      	bne.n	800745c <UTIL_MEM_cpy_8+0x18>
    }
}
 8007476:	bf00      	nop
 8007478:	bf00      	nop
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr

08007482 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8007482:	b480      	push	{r7}
 8007484:	b085      	sub	sp, #20
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	70fb      	strb	r3, [r7, #3]
 800748e:	4613      	mov	r3, r2
 8007490:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8007496:	e004      	b.n	80074a2 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	60fa      	str	r2, [r7, #12]
 800749e:	78fa      	ldrb	r2, [r7, #3]
 80074a0:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80074a2:	883b      	ldrh	r3, [r7, #0]
 80074a4:	1e5a      	subs	r2, r3, #1
 80074a6:	803a      	strh	r2, [r7, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1f5      	bne.n	8007498 <UTIL_MEM_set_8+0x16>
  }
}
 80074ac:	bf00      	nop
 80074ae:	bf00      	nop
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr

080074b8 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	603b      	str	r3, [r7, #0]
 80074c4:	4613      	mov	r3, r2
 80074c6:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d023      	beq.n	8007516 <UTIL_TIMER_Create+0x5e>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d020      	beq.n	8007516 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80074da:	4b11      	ldr	r3, [pc, #68]	@ (8007520 <UTIL_TIMER_Create+0x68>)
 80074dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074de:	68b8      	ldr	r0, [r7, #8]
 80074e0:	4798      	blx	r3
 80074e2:	4602      	mov	r2, r0
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	79fa      	ldrb	r2, [r7, #7]
 800750a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	e000      	b.n	8007518 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8007516:	2301      	movs	r3, #1
  }
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	080087f8 	.word	0x080087f8

08007524 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08a      	sub	sp, #40	@ 0x28
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d056      	beq.n	80075e6 <UTIL_TIMER_Start+0xc2>
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f929 	bl	8007790 <TimerExists>
 800753e:	4603      	mov	r3, r0
 8007540:	f083 0301 	eor.w	r3, r3, #1
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d04d      	beq.n	80075e6 <UTIL_TIMER_Start+0xc2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	7a5b      	ldrb	r3, [r3, #9]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d149      	bne.n	80075e6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007552:	f3ef 8310 	mrs	r3, PRIMASK
 8007556:	613b      	str	r3, [r7, #16]
  return(result);
 8007558:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800755a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800755c:	b672      	cpsid	i
}
 800755e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8007566:	4b24      	ldr	r3, [pc, #144]	@ (80075f8 <UTIL_TIMER_Start+0xd4>)
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	4798      	blx	r3
 800756c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800756e:	6a3a      	ldr	r2, [r7, #32]
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	429a      	cmp	r2, r3
 8007574:	d201      	bcs.n	800757a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a3a      	ldr	r2, [r7, #32]
 800757e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8007592:	4b1a      	ldr	r3, [pc, #104]	@ (80075fc <UTIL_TIMER_Start+0xd8>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d106      	bne.n	80075a8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800759a:	4b17      	ldr	r3, [pc, #92]	@ (80075f8 <UTIL_TIMER_Start+0xd4>)
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f96b 	bl	800787c <TimerInsertNewHeadTimer>
 80075a6:	e017      	b.n	80075d8 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80075a8:	4b13      	ldr	r3, [pc, #76]	@ (80075f8 <UTIL_TIMER_Start+0xd4>)
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	4798      	blx	r3
 80075ae:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	441a      	add	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4b0e      	ldr	r3, [pc, #56]	@ (80075fc <UTIL_TIMER_Start+0xd8>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d203      	bcs.n	80075d2 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f956 	bl	800787c <TimerInsertNewHeadTimer>
 80075d0:	e002      	b.n	80075d8 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f922 	bl	800781c <TimerInsertTimer>
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f383 8810 	msr	PRIMASK, r3
}
 80075e2:	bf00      	nop
  {
 80075e4:	e002      	b.n	80075ec <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 80075e6:	2301      	movs	r3, #1
 80075e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 80075ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3728      	adds	r7, #40	@ 0x28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	080087f8 	.word	0x080087f8
 80075fc:	20000380 	.word	0x20000380

08007600 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d05b      	beq.n	80076ca <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007612:	f3ef 8310 	mrs	r3, PRIMASK
 8007616:	60fb      	str	r3, [r7, #12]
  return(result);
 8007618:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800761a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800761c:	b672      	cpsid	i
}
 800761e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8007620:	4b2d      	ldr	r3, [pc, #180]	@ (80076d8 <UTIL_TIMER_Stop+0xd8>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8007626:	4b2c      	ldr	r3, [pc, #176]	@ (80076d8 <UTIL_TIMER_Stop+0xd8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8007632:	4b29      	ldr	r3, [pc, #164]	@ (80076d8 <UTIL_TIMER_Stop+0xd8>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d041      	beq.n	80076be <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8007640:	4b25      	ldr	r3, [pc, #148]	@ (80076d8 <UTIL_TIMER_Stop+0xd8>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	429a      	cmp	r2, r3
 8007648:	d134      	bne.n	80076b4 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800764a:	4b23      	ldr	r3, [pc, #140]	@ (80076d8 <UTIL_TIMER_Stop+0xd8>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2200      	movs	r2, #0
 8007650:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8007652:	4b21      	ldr	r3, [pc, #132]	@ (80076d8 <UTIL_TIMER_Stop+0xd8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00a      	beq.n	8007672 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800765c:	4b1e      	ldr	r3, [pc, #120]	@ (80076d8 <UTIL_TIMER_Stop+0xd8>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	4a1d      	ldr	r2, [pc, #116]	@ (80076d8 <UTIL_TIMER_Stop+0xd8>)
 8007664:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8007666:	4b1c      	ldr	r3, [pc, #112]	@ (80076d8 <UTIL_TIMER_Stop+0xd8>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 f8ac 	bl	80077c8 <TimerSetTimeout>
 8007670:	e023      	b.n	80076ba <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8007672:	4b1a      	ldr	r3, [pc, #104]	@ (80076dc <UTIL_TIMER_Stop+0xdc>)
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	4798      	blx	r3
            TimerListHead = NULL;
 8007678:	4b17      	ldr	r3, [pc, #92]	@ (80076d8 <UTIL_TIMER_Stop+0xd8>)
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	e01c      	b.n	80076ba <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	429a      	cmp	r2, r3
 8007686:	d110      	bne.n	80076aa <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d006      	beq.n	800769e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800769c:	e00d      	b.n	80076ba <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	615a      	str	r2, [r3, #20]
            break;
 80076a8:	e007      	b.n	80076ba <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e2      	bne.n	8007680 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	77fb      	strb	r3, [r7, #31]
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f383 8810 	msr	PRIMASK, r3
}
 80076c8:	e001      	b.n	80076ce <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 80076ca:	2301      	movs	r3, #1
 80076cc:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 80076ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3720      	adds	r7, #32
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000380 	.word	0x20000380
 80076dc:	080087f8 	.word	0x080087f8

080076e0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d102      	bne.n	80076fa <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 80076f4:	2301      	movs	r3, #1
 80076f6:	73fb      	strb	r3, [r7, #15]
 80076f8:	e014      	b.n	8007724 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80076fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007730 <UTIL_TIMER_SetPeriod+0x50>)
 80076fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fe:	6838      	ldr	r0, [r7, #0]
 8007700:	4798      	blx	r3
 8007702:	4602      	mov	r2, r0
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f841 	bl	8007790 <TimerExists>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d007      	beq.n	8007724 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7ff ff73 	bl	8007600 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff ff02 	bl	8007524 <UTIL_TIMER_Start>
 8007720:	4603      	mov	r3, r0
 8007722:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8007724:	7bfb      	ldrb	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	080087f8 	.word	0x080087f8

08007734 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800773a:	4b06      	ldr	r3, [pc, #24]	@ (8007754 <UTIL_TIMER_GetCurrentTime+0x20>)
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	4798      	blx	r3
 8007740:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8007742:	4b04      	ldr	r3, [pc, #16]	@ (8007754 <UTIL_TIMER_GetCurrentTime+0x20>)
 8007744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
 800774a:	4603      	mov	r3, r0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	080087f8 	.word	0x080087f8

08007758 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8007760:	4b0a      	ldr	r3, [pc, #40]	@ (800778c <UTIL_TIMER_GetElapsedTime+0x34>)
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	4798      	blx	r3
 8007766:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8007768:	4b08      	ldr	r3, [pc, #32]	@ (800778c <UTIL_TIMER_GetElapsedTime+0x34>)
 800776a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	4798      	blx	r3
 8007770:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8007772:	4b06      	ldr	r3, [pc, #24]	@ (800778c <UTIL_TIMER_GetElapsedTime+0x34>)
 8007774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007776:	68f9      	ldr	r1, [r7, #12]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	1a8a      	subs	r2, r1, r2
 800777c:	4610      	mov	r0, r2
 800777e:	4798      	blx	r3
 8007780:	4603      	mov	r3, r0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	080087f8 	.word	0x080087f8

08007790 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007798:	4b0a      	ldr	r3, [pc, #40]	@ (80077c4 <TimerExists+0x34>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800779e:	e008      	b.n	80077b2 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d101      	bne.n	80077ac <TimerExists+0x1c>
    {
      return true;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e006      	b.n	80077ba <TimerExists+0x2a>
    }
    cur = cur->Next;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1f3      	bne.n	80077a0 <TimerExists+0x10>
  }
  return false;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	bc80      	pop	{r7}
 80077c2:	4770      	bx	lr
 80077c4:	20000380 	.word	0x20000380

080077c8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80077c8:	b590      	push	{r4, r7, lr}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80077d0:	4b11      	ldr	r3, [pc, #68]	@ (8007818 <TimerSetTimeout+0x50>)
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	4798      	blx	r3
 80077d6:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681c      	ldr	r4, [r3, #0]
 80077e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007818 <TimerSetTimeout+0x50>)
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	4798      	blx	r3
 80077e8:	4602      	mov	r2, r0
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	4413      	add	r3, r2
 80077ee:	429c      	cmp	r4, r3
 80077f0:	d207      	bcs.n	8007802 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80077f2:	4b09      	ldr	r3, [pc, #36]	@ (8007818 <TimerSetTimeout+0x50>)
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	4798      	blx	r3
 80077f8:	4602      	mov	r2, r0
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	441a      	add	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8007802:	4b05      	ldr	r3, [pc, #20]	@ (8007818 <TimerSetTimeout+0x50>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6812      	ldr	r2, [r2, #0]
 800780a:	4610      	mov	r0, r2
 800780c:	4798      	blx	r3
}
 800780e:	bf00      	nop
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	bd90      	pop	{r4, r7, pc}
 8007816:	bf00      	nop
 8007818:	080087f8 	.word	0x080087f8

0800781c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007824:	4b14      	ldr	r3, [pc, #80]	@ (8007878 <TimerInsertTimer+0x5c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800782a:	4b13      	ldr	r3, [pc, #76]	@ (8007878 <TimerInsertTimer+0x5c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8007832:	e012      	b.n	800785a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	429a      	cmp	r2, r3
 800783e:	d905      	bls.n	800784c <TimerInsertTimer+0x30>
    {
        cur = next;
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	60bb      	str	r3, [r7, #8]
 800784a:	e006      	b.n	800785a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	615a      	str	r2, [r3, #20]
        return;
 8007858:	e009      	b.n	800786e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e8      	bne.n	8007834 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	615a      	str	r2, [r3, #20]
}
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	20000380 	.word	0x20000380

0800787c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007884:	4b0b      	ldr	r3, [pc, #44]	@ (80078b4 <TimerInsertNewHeadTimer+0x38>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800789c:	4a05      	ldr	r2, [pc, #20]	@ (80078b4 <TimerInsertNewHeadTimer+0x38>)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 80078a2:	4b04      	ldr	r3, [pc, #16]	@ (80078b4 <TimerInsertNewHeadTimer+0x38>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff ff8e 	bl	80077c8 <TimerSetTimeout>
}
 80078ac:	bf00      	nop
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	20000380 	.word	0x20000380

080078b8 <std>:
 80078b8:	2300      	movs	r3, #0
 80078ba:	b510      	push	{r4, lr}
 80078bc:	4604      	mov	r4, r0
 80078be:	e9c0 3300 	strd	r3, r3, [r0]
 80078c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078c6:	6083      	str	r3, [r0, #8]
 80078c8:	8181      	strh	r1, [r0, #12]
 80078ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80078cc:	81c2      	strh	r2, [r0, #14]
 80078ce:	6183      	str	r3, [r0, #24]
 80078d0:	4619      	mov	r1, r3
 80078d2:	2208      	movs	r2, #8
 80078d4:	305c      	adds	r0, #92	@ 0x5c
 80078d6:	f000 f906 	bl	8007ae6 <memset>
 80078da:	4b0d      	ldr	r3, [pc, #52]	@ (8007910 <std+0x58>)
 80078dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80078de:	4b0d      	ldr	r3, [pc, #52]	@ (8007914 <std+0x5c>)
 80078e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80078e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007918 <std+0x60>)
 80078e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80078e6:	4b0d      	ldr	r3, [pc, #52]	@ (800791c <std+0x64>)
 80078e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80078ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007920 <std+0x68>)
 80078ec:	6224      	str	r4, [r4, #32]
 80078ee:	429c      	cmp	r4, r3
 80078f0:	d006      	beq.n	8007900 <std+0x48>
 80078f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80078f6:	4294      	cmp	r4, r2
 80078f8:	d002      	beq.n	8007900 <std+0x48>
 80078fa:	33d0      	adds	r3, #208	@ 0xd0
 80078fc:	429c      	cmp	r4, r3
 80078fe:	d105      	bne.n	800790c <std+0x54>
 8007900:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007908:	f000 b966 	b.w	8007bd8 <__retarget_lock_init_recursive>
 800790c:	bd10      	pop	{r4, pc}
 800790e:	bf00      	nop
 8007910:	08007a61 	.word	0x08007a61
 8007914:	08007a83 	.word	0x08007a83
 8007918:	08007abb 	.word	0x08007abb
 800791c:	08007adf 	.word	0x08007adf
 8007920:	20000384 	.word	0x20000384

08007924 <stdio_exit_handler>:
 8007924:	4a02      	ldr	r2, [pc, #8]	@ (8007930 <stdio_exit_handler+0xc>)
 8007926:	4903      	ldr	r1, [pc, #12]	@ (8007934 <stdio_exit_handler+0x10>)
 8007928:	4803      	ldr	r0, [pc, #12]	@ (8007938 <stdio_exit_handler+0x14>)
 800792a:	f000 b869 	b.w	8007a00 <_fwalk_sglue>
 800792e:	bf00      	nop
 8007930:	2000000c 	.word	0x2000000c
 8007934:	08008469 	.word	0x08008469
 8007938:	2000001c 	.word	0x2000001c

0800793c <cleanup_stdio>:
 800793c:	6841      	ldr	r1, [r0, #4]
 800793e:	4b0c      	ldr	r3, [pc, #48]	@ (8007970 <cleanup_stdio+0x34>)
 8007940:	4299      	cmp	r1, r3
 8007942:	b510      	push	{r4, lr}
 8007944:	4604      	mov	r4, r0
 8007946:	d001      	beq.n	800794c <cleanup_stdio+0x10>
 8007948:	f000 fd8e 	bl	8008468 <_fflush_r>
 800794c:	68a1      	ldr	r1, [r4, #8]
 800794e:	4b09      	ldr	r3, [pc, #36]	@ (8007974 <cleanup_stdio+0x38>)
 8007950:	4299      	cmp	r1, r3
 8007952:	d002      	beq.n	800795a <cleanup_stdio+0x1e>
 8007954:	4620      	mov	r0, r4
 8007956:	f000 fd87 	bl	8008468 <_fflush_r>
 800795a:	68e1      	ldr	r1, [r4, #12]
 800795c:	4b06      	ldr	r3, [pc, #24]	@ (8007978 <cleanup_stdio+0x3c>)
 800795e:	4299      	cmp	r1, r3
 8007960:	d004      	beq.n	800796c <cleanup_stdio+0x30>
 8007962:	4620      	mov	r0, r4
 8007964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007968:	f000 bd7e 	b.w	8008468 <_fflush_r>
 800796c:	bd10      	pop	{r4, pc}
 800796e:	bf00      	nop
 8007970:	20000384 	.word	0x20000384
 8007974:	200003ec 	.word	0x200003ec
 8007978:	20000454 	.word	0x20000454

0800797c <global_stdio_init.part.0>:
 800797c:	b510      	push	{r4, lr}
 800797e:	4b0b      	ldr	r3, [pc, #44]	@ (80079ac <global_stdio_init.part.0+0x30>)
 8007980:	4c0b      	ldr	r4, [pc, #44]	@ (80079b0 <global_stdio_init.part.0+0x34>)
 8007982:	4a0c      	ldr	r2, [pc, #48]	@ (80079b4 <global_stdio_init.part.0+0x38>)
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	4620      	mov	r0, r4
 8007988:	2200      	movs	r2, #0
 800798a:	2104      	movs	r1, #4
 800798c:	f7ff ff94 	bl	80078b8 <std>
 8007990:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007994:	2201      	movs	r2, #1
 8007996:	2109      	movs	r1, #9
 8007998:	f7ff ff8e 	bl	80078b8 <std>
 800799c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079a0:	2202      	movs	r2, #2
 80079a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a6:	2112      	movs	r1, #18
 80079a8:	f7ff bf86 	b.w	80078b8 <std>
 80079ac:	200004bc 	.word	0x200004bc
 80079b0:	20000384 	.word	0x20000384
 80079b4:	08007925 	.word	0x08007925

080079b8 <__sfp_lock_acquire>:
 80079b8:	4801      	ldr	r0, [pc, #4]	@ (80079c0 <__sfp_lock_acquire+0x8>)
 80079ba:	f000 b90e 	b.w	8007bda <__retarget_lock_acquire_recursive>
 80079be:	bf00      	nop
 80079c0:	200004c5 	.word	0x200004c5

080079c4 <__sfp_lock_release>:
 80079c4:	4801      	ldr	r0, [pc, #4]	@ (80079cc <__sfp_lock_release+0x8>)
 80079c6:	f000 b909 	b.w	8007bdc <__retarget_lock_release_recursive>
 80079ca:	bf00      	nop
 80079cc:	200004c5 	.word	0x200004c5

080079d0 <__sinit>:
 80079d0:	b510      	push	{r4, lr}
 80079d2:	4604      	mov	r4, r0
 80079d4:	f7ff fff0 	bl	80079b8 <__sfp_lock_acquire>
 80079d8:	6a23      	ldr	r3, [r4, #32]
 80079da:	b11b      	cbz	r3, 80079e4 <__sinit+0x14>
 80079dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e0:	f7ff bff0 	b.w	80079c4 <__sfp_lock_release>
 80079e4:	4b04      	ldr	r3, [pc, #16]	@ (80079f8 <__sinit+0x28>)
 80079e6:	6223      	str	r3, [r4, #32]
 80079e8:	4b04      	ldr	r3, [pc, #16]	@ (80079fc <__sinit+0x2c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1f5      	bne.n	80079dc <__sinit+0xc>
 80079f0:	f7ff ffc4 	bl	800797c <global_stdio_init.part.0>
 80079f4:	e7f2      	b.n	80079dc <__sinit+0xc>
 80079f6:	bf00      	nop
 80079f8:	0800793d 	.word	0x0800793d
 80079fc:	200004bc 	.word	0x200004bc

08007a00 <_fwalk_sglue>:
 8007a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a04:	4607      	mov	r7, r0
 8007a06:	4688      	mov	r8, r1
 8007a08:	4614      	mov	r4, r2
 8007a0a:	2600      	movs	r6, #0
 8007a0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a10:	f1b9 0901 	subs.w	r9, r9, #1
 8007a14:	d505      	bpl.n	8007a22 <_fwalk_sglue+0x22>
 8007a16:	6824      	ldr	r4, [r4, #0]
 8007a18:	2c00      	cmp	r4, #0
 8007a1a:	d1f7      	bne.n	8007a0c <_fwalk_sglue+0xc>
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a22:	89ab      	ldrh	r3, [r5, #12]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d907      	bls.n	8007a38 <_fwalk_sglue+0x38>
 8007a28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	d003      	beq.n	8007a38 <_fwalk_sglue+0x38>
 8007a30:	4629      	mov	r1, r5
 8007a32:	4638      	mov	r0, r7
 8007a34:	47c0      	blx	r8
 8007a36:	4306      	orrs	r6, r0
 8007a38:	3568      	adds	r5, #104	@ 0x68
 8007a3a:	e7e9      	b.n	8007a10 <_fwalk_sglue+0x10>

08007a3c <iprintf>:
 8007a3c:	b40f      	push	{r0, r1, r2, r3}
 8007a3e:	b507      	push	{r0, r1, r2, lr}
 8007a40:	4906      	ldr	r1, [pc, #24]	@ (8007a5c <iprintf+0x20>)
 8007a42:	ab04      	add	r3, sp, #16
 8007a44:	6808      	ldr	r0, [r1, #0]
 8007a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a4a:	6881      	ldr	r1, [r0, #8]
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	f000 f9e7 	bl	8007e20 <_vfiprintf_r>
 8007a52:	b003      	add	sp, #12
 8007a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a58:	b004      	add	sp, #16
 8007a5a:	4770      	bx	lr
 8007a5c:	20000018 	.word	0x20000018

08007a60 <__sread>:
 8007a60:	b510      	push	{r4, lr}
 8007a62:	460c      	mov	r4, r1
 8007a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a68:	f000 f868 	bl	8007b3c <_read_r>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	bfab      	itete	ge
 8007a70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a72:	89a3      	ldrhlt	r3, [r4, #12]
 8007a74:	181b      	addge	r3, r3, r0
 8007a76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a7a:	bfac      	ite	ge
 8007a7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a7e:	81a3      	strhlt	r3, [r4, #12]
 8007a80:	bd10      	pop	{r4, pc}

08007a82 <__swrite>:
 8007a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a86:	461f      	mov	r7, r3
 8007a88:	898b      	ldrh	r3, [r1, #12]
 8007a8a:	05db      	lsls	r3, r3, #23
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	4616      	mov	r6, r2
 8007a92:	d505      	bpl.n	8007aa0 <__swrite+0x1e>
 8007a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a98:	2302      	movs	r3, #2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f000 f83c 	bl	8007b18 <_lseek_r>
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007aaa:	81a3      	strh	r3, [r4, #12]
 8007aac:	4632      	mov	r2, r6
 8007aae:	463b      	mov	r3, r7
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab6:	f000 b853 	b.w	8007b60 <_write_r>

08007aba <__sseek>:
 8007aba:	b510      	push	{r4, lr}
 8007abc:	460c      	mov	r4, r1
 8007abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac2:	f000 f829 	bl	8007b18 <_lseek_r>
 8007ac6:	1c43      	adds	r3, r0, #1
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	bf15      	itete	ne
 8007acc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ace:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ad2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ad6:	81a3      	strheq	r3, [r4, #12]
 8007ad8:	bf18      	it	ne
 8007ada:	81a3      	strhne	r3, [r4, #12]
 8007adc:	bd10      	pop	{r4, pc}

08007ade <__sclose>:
 8007ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae2:	f000 b809 	b.w	8007af8 <_close_r>

08007ae6 <memset>:
 8007ae6:	4402      	add	r2, r0
 8007ae8:	4603      	mov	r3, r0
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d100      	bne.n	8007af0 <memset+0xa>
 8007aee:	4770      	bx	lr
 8007af0:	f803 1b01 	strb.w	r1, [r3], #1
 8007af4:	e7f9      	b.n	8007aea <memset+0x4>
	...

08007af8 <_close_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4d06      	ldr	r5, [pc, #24]	@ (8007b14 <_close_r+0x1c>)
 8007afc:	2300      	movs	r3, #0
 8007afe:	4604      	mov	r4, r0
 8007b00:	4608      	mov	r0, r1
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	f7f9 f849 	bl	8000b9a <_close>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_close_r+0x1a>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_close_r+0x1a>
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	200004c0 	.word	0x200004c0

08007b18 <_lseek_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4d07      	ldr	r5, [pc, #28]	@ (8007b38 <_lseek_r+0x20>)
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	4608      	mov	r0, r1
 8007b20:	4611      	mov	r1, r2
 8007b22:	2200      	movs	r2, #0
 8007b24:	602a      	str	r2, [r5, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	f7f9 f85b 	bl	8000be2 <_lseek>
 8007b2c:	1c43      	adds	r3, r0, #1
 8007b2e:	d102      	bne.n	8007b36 <_lseek_r+0x1e>
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	b103      	cbz	r3, 8007b36 <_lseek_r+0x1e>
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	bd38      	pop	{r3, r4, r5, pc}
 8007b38:	200004c0 	.word	0x200004c0

08007b3c <_read_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4d07      	ldr	r5, [pc, #28]	@ (8007b5c <_read_r+0x20>)
 8007b40:	4604      	mov	r4, r0
 8007b42:	4608      	mov	r0, r1
 8007b44:	4611      	mov	r1, r2
 8007b46:	2200      	movs	r2, #0
 8007b48:	602a      	str	r2, [r5, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f7f8 ffec 	bl	8000b28 <_read>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d102      	bne.n	8007b5a <_read_r+0x1e>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	b103      	cbz	r3, 8007b5a <_read_r+0x1e>
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	200004c0 	.word	0x200004c0

08007b60 <_write_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d07      	ldr	r5, [pc, #28]	@ (8007b80 <_write_r+0x20>)
 8007b64:	4604      	mov	r4, r0
 8007b66:	4608      	mov	r0, r1
 8007b68:	4611      	mov	r1, r2
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	602a      	str	r2, [r5, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f7f8 fff7 	bl	8000b62 <_write>
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	d102      	bne.n	8007b7e <_write_r+0x1e>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	b103      	cbz	r3, 8007b7e <_write_r+0x1e>
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	bd38      	pop	{r3, r4, r5, pc}
 8007b80:	200004c0 	.word	0x200004c0

08007b84 <__errno>:
 8007b84:	4b01      	ldr	r3, [pc, #4]	@ (8007b8c <__errno+0x8>)
 8007b86:	6818      	ldr	r0, [r3, #0]
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	20000018 	.word	0x20000018

08007b90 <__libc_init_array>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	4d0d      	ldr	r5, [pc, #52]	@ (8007bc8 <__libc_init_array+0x38>)
 8007b94:	4c0d      	ldr	r4, [pc, #52]	@ (8007bcc <__libc_init_array+0x3c>)
 8007b96:	1b64      	subs	r4, r4, r5
 8007b98:	10a4      	asrs	r4, r4, #2
 8007b9a:	2600      	movs	r6, #0
 8007b9c:	42a6      	cmp	r6, r4
 8007b9e:	d109      	bne.n	8007bb4 <__libc_init_array+0x24>
 8007ba0:	4d0b      	ldr	r5, [pc, #44]	@ (8007bd0 <__libc_init_array+0x40>)
 8007ba2:	4c0c      	ldr	r4, [pc, #48]	@ (8007bd4 <__libc_init_array+0x44>)
 8007ba4:	f000 fdb0 	bl	8008708 <_init>
 8007ba8:	1b64      	subs	r4, r4, r5
 8007baa:	10a4      	asrs	r4, r4, #2
 8007bac:	2600      	movs	r6, #0
 8007bae:	42a6      	cmp	r6, r4
 8007bb0:	d105      	bne.n	8007bbe <__libc_init_array+0x2e>
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb8:	4798      	blx	r3
 8007bba:	3601      	adds	r6, #1
 8007bbc:	e7ee      	b.n	8007b9c <__libc_init_array+0xc>
 8007bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc2:	4798      	blx	r3
 8007bc4:	3601      	adds	r6, #1
 8007bc6:	e7f2      	b.n	8007bae <__libc_init_array+0x1e>
 8007bc8:	080089c8 	.word	0x080089c8
 8007bcc:	080089c8 	.word	0x080089c8
 8007bd0:	080089c8 	.word	0x080089c8
 8007bd4:	080089cc 	.word	0x080089cc

08007bd8 <__retarget_lock_init_recursive>:
 8007bd8:	4770      	bx	lr

08007bda <__retarget_lock_acquire_recursive>:
 8007bda:	4770      	bx	lr

08007bdc <__retarget_lock_release_recursive>:
 8007bdc:	4770      	bx	lr
	...

08007be0 <_free_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4605      	mov	r5, r0
 8007be4:	2900      	cmp	r1, #0
 8007be6:	d041      	beq.n	8007c6c <_free_r+0x8c>
 8007be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bec:	1f0c      	subs	r4, r1, #4
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	bfb8      	it	lt
 8007bf2:	18e4      	addlt	r4, r4, r3
 8007bf4:	f000 f8e0 	bl	8007db8 <__malloc_lock>
 8007bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8007c70 <_free_r+0x90>)
 8007bfa:	6813      	ldr	r3, [r2, #0]
 8007bfc:	b933      	cbnz	r3, 8007c0c <_free_r+0x2c>
 8007bfe:	6063      	str	r3, [r4, #4]
 8007c00:	6014      	str	r4, [r2, #0]
 8007c02:	4628      	mov	r0, r5
 8007c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c08:	f000 b8dc 	b.w	8007dc4 <__malloc_unlock>
 8007c0c:	42a3      	cmp	r3, r4
 8007c0e:	d908      	bls.n	8007c22 <_free_r+0x42>
 8007c10:	6820      	ldr	r0, [r4, #0]
 8007c12:	1821      	adds	r1, r4, r0
 8007c14:	428b      	cmp	r3, r1
 8007c16:	bf01      	itttt	eq
 8007c18:	6819      	ldreq	r1, [r3, #0]
 8007c1a:	685b      	ldreq	r3, [r3, #4]
 8007c1c:	1809      	addeq	r1, r1, r0
 8007c1e:	6021      	streq	r1, [r4, #0]
 8007c20:	e7ed      	b.n	8007bfe <_free_r+0x1e>
 8007c22:	461a      	mov	r2, r3
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	b10b      	cbz	r3, 8007c2c <_free_r+0x4c>
 8007c28:	42a3      	cmp	r3, r4
 8007c2a:	d9fa      	bls.n	8007c22 <_free_r+0x42>
 8007c2c:	6811      	ldr	r1, [r2, #0]
 8007c2e:	1850      	adds	r0, r2, r1
 8007c30:	42a0      	cmp	r0, r4
 8007c32:	d10b      	bne.n	8007c4c <_free_r+0x6c>
 8007c34:	6820      	ldr	r0, [r4, #0]
 8007c36:	4401      	add	r1, r0
 8007c38:	1850      	adds	r0, r2, r1
 8007c3a:	4283      	cmp	r3, r0
 8007c3c:	6011      	str	r1, [r2, #0]
 8007c3e:	d1e0      	bne.n	8007c02 <_free_r+0x22>
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	6053      	str	r3, [r2, #4]
 8007c46:	4408      	add	r0, r1
 8007c48:	6010      	str	r0, [r2, #0]
 8007c4a:	e7da      	b.n	8007c02 <_free_r+0x22>
 8007c4c:	d902      	bls.n	8007c54 <_free_r+0x74>
 8007c4e:	230c      	movs	r3, #12
 8007c50:	602b      	str	r3, [r5, #0]
 8007c52:	e7d6      	b.n	8007c02 <_free_r+0x22>
 8007c54:	6820      	ldr	r0, [r4, #0]
 8007c56:	1821      	adds	r1, r4, r0
 8007c58:	428b      	cmp	r3, r1
 8007c5a:	bf04      	itt	eq
 8007c5c:	6819      	ldreq	r1, [r3, #0]
 8007c5e:	685b      	ldreq	r3, [r3, #4]
 8007c60:	6063      	str	r3, [r4, #4]
 8007c62:	bf04      	itt	eq
 8007c64:	1809      	addeq	r1, r1, r0
 8007c66:	6021      	streq	r1, [r4, #0]
 8007c68:	6054      	str	r4, [r2, #4]
 8007c6a:	e7ca      	b.n	8007c02 <_free_r+0x22>
 8007c6c:	bd38      	pop	{r3, r4, r5, pc}
 8007c6e:	bf00      	nop
 8007c70:	200004cc 	.word	0x200004cc

08007c74 <sbrk_aligned>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	4e0f      	ldr	r6, [pc, #60]	@ (8007cb4 <sbrk_aligned+0x40>)
 8007c78:	460c      	mov	r4, r1
 8007c7a:	6831      	ldr	r1, [r6, #0]
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	b911      	cbnz	r1, 8007c86 <sbrk_aligned+0x12>
 8007c80:	f000 fcae 	bl	80085e0 <_sbrk_r>
 8007c84:	6030      	str	r0, [r6, #0]
 8007c86:	4621      	mov	r1, r4
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f000 fca9 	bl	80085e0 <_sbrk_r>
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	d103      	bne.n	8007c9a <sbrk_aligned+0x26>
 8007c92:	f04f 34ff 	mov.w	r4, #4294967295
 8007c96:	4620      	mov	r0, r4
 8007c98:	bd70      	pop	{r4, r5, r6, pc}
 8007c9a:	1cc4      	adds	r4, r0, #3
 8007c9c:	f024 0403 	bic.w	r4, r4, #3
 8007ca0:	42a0      	cmp	r0, r4
 8007ca2:	d0f8      	beq.n	8007c96 <sbrk_aligned+0x22>
 8007ca4:	1a21      	subs	r1, r4, r0
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 fc9a 	bl	80085e0 <_sbrk_r>
 8007cac:	3001      	adds	r0, #1
 8007cae:	d1f2      	bne.n	8007c96 <sbrk_aligned+0x22>
 8007cb0:	e7ef      	b.n	8007c92 <sbrk_aligned+0x1e>
 8007cb2:	bf00      	nop
 8007cb4:	200004c8 	.word	0x200004c8

08007cb8 <_malloc_r>:
 8007cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cbc:	1ccd      	adds	r5, r1, #3
 8007cbe:	f025 0503 	bic.w	r5, r5, #3
 8007cc2:	3508      	adds	r5, #8
 8007cc4:	2d0c      	cmp	r5, #12
 8007cc6:	bf38      	it	cc
 8007cc8:	250c      	movcc	r5, #12
 8007cca:	2d00      	cmp	r5, #0
 8007ccc:	4606      	mov	r6, r0
 8007cce:	db01      	blt.n	8007cd4 <_malloc_r+0x1c>
 8007cd0:	42a9      	cmp	r1, r5
 8007cd2:	d904      	bls.n	8007cde <_malloc_r+0x26>
 8007cd4:	230c      	movs	r3, #12
 8007cd6:	6033      	str	r3, [r6, #0]
 8007cd8:	2000      	movs	r0, #0
 8007cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007db4 <_malloc_r+0xfc>
 8007ce2:	f000 f869 	bl	8007db8 <__malloc_lock>
 8007ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8007cea:	461c      	mov	r4, r3
 8007cec:	bb44      	cbnz	r4, 8007d40 <_malloc_r+0x88>
 8007cee:	4629      	mov	r1, r5
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f7ff ffbf 	bl	8007c74 <sbrk_aligned>
 8007cf6:	1c43      	adds	r3, r0, #1
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	d158      	bne.n	8007dae <_malloc_r+0xf6>
 8007cfc:	f8d8 4000 	ldr.w	r4, [r8]
 8007d00:	4627      	mov	r7, r4
 8007d02:	2f00      	cmp	r7, #0
 8007d04:	d143      	bne.n	8007d8e <_malloc_r+0xd6>
 8007d06:	2c00      	cmp	r4, #0
 8007d08:	d04b      	beq.n	8007da2 <_malloc_r+0xea>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	4630      	mov	r0, r6
 8007d10:	eb04 0903 	add.w	r9, r4, r3
 8007d14:	f000 fc64 	bl	80085e0 <_sbrk_r>
 8007d18:	4581      	cmp	r9, r0
 8007d1a:	d142      	bne.n	8007da2 <_malloc_r+0xea>
 8007d1c:	6821      	ldr	r1, [r4, #0]
 8007d1e:	1a6d      	subs	r5, r5, r1
 8007d20:	4629      	mov	r1, r5
 8007d22:	4630      	mov	r0, r6
 8007d24:	f7ff ffa6 	bl	8007c74 <sbrk_aligned>
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d03a      	beq.n	8007da2 <_malloc_r+0xea>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	442b      	add	r3, r5
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	f8d8 3000 	ldr.w	r3, [r8]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	bb62      	cbnz	r2, 8007d94 <_malloc_r+0xdc>
 8007d3a:	f8c8 7000 	str.w	r7, [r8]
 8007d3e:	e00f      	b.n	8007d60 <_malloc_r+0xa8>
 8007d40:	6822      	ldr	r2, [r4, #0]
 8007d42:	1b52      	subs	r2, r2, r5
 8007d44:	d420      	bmi.n	8007d88 <_malloc_r+0xd0>
 8007d46:	2a0b      	cmp	r2, #11
 8007d48:	d917      	bls.n	8007d7a <_malloc_r+0xc2>
 8007d4a:	1961      	adds	r1, r4, r5
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	6025      	str	r5, [r4, #0]
 8007d50:	bf18      	it	ne
 8007d52:	6059      	strne	r1, [r3, #4]
 8007d54:	6863      	ldr	r3, [r4, #4]
 8007d56:	bf08      	it	eq
 8007d58:	f8c8 1000 	streq.w	r1, [r8]
 8007d5c:	5162      	str	r2, [r4, r5]
 8007d5e:	604b      	str	r3, [r1, #4]
 8007d60:	4630      	mov	r0, r6
 8007d62:	f000 f82f 	bl	8007dc4 <__malloc_unlock>
 8007d66:	f104 000b 	add.w	r0, r4, #11
 8007d6a:	1d23      	adds	r3, r4, #4
 8007d6c:	f020 0007 	bic.w	r0, r0, #7
 8007d70:	1ac2      	subs	r2, r0, r3
 8007d72:	bf1c      	itt	ne
 8007d74:	1a1b      	subne	r3, r3, r0
 8007d76:	50a3      	strne	r3, [r4, r2]
 8007d78:	e7af      	b.n	8007cda <_malloc_r+0x22>
 8007d7a:	6862      	ldr	r2, [r4, #4]
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	bf0c      	ite	eq
 8007d80:	f8c8 2000 	streq.w	r2, [r8]
 8007d84:	605a      	strne	r2, [r3, #4]
 8007d86:	e7eb      	b.n	8007d60 <_malloc_r+0xa8>
 8007d88:	4623      	mov	r3, r4
 8007d8a:	6864      	ldr	r4, [r4, #4]
 8007d8c:	e7ae      	b.n	8007cec <_malloc_r+0x34>
 8007d8e:	463c      	mov	r4, r7
 8007d90:	687f      	ldr	r7, [r7, #4]
 8007d92:	e7b6      	b.n	8007d02 <_malloc_r+0x4a>
 8007d94:	461a      	mov	r2, r3
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	42a3      	cmp	r3, r4
 8007d9a:	d1fb      	bne.n	8007d94 <_malloc_r+0xdc>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	6053      	str	r3, [r2, #4]
 8007da0:	e7de      	b.n	8007d60 <_malloc_r+0xa8>
 8007da2:	230c      	movs	r3, #12
 8007da4:	6033      	str	r3, [r6, #0]
 8007da6:	4630      	mov	r0, r6
 8007da8:	f000 f80c 	bl	8007dc4 <__malloc_unlock>
 8007dac:	e794      	b.n	8007cd8 <_malloc_r+0x20>
 8007dae:	6005      	str	r5, [r0, #0]
 8007db0:	e7d6      	b.n	8007d60 <_malloc_r+0xa8>
 8007db2:	bf00      	nop
 8007db4:	200004cc 	.word	0x200004cc

08007db8 <__malloc_lock>:
 8007db8:	4801      	ldr	r0, [pc, #4]	@ (8007dc0 <__malloc_lock+0x8>)
 8007dba:	f7ff bf0e 	b.w	8007bda <__retarget_lock_acquire_recursive>
 8007dbe:	bf00      	nop
 8007dc0:	200004c4 	.word	0x200004c4

08007dc4 <__malloc_unlock>:
 8007dc4:	4801      	ldr	r0, [pc, #4]	@ (8007dcc <__malloc_unlock+0x8>)
 8007dc6:	f7ff bf09 	b.w	8007bdc <__retarget_lock_release_recursive>
 8007dca:	bf00      	nop
 8007dcc:	200004c4 	.word	0x200004c4

08007dd0 <__sfputc_r>:
 8007dd0:	6893      	ldr	r3, [r2, #8]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	b410      	push	{r4}
 8007dd8:	6093      	str	r3, [r2, #8]
 8007dda:	da07      	bge.n	8007dec <__sfputc_r+0x1c>
 8007ddc:	6994      	ldr	r4, [r2, #24]
 8007dde:	42a3      	cmp	r3, r4
 8007de0:	db01      	blt.n	8007de6 <__sfputc_r+0x16>
 8007de2:	290a      	cmp	r1, #10
 8007de4:	d102      	bne.n	8007dec <__sfputc_r+0x1c>
 8007de6:	bc10      	pop	{r4}
 8007de8:	f000 bb66 	b.w	80084b8 <__swbuf_r>
 8007dec:	6813      	ldr	r3, [r2, #0]
 8007dee:	1c58      	adds	r0, r3, #1
 8007df0:	6010      	str	r0, [r2, #0]
 8007df2:	7019      	strb	r1, [r3, #0]
 8007df4:	4608      	mov	r0, r1
 8007df6:	bc10      	pop	{r4}
 8007df8:	4770      	bx	lr

08007dfa <__sfputs_r>:
 8007dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	460f      	mov	r7, r1
 8007e00:	4614      	mov	r4, r2
 8007e02:	18d5      	adds	r5, r2, r3
 8007e04:	42ac      	cmp	r4, r5
 8007e06:	d101      	bne.n	8007e0c <__sfputs_r+0x12>
 8007e08:	2000      	movs	r0, #0
 8007e0a:	e007      	b.n	8007e1c <__sfputs_r+0x22>
 8007e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e10:	463a      	mov	r2, r7
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7ff ffdc 	bl	8007dd0 <__sfputc_r>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d1f3      	bne.n	8007e04 <__sfputs_r+0xa>
 8007e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e20 <_vfiprintf_r>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	460d      	mov	r5, r1
 8007e26:	b09d      	sub	sp, #116	@ 0x74
 8007e28:	4614      	mov	r4, r2
 8007e2a:	4698      	mov	r8, r3
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	b118      	cbz	r0, 8007e38 <_vfiprintf_r+0x18>
 8007e30:	6a03      	ldr	r3, [r0, #32]
 8007e32:	b90b      	cbnz	r3, 8007e38 <_vfiprintf_r+0x18>
 8007e34:	f7ff fdcc 	bl	80079d0 <__sinit>
 8007e38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e3a:	07d9      	lsls	r1, r3, #31
 8007e3c:	d405      	bmi.n	8007e4a <_vfiprintf_r+0x2a>
 8007e3e:	89ab      	ldrh	r3, [r5, #12]
 8007e40:	059a      	lsls	r2, r3, #22
 8007e42:	d402      	bmi.n	8007e4a <_vfiprintf_r+0x2a>
 8007e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e46:	f7ff fec8 	bl	8007bda <__retarget_lock_acquire_recursive>
 8007e4a:	89ab      	ldrh	r3, [r5, #12]
 8007e4c:	071b      	lsls	r3, r3, #28
 8007e4e:	d501      	bpl.n	8007e54 <_vfiprintf_r+0x34>
 8007e50:	692b      	ldr	r3, [r5, #16]
 8007e52:	b99b      	cbnz	r3, 8007e7c <_vfiprintf_r+0x5c>
 8007e54:	4629      	mov	r1, r5
 8007e56:	4630      	mov	r0, r6
 8007e58:	f000 fb6c 	bl	8008534 <__swsetup_r>
 8007e5c:	b170      	cbz	r0, 8007e7c <_vfiprintf_r+0x5c>
 8007e5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e60:	07dc      	lsls	r4, r3, #31
 8007e62:	d504      	bpl.n	8007e6e <_vfiprintf_r+0x4e>
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	b01d      	add	sp, #116	@ 0x74
 8007e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6e:	89ab      	ldrh	r3, [r5, #12]
 8007e70:	0598      	lsls	r0, r3, #22
 8007e72:	d4f7      	bmi.n	8007e64 <_vfiprintf_r+0x44>
 8007e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e76:	f7ff feb1 	bl	8007bdc <__retarget_lock_release_recursive>
 8007e7a:	e7f3      	b.n	8007e64 <_vfiprintf_r+0x44>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e80:	2320      	movs	r3, #32
 8007e82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e86:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e8a:	2330      	movs	r3, #48	@ 0x30
 8007e8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800803c <_vfiprintf_r+0x21c>
 8007e90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e94:	f04f 0901 	mov.w	r9, #1
 8007e98:	4623      	mov	r3, r4
 8007e9a:	469a      	mov	sl, r3
 8007e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ea0:	b10a      	cbz	r2, 8007ea6 <_vfiprintf_r+0x86>
 8007ea2:	2a25      	cmp	r2, #37	@ 0x25
 8007ea4:	d1f9      	bne.n	8007e9a <_vfiprintf_r+0x7a>
 8007ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eaa:	d00b      	beq.n	8007ec4 <_vfiprintf_r+0xa4>
 8007eac:	465b      	mov	r3, fp
 8007eae:	4622      	mov	r2, r4
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff ffa1 	bl	8007dfa <__sfputs_r>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	f000 80a7 	beq.w	800800c <_vfiprintf_r+0x1ec>
 8007ebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ec0:	445a      	add	r2, fp
 8007ec2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 809f 	beq.w	800800c <_vfiprintf_r+0x1ec>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ed8:	f10a 0a01 	add.w	sl, sl, #1
 8007edc:	9304      	str	r3, [sp, #16]
 8007ede:	9307      	str	r3, [sp, #28]
 8007ee0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ee4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ee6:	4654      	mov	r4, sl
 8007ee8:	2205      	movs	r2, #5
 8007eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eee:	4853      	ldr	r0, [pc, #332]	@ (800803c <_vfiprintf_r+0x21c>)
 8007ef0:	f7f8 f946 	bl	8000180 <memchr>
 8007ef4:	9a04      	ldr	r2, [sp, #16]
 8007ef6:	b9d8      	cbnz	r0, 8007f30 <_vfiprintf_r+0x110>
 8007ef8:	06d1      	lsls	r1, r2, #27
 8007efa:	bf44      	itt	mi
 8007efc:	2320      	movmi	r3, #32
 8007efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f02:	0713      	lsls	r3, r2, #28
 8007f04:	bf44      	itt	mi
 8007f06:	232b      	movmi	r3, #43	@ 0x2b
 8007f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f10:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f12:	d015      	beq.n	8007f40 <_vfiprintf_r+0x120>
 8007f14:	9a07      	ldr	r2, [sp, #28]
 8007f16:	4654      	mov	r4, sl
 8007f18:	2000      	movs	r0, #0
 8007f1a:	f04f 0c0a 	mov.w	ip, #10
 8007f1e:	4621      	mov	r1, r4
 8007f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f24:	3b30      	subs	r3, #48	@ 0x30
 8007f26:	2b09      	cmp	r3, #9
 8007f28:	d94b      	bls.n	8007fc2 <_vfiprintf_r+0x1a2>
 8007f2a:	b1b0      	cbz	r0, 8007f5a <_vfiprintf_r+0x13a>
 8007f2c:	9207      	str	r2, [sp, #28]
 8007f2e:	e014      	b.n	8007f5a <_vfiprintf_r+0x13a>
 8007f30:	eba0 0308 	sub.w	r3, r0, r8
 8007f34:	fa09 f303 	lsl.w	r3, r9, r3
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	9304      	str	r3, [sp, #16]
 8007f3c:	46a2      	mov	sl, r4
 8007f3e:	e7d2      	b.n	8007ee6 <_vfiprintf_r+0xc6>
 8007f40:	9b03      	ldr	r3, [sp, #12]
 8007f42:	1d19      	adds	r1, r3, #4
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	9103      	str	r1, [sp, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	bfbb      	ittet	lt
 8007f4c:	425b      	neglt	r3, r3
 8007f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f52:	9307      	strge	r3, [sp, #28]
 8007f54:	9307      	strlt	r3, [sp, #28]
 8007f56:	bfb8      	it	lt
 8007f58:	9204      	strlt	r2, [sp, #16]
 8007f5a:	7823      	ldrb	r3, [r4, #0]
 8007f5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f5e:	d10a      	bne.n	8007f76 <_vfiprintf_r+0x156>
 8007f60:	7863      	ldrb	r3, [r4, #1]
 8007f62:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f64:	d132      	bne.n	8007fcc <_vfiprintf_r+0x1ac>
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	1d1a      	adds	r2, r3, #4
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	9203      	str	r2, [sp, #12]
 8007f6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f72:	3402      	adds	r4, #2
 8007f74:	9305      	str	r3, [sp, #20]
 8007f76:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008040 <_vfiprintf_r+0x220>
 8007f7a:	7821      	ldrb	r1, [r4, #0]
 8007f7c:	2203      	movs	r2, #3
 8007f7e:	4650      	mov	r0, sl
 8007f80:	f7f8 f8fe 	bl	8000180 <memchr>
 8007f84:	b138      	cbz	r0, 8007f96 <_vfiprintf_r+0x176>
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	eba0 000a 	sub.w	r0, r0, sl
 8007f8c:	2240      	movs	r2, #64	@ 0x40
 8007f8e:	4082      	lsls	r2, r0
 8007f90:	4313      	orrs	r3, r2
 8007f92:	3401      	adds	r4, #1
 8007f94:	9304      	str	r3, [sp, #16]
 8007f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f9a:	482a      	ldr	r0, [pc, #168]	@ (8008044 <_vfiprintf_r+0x224>)
 8007f9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fa0:	2206      	movs	r2, #6
 8007fa2:	f7f8 f8ed 	bl	8000180 <memchr>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d03f      	beq.n	800802a <_vfiprintf_r+0x20a>
 8007faa:	4b27      	ldr	r3, [pc, #156]	@ (8008048 <_vfiprintf_r+0x228>)
 8007fac:	bb1b      	cbnz	r3, 8007ff6 <_vfiprintf_r+0x1d6>
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	3307      	adds	r3, #7
 8007fb2:	f023 0307 	bic.w	r3, r3, #7
 8007fb6:	3308      	adds	r3, #8
 8007fb8:	9303      	str	r3, [sp, #12]
 8007fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fbc:	443b      	add	r3, r7
 8007fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fc0:	e76a      	b.n	8007e98 <_vfiprintf_r+0x78>
 8007fc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	2001      	movs	r0, #1
 8007fca:	e7a8      	b.n	8007f1e <_vfiprintf_r+0xfe>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	3401      	adds	r4, #1
 8007fd0:	9305      	str	r3, [sp, #20]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	f04f 0c0a 	mov.w	ip, #10
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fde:	3a30      	subs	r2, #48	@ 0x30
 8007fe0:	2a09      	cmp	r2, #9
 8007fe2:	d903      	bls.n	8007fec <_vfiprintf_r+0x1cc>
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d0c6      	beq.n	8007f76 <_vfiprintf_r+0x156>
 8007fe8:	9105      	str	r1, [sp, #20]
 8007fea:	e7c4      	b.n	8007f76 <_vfiprintf_r+0x156>
 8007fec:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e7f0      	b.n	8007fd8 <_vfiprintf_r+0x1b8>
 8007ff6:	ab03      	add	r3, sp, #12
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	462a      	mov	r2, r5
 8007ffc:	4b13      	ldr	r3, [pc, #76]	@ (800804c <_vfiprintf_r+0x22c>)
 8007ffe:	a904      	add	r1, sp, #16
 8008000:	4630      	mov	r0, r6
 8008002:	f3af 8000 	nop.w
 8008006:	4607      	mov	r7, r0
 8008008:	1c78      	adds	r0, r7, #1
 800800a:	d1d6      	bne.n	8007fba <_vfiprintf_r+0x19a>
 800800c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800800e:	07d9      	lsls	r1, r3, #31
 8008010:	d405      	bmi.n	800801e <_vfiprintf_r+0x1fe>
 8008012:	89ab      	ldrh	r3, [r5, #12]
 8008014:	059a      	lsls	r2, r3, #22
 8008016:	d402      	bmi.n	800801e <_vfiprintf_r+0x1fe>
 8008018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800801a:	f7ff fddf 	bl	8007bdc <__retarget_lock_release_recursive>
 800801e:	89ab      	ldrh	r3, [r5, #12]
 8008020:	065b      	lsls	r3, r3, #25
 8008022:	f53f af1f 	bmi.w	8007e64 <_vfiprintf_r+0x44>
 8008026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008028:	e71e      	b.n	8007e68 <_vfiprintf_r+0x48>
 800802a:	ab03      	add	r3, sp, #12
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	462a      	mov	r2, r5
 8008030:	4b06      	ldr	r3, [pc, #24]	@ (800804c <_vfiprintf_r+0x22c>)
 8008032:	a904      	add	r1, sp, #16
 8008034:	4630      	mov	r0, r6
 8008036:	f000 f879 	bl	800812c <_printf_i>
 800803a:	e7e4      	b.n	8008006 <_vfiprintf_r+0x1e6>
 800803c:	0800898c 	.word	0x0800898c
 8008040:	08008992 	.word	0x08008992
 8008044:	08008996 	.word	0x08008996
 8008048:	00000000 	.word	0x00000000
 800804c:	08007dfb 	.word	0x08007dfb

08008050 <_printf_common>:
 8008050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008054:	4616      	mov	r6, r2
 8008056:	4698      	mov	r8, r3
 8008058:	688a      	ldr	r2, [r1, #8]
 800805a:	690b      	ldr	r3, [r1, #16]
 800805c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008060:	4293      	cmp	r3, r2
 8008062:	bfb8      	it	lt
 8008064:	4613      	movlt	r3, r2
 8008066:	6033      	str	r3, [r6, #0]
 8008068:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800806c:	4607      	mov	r7, r0
 800806e:	460c      	mov	r4, r1
 8008070:	b10a      	cbz	r2, 8008076 <_printf_common+0x26>
 8008072:	3301      	adds	r3, #1
 8008074:	6033      	str	r3, [r6, #0]
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	0699      	lsls	r1, r3, #26
 800807a:	bf42      	ittt	mi
 800807c:	6833      	ldrmi	r3, [r6, #0]
 800807e:	3302      	addmi	r3, #2
 8008080:	6033      	strmi	r3, [r6, #0]
 8008082:	6825      	ldr	r5, [r4, #0]
 8008084:	f015 0506 	ands.w	r5, r5, #6
 8008088:	d106      	bne.n	8008098 <_printf_common+0x48>
 800808a:	f104 0a19 	add.w	sl, r4, #25
 800808e:	68e3      	ldr	r3, [r4, #12]
 8008090:	6832      	ldr	r2, [r6, #0]
 8008092:	1a9b      	subs	r3, r3, r2
 8008094:	42ab      	cmp	r3, r5
 8008096:	dc26      	bgt.n	80080e6 <_printf_common+0x96>
 8008098:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800809c:	6822      	ldr	r2, [r4, #0]
 800809e:	3b00      	subs	r3, #0
 80080a0:	bf18      	it	ne
 80080a2:	2301      	movne	r3, #1
 80080a4:	0692      	lsls	r2, r2, #26
 80080a6:	d42b      	bmi.n	8008100 <_printf_common+0xb0>
 80080a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080ac:	4641      	mov	r1, r8
 80080ae:	4638      	mov	r0, r7
 80080b0:	47c8      	blx	r9
 80080b2:	3001      	adds	r0, #1
 80080b4:	d01e      	beq.n	80080f4 <_printf_common+0xa4>
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	6922      	ldr	r2, [r4, #16]
 80080ba:	f003 0306 	and.w	r3, r3, #6
 80080be:	2b04      	cmp	r3, #4
 80080c0:	bf02      	ittt	eq
 80080c2:	68e5      	ldreq	r5, [r4, #12]
 80080c4:	6833      	ldreq	r3, [r6, #0]
 80080c6:	1aed      	subeq	r5, r5, r3
 80080c8:	68a3      	ldr	r3, [r4, #8]
 80080ca:	bf0c      	ite	eq
 80080cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080d0:	2500      	movne	r5, #0
 80080d2:	4293      	cmp	r3, r2
 80080d4:	bfc4      	itt	gt
 80080d6:	1a9b      	subgt	r3, r3, r2
 80080d8:	18ed      	addgt	r5, r5, r3
 80080da:	2600      	movs	r6, #0
 80080dc:	341a      	adds	r4, #26
 80080de:	42b5      	cmp	r5, r6
 80080e0:	d11a      	bne.n	8008118 <_printf_common+0xc8>
 80080e2:	2000      	movs	r0, #0
 80080e4:	e008      	b.n	80080f8 <_printf_common+0xa8>
 80080e6:	2301      	movs	r3, #1
 80080e8:	4652      	mov	r2, sl
 80080ea:	4641      	mov	r1, r8
 80080ec:	4638      	mov	r0, r7
 80080ee:	47c8      	blx	r9
 80080f0:	3001      	adds	r0, #1
 80080f2:	d103      	bne.n	80080fc <_printf_common+0xac>
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fc:	3501      	adds	r5, #1
 80080fe:	e7c6      	b.n	800808e <_printf_common+0x3e>
 8008100:	18e1      	adds	r1, r4, r3
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	2030      	movs	r0, #48	@ 0x30
 8008106:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800810a:	4422      	add	r2, r4
 800810c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008110:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008114:	3302      	adds	r3, #2
 8008116:	e7c7      	b.n	80080a8 <_printf_common+0x58>
 8008118:	2301      	movs	r3, #1
 800811a:	4622      	mov	r2, r4
 800811c:	4641      	mov	r1, r8
 800811e:	4638      	mov	r0, r7
 8008120:	47c8      	blx	r9
 8008122:	3001      	adds	r0, #1
 8008124:	d0e6      	beq.n	80080f4 <_printf_common+0xa4>
 8008126:	3601      	adds	r6, #1
 8008128:	e7d9      	b.n	80080de <_printf_common+0x8e>
	...

0800812c <_printf_i>:
 800812c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008130:	7e0f      	ldrb	r7, [r1, #24]
 8008132:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008134:	2f78      	cmp	r7, #120	@ 0x78
 8008136:	4691      	mov	r9, r2
 8008138:	4680      	mov	r8, r0
 800813a:	460c      	mov	r4, r1
 800813c:	469a      	mov	sl, r3
 800813e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008142:	d807      	bhi.n	8008154 <_printf_i+0x28>
 8008144:	2f62      	cmp	r7, #98	@ 0x62
 8008146:	d80a      	bhi.n	800815e <_printf_i+0x32>
 8008148:	2f00      	cmp	r7, #0
 800814a:	f000 80d1 	beq.w	80082f0 <_printf_i+0x1c4>
 800814e:	2f58      	cmp	r7, #88	@ 0x58
 8008150:	f000 80b8 	beq.w	80082c4 <_printf_i+0x198>
 8008154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008158:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800815c:	e03a      	b.n	80081d4 <_printf_i+0xa8>
 800815e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008162:	2b15      	cmp	r3, #21
 8008164:	d8f6      	bhi.n	8008154 <_printf_i+0x28>
 8008166:	a101      	add	r1, pc, #4	@ (adr r1, 800816c <_printf_i+0x40>)
 8008168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800816c:	080081c5 	.word	0x080081c5
 8008170:	080081d9 	.word	0x080081d9
 8008174:	08008155 	.word	0x08008155
 8008178:	08008155 	.word	0x08008155
 800817c:	08008155 	.word	0x08008155
 8008180:	08008155 	.word	0x08008155
 8008184:	080081d9 	.word	0x080081d9
 8008188:	08008155 	.word	0x08008155
 800818c:	08008155 	.word	0x08008155
 8008190:	08008155 	.word	0x08008155
 8008194:	08008155 	.word	0x08008155
 8008198:	080082d7 	.word	0x080082d7
 800819c:	08008203 	.word	0x08008203
 80081a0:	08008291 	.word	0x08008291
 80081a4:	08008155 	.word	0x08008155
 80081a8:	08008155 	.word	0x08008155
 80081ac:	080082f9 	.word	0x080082f9
 80081b0:	08008155 	.word	0x08008155
 80081b4:	08008203 	.word	0x08008203
 80081b8:	08008155 	.word	0x08008155
 80081bc:	08008155 	.word	0x08008155
 80081c0:	08008299 	.word	0x08008299
 80081c4:	6833      	ldr	r3, [r6, #0]
 80081c6:	1d1a      	adds	r2, r3, #4
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6032      	str	r2, [r6, #0]
 80081cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081d4:	2301      	movs	r3, #1
 80081d6:	e09c      	b.n	8008312 <_printf_i+0x1e6>
 80081d8:	6833      	ldr	r3, [r6, #0]
 80081da:	6820      	ldr	r0, [r4, #0]
 80081dc:	1d19      	adds	r1, r3, #4
 80081de:	6031      	str	r1, [r6, #0]
 80081e0:	0606      	lsls	r6, r0, #24
 80081e2:	d501      	bpl.n	80081e8 <_printf_i+0xbc>
 80081e4:	681d      	ldr	r5, [r3, #0]
 80081e6:	e003      	b.n	80081f0 <_printf_i+0xc4>
 80081e8:	0645      	lsls	r5, r0, #25
 80081ea:	d5fb      	bpl.n	80081e4 <_printf_i+0xb8>
 80081ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081f0:	2d00      	cmp	r5, #0
 80081f2:	da03      	bge.n	80081fc <_printf_i+0xd0>
 80081f4:	232d      	movs	r3, #45	@ 0x2d
 80081f6:	426d      	negs	r5, r5
 80081f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081fc:	4858      	ldr	r0, [pc, #352]	@ (8008360 <_printf_i+0x234>)
 80081fe:	230a      	movs	r3, #10
 8008200:	e011      	b.n	8008226 <_printf_i+0xfa>
 8008202:	6821      	ldr	r1, [r4, #0]
 8008204:	6833      	ldr	r3, [r6, #0]
 8008206:	0608      	lsls	r0, r1, #24
 8008208:	f853 5b04 	ldr.w	r5, [r3], #4
 800820c:	d402      	bmi.n	8008214 <_printf_i+0xe8>
 800820e:	0649      	lsls	r1, r1, #25
 8008210:	bf48      	it	mi
 8008212:	b2ad      	uxthmi	r5, r5
 8008214:	2f6f      	cmp	r7, #111	@ 0x6f
 8008216:	4852      	ldr	r0, [pc, #328]	@ (8008360 <_printf_i+0x234>)
 8008218:	6033      	str	r3, [r6, #0]
 800821a:	bf14      	ite	ne
 800821c:	230a      	movne	r3, #10
 800821e:	2308      	moveq	r3, #8
 8008220:	2100      	movs	r1, #0
 8008222:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008226:	6866      	ldr	r6, [r4, #4]
 8008228:	60a6      	str	r6, [r4, #8]
 800822a:	2e00      	cmp	r6, #0
 800822c:	db05      	blt.n	800823a <_printf_i+0x10e>
 800822e:	6821      	ldr	r1, [r4, #0]
 8008230:	432e      	orrs	r6, r5
 8008232:	f021 0104 	bic.w	r1, r1, #4
 8008236:	6021      	str	r1, [r4, #0]
 8008238:	d04b      	beq.n	80082d2 <_printf_i+0x1a6>
 800823a:	4616      	mov	r6, r2
 800823c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008240:	fb03 5711 	mls	r7, r3, r1, r5
 8008244:	5dc7      	ldrb	r7, [r0, r7]
 8008246:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800824a:	462f      	mov	r7, r5
 800824c:	42bb      	cmp	r3, r7
 800824e:	460d      	mov	r5, r1
 8008250:	d9f4      	bls.n	800823c <_printf_i+0x110>
 8008252:	2b08      	cmp	r3, #8
 8008254:	d10b      	bne.n	800826e <_printf_i+0x142>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	07df      	lsls	r7, r3, #31
 800825a:	d508      	bpl.n	800826e <_printf_i+0x142>
 800825c:	6923      	ldr	r3, [r4, #16]
 800825e:	6861      	ldr	r1, [r4, #4]
 8008260:	4299      	cmp	r1, r3
 8008262:	bfde      	ittt	le
 8008264:	2330      	movle	r3, #48	@ 0x30
 8008266:	f806 3c01 	strble.w	r3, [r6, #-1]
 800826a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800826e:	1b92      	subs	r2, r2, r6
 8008270:	6122      	str	r2, [r4, #16]
 8008272:	f8cd a000 	str.w	sl, [sp]
 8008276:	464b      	mov	r3, r9
 8008278:	aa03      	add	r2, sp, #12
 800827a:	4621      	mov	r1, r4
 800827c:	4640      	mov	r0, r8
 800827e:	f7ff fee7 	bl	8008050 <_printf_common>
 8008282:	3001      	adds	r0, #1
 8008284:	d14a      	bne.n	800831c <_printf_i+0x1f0>
 8008286:	f04f 30ff 	mov.w	r0, #4294967295
 800828a:	b004      	add	sp, #16
 800828c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	f043 0320 	orr.w	r3, r3, #32
 8008296:	6023      	str	r3, [r4, #0]
 8008298:	4832      	ldr	r0, [pc, #200]	@ (8008364 <_printf_i+0x238>)
 800829a:	2778      	movs	r7, #120	@ 0x78
 800829c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	6831      	ldr	r1, [r6, #0]
 80082a4:	061f      	lsls	r7, r3, #24
 80082a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80082aa:	d402      	bmi.n	80082b2 <_printf_i+0x186>
 80082ac:	065f      	lsls	r7, r3, #25
 80082ae:	bf48      	it	mi
 80082b0:	b2ad      	uxthmi	r5, r5
 80082b2:	6031      	str	r1, [r6, #0]
 80082b4:	07d9      	lsls	r1, r3, #31
 80082b6:	bf44      	itt	mi
 80082b8:	f043 0320 	orrmi.w	r3, r3, #32
 80082bc:	6023      	strmi	r3, [r4, #0]
 80082be:	b11d      	cbz	r5, 80082c8 <_printf_i+0x19c>
 80082c0:	2310      	movs	r3, #16
 80082c2:	e7ad      	b.n	8008220 <_printf_i+0xf4>
 80082c4:	4826      	ldr	r0, [pc, #152]	@ (8008360 <_printf_i+0x234>)
 80082c6:	e7e9      	b.n	800829c <_printf_i+0x170>
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	f023 0320 	bic.w	r3, r3, #32
 80082ce:	6023      	str	r3, [r4, #0]
 80082d0:	e7f6      	b.n	80082c0 <_printf_i+0x194>
 80082d2:	4616      	mov	r6, r2
 80082d4:	e7bd      	b.n	8008252 <_printf_i+0x126>
 80082d6:	6833      	ldr	r3, [r6, #0]
 80082d8:	6825      	ldr	r5, [r4, #0]
 80082da:	6961      	ldr	r1, [r4, #20]
 80082dc:	1d18      	adds	r0, r3, #4
 80082de:	6030      	str	r0, [r6, #0]
 80082e0:	062e      	lsls	r6, r5, #24
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	d501      	bpl.n	80082ea <_printf_i+0x1be>
 80082e6:	6019      	str	r1, [r3, #0]
 80082e8:	e002      	b.n	80082f0 <_printf_i+0x1c4>
 80082ea:	0668      	lsls	r0, r5, #25
 80082ec:	d5fb      	bpl.n	80082e6 <_printf_i+0x1ba>
 80082ee:	8019      	strh	r1, [r3, #0]
 80082f0:	2300      	movs	r3, #0
 80082f2:	6123      	str	r3, [r4, #16]
 80082f4:	4616      	mov	r6, r2
 80082f6:	e7bc      	b.n	8008272 <_printf_i+0x146>
 80082f8:	6833      	ldr	r3, [r6, #0]
 80082fa:	1d1a      	adds	r2, r3, #4
 80082fc:	6032      	str	r2, [r6, #0]
 80082fe:	681e      	ldr	r6, [r3, #0]
 8008300:	6862      	ldr	r2, [r4, #4]
 8008302:	2100      	movs	r1, #0
 8008304:	4630      	mov	r0, r6
 8008306:	f7f7 ff3b 	bl	8000180 <memchr>
 800830a:	b108      	cbz	r0, 8008310 <_printf_i+0x1e4>
 800830c:	1b80      	subs	r0, r0, r6
 800830e:	6060      	str	r0, [r4, #4]
 8008310:	6863      	ldr	r3, [r4, #4]
 8008312:	6123      	str	r3, [r4, #16]
 8008314:	2300      	movs	r3, #0
 8008316:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800831a:	e7aa      	b.n	8008272 <_printf_i+0x146>
 800831c:	6923      	ldr	r3, [r4, #16]
 800831e:	4632      	mov	r2, r6
 8008320:	4649      	mov	r1, r9
 8008322:	4640      	mov	r0, r8
 8008324:	47d0      	blx	sl
 8008326:	3001      	adds	r0, #1
 8008328:	d0ad      	beq.n	8008286 <_printf_i+0x15a>
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	079b      	lsls	r3, r3, #30
 800832e:	d413      	bmi.n	8008358 <_printf_i+0x22c>
 8008330:	68e0      	ldr	r0, [r4, #12]
 8008332:	9b03      	ldr	r3, [sp, #12]
 8008334:	4298      	cmp	r0, r3
 8008336:	bfb8      	it	lt
 8008338:	4618      	movlt	r0, r3
 800833a:	e7a6      	b.n	800828a <_printf_i+0x15e>
 800833c:	2301      	movs	r3, #1
 800833e:	4632      	mov	r2, r6
 8008340:	4649      	mov	r1, r9
 8008342:	4640      	mov	r0, r8
 8008344:	47d0      	blx	sl
 8008346:	3001      	adds	r0, #1
 8008348:	d09d      	beq.n	8008286 <_printf_i+0x15a>
 800834a:	3501      	adds	r5, #1
 800834c:	68e3      	ldr	r3, [r4, #12]
 800834e:	9903      	ldr	r1, [sp, #12]
 8008350:	1a5b      	subs	r3, r3, r1
 8008352:	42ab      	cmp	r3, r5
 8008354:	dcf2      	bgt.n	800833c <_printf_i+0x210>
 8008356:	e7eb      	b.n	8008330 <_printf_i+0x204>
 8008358:	2500      	movs	r5, #0
 800835a:	f104 0619 	add.w	r6, r4, #25
 800835e:	e7f5      	b.n	800834c <_printf_i+0x220>
 8008360:	0800899d 	.word	0x0800899d
 8008364:	080089ae 	.word	0x080089ae

08008368 <__sflush_r>:
 8008368:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	0716      	lsls	r6, r2, #28
 8008370:	4605      	mov	r5, r0
 8008372:	460c      	mov	r4, r1
 8008374:	d454      	bmi.n	8008420 <__sflush_r+0xb8>
 8008376:	684b      	ldr	r3, [r1, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	dc02      	bgt.n	8008382 <__sflush_r+0x1a>
 800837c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	dd48      	ble.n	8008414 <__sflush_r+0xac>
 8008382:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008384:	2e00      	cmp	r6, #0
 8008386:	d045      	beq.n	8008414 <__sflush_r+0xac>
 8008388:	2300      	movs	r3, #0
 800838a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800838e:	682f      	ldr	r7, [r5, #0]
 8008390:	6a21      	ldr	r1, [r4, #32]
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	d030      	beq.n	80083f8 <__sflush_r+0x90>
 8008396:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	0759      	lsls	r1, r3, #29
 800839c:	d505      	bpl.n	80083aa <__sflush_r+0x42>
 800839e:	6863      	ldr	r3, [r4, #4]
 80083a0:	1ad2      	subs	r2, r2, r3
 80083a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083a4:	b10b      	cbz	r3, 80083aa <__sflush_r+0x42>
 80083a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083a8:	1ad2      	subs	r2, r2, r3
 80083aa:	2300      	movs	r3, #0
 80083ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083ae:	6a21      	ldr	r1, [r4, #32]
 80083b0:	4628      	mov	r0, r5
 80083b2:	47b0      	blx	r6
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	d106      	bne.n	80083c8 <__sflush_r+0x60>
 80083ba:	6829      	ldr	r1, [r5, #0]
 80083bc:	291d      	cmp	r1, #29
 80083be:	d82b      	bhi.n	8008418 <__sflush_r+0xb0>
 80083c0:	4a28      	ldr	r2, [pc, #160]	@ (8008464 <__sflush_r+0xfc>)
 80083c2:	40ca      	lsrs	r2, r1
 80083c4:	07d6      	lsls	r6, r2, #31
 80083c6:	d527      	bpl.n	8008418 <__sflush_r+0xb0>
 80083c8:	2200      	movs	r2, #0
 80083ca:	6062      	str	r2, [r4, #4]
 80083cc:	04d9      	lsls	r1, r3, #19
 80083ce:	6922      	ldr	r2, [r4, #16]
 80083d0:	6022      	str	r2, [r4, #0]
 80083d2:	d504      	bpl.n	80083de <__sflush_r+0x76>
 80083d4:	1c42      	adds	r2, r0, #1
 80083d6:	d101      	bne.n	80083dc <__sflush_r+0x74>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	b903      	cbnz	r3, 80083de <__sflush_r+0x76>
 80083dc:	6560      	str	r0, [r4, #84]	@ 0x54
 80083de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083e0:	602f      	str	r7, [r5, #0]
 80083e2:	b1b9      	cbz	r1, 8008414 <__sflush_r+0xac>
 80083e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083e8:	4299      	cmp	r1, r3
 80083ea:	d002      	beq.n	80083f2 <__sflush_r+0x8a>
 80083ec:	4628      	mov	r0, r5
 80083ee:	f7ff fbf7 	bl	8007be0 <_free_r>
 80083f2:	2300      	movs	r3, #0
 80083f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80083f6:	e00d      	b.n	8008414 <__sflush_r+0xac>
 80083f8:	2301      	movs	r3, #1
 80083fa:	4628      	mov	r0, r5
 80083fc:	47b0      	blx	r6
 80083fe:	4602      	mov	r2, r0
 8008400:	1c50      	adds	r0, r2, #1
 8008402:	d1c9      	bne.n	8008398 <__sflush_r+0x30>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0c6      	beq.n	8008398 <__sflush_r+0x30>
 800840a:	2b1d      	cmp	r3, #29
 800840c:	d001      	beq.n	8008412 <__sflush_r+0xaa>
 800840e:	2b16      	cmp	r3, #22
 8008410:	d11d      	bne.n	800844e <__sflush_r+0xe6>
 8008412:	602f      	str	r7, [r5, #0]
 8008414:	2000      	movs	r0, #0
 8008416:	e021      	b.n	800845c <__sflush_r+0xf4>
 8008418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800841c:	b21b      	sxth	r3, r3
 800841e:	e01a      	b.n	8008456 <__sflush_r+0xee>
 8008420:	690f      	ldr	r7, [r1, #16]
 8008422:	2f00      	cmp	r7, #0
 8008424:	d0f6      	beq.n	8008414 <__sflush_r+0xac>
 8008426:	0793      	lsls	r3, r2, #30
 8008428:	680e      	ldr	r6, [r1, #0]
 800842a:	bf08      	it	eq
 800842c:	694b      	ldreq	r3, [r1, #20]
 800842e:	600f      	str	r7, [r1, #0]
 8008430:	bf18      	it	ne
 8008432:	2300      	movne	r3, #0
 8008434:	1bf6      	subs	r6, r6, r7
 8008436:	608b      	str	r3, [r1, #8]
 8008438:	2e00      	cmp	r6, #0
 800843a:	ddeb      	ble.n	8008414 <__sflush_r+0xac>
 800843c:	6a21      	ldr	r1, [r4, #32]
 800843e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008442:	4633      	mov	r3, r6
 8008444:	463a      	mov	r2, r7
 8008446:	4628      	mov	r0, r5
 8008448:	47e0      	blx	ip
 800844a:	2800      	cmp	r0, #0
 800844c:	dc07      	bgt.n	800845e <__sflush_r+0xf6>
 800844e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008456:	81a3      	strh	r3, [r4, #12]
 8008458:	f04f 30ff 	mov.w	r0, #4294967295
 800845c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845e:	4407      	add	r7, r0
 8008460:	1a36      	subs	r6, r6, r0
 8008462:	e7e9      	b.n	8008438 <__sflush_r+0xd0>
 8008464:	20400001 	.word	0x20400001

08008468 <_fflush_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	690b      	ldr	r3, [r1, #16]
 800846c:	4605      	mov	r5, r0
 800846e:	460c      	mov	r4, r1
 8008470:	b913      	cbnz	r3, 8008478 <_fflush_r+0x10>
 8008472:	2500      	movs	r5, #0
 8008474:	4628      	mov	r0, r5
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	b118      	cbz	r0, 8008482 <_fflush_r+0x1a>
 800847a:	6a03      	ldr	r3, [r0, #32]
 800847c:	b90b      	cbnz	r3, 8008482 <_fflush_r+0x1a>
 800847e:	f7ff faa7 	bl	80079d0 <__sinit>
 8008482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0f3      	beq.n	8008472 <_fflush_r+0xa>
 800848a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800848c:	07d0      	lsls	r0, r2, #31
 800848e:	d404      	bmi.n	800849a <_fflush_r+0x32>
 8008490:	0599      	lsls	r1, r3, #22
 8008492:	d402      	bmi.n	800849a <_fflush_r+0x32>
 8008494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008496:	f7ff fba0 	bl	8007bda <__retarget_lock_acquire_recursive>
 800849a:	4628      	mov	r0, r5
 800849c:	4621      	mov	r1, r4
 800849e:	f7ff ff63 	bl	8008368 <__sflush_r>
 80084a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084a4:	07da      	lsls	r2, r3, #31
 80084a6:	4605      	mov	r5, r0
 80084a8:	d4e4      	bmi.n	8008474 <_fflush_r+0xc>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	059b      	lsls	r3, r3, #22
 80084ae:	d4e1      	bmi.n	8008474 <_fflush_r+0xc>
 80084b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084b2:	f7ff fb93 	bl	8007bdc <__retarget_lock_release_recursive>
 80084b6:	e7dd      	b.n	8008474 <_fflush_r+0xc>

080084b8 <__swbuf_r>:
 80084b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ba:	460e      	mov	r6, r1
 80084bc:	4614      	mov	r4, r2
 80084be:	4605      	mov	r5, r0
 80084c0:	b118      	cbz	r0, 80084ca <__swbuf_r+0x12>
 80084c2:	6a03      	ldr	r3, [r0, #32]
 80084c4:	b90b      	cbnz	r3, 80084ca <__swbuf_r+0x12>
 80084c6:	f7ff fa83 	bl	80079d0 <__sinit>
 80084ca:	69a3      	ldr	r3, [r4, #24]
 80084cc:	60a3      	str	r3, [r4, #8]
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	071a      	lsls	r2, r3, #28
 80084d2:	d501      	bpl.n	80084d8 <__swbuf_r+0x20>
 80084d4:	6923      	ldr	r3, [r4, #16]
 80084d6:	b943      	cbnz	r3, 80084ea <__swbuf_r+0x32>
 80084d8:	4621      	mov	r1, r4
 80084da:	4628      	mov	r0, r5
 80084dc:	f000 f82a 	bl	8008534 <__swsetup_r>
 80084e0:	b118      	cbz	r0, 80084ea <__swbuf_r+0x32>
 80084e2:	f04f 37ff 	mov.w	r7, #4294967295
 80084e6:	4638      	mov	r0, r7
 80084e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	6922      	ldr	r2, [r4, #16]
 80084ee:	1a98      	subs	r0, r3, r2
 80084f0:	6963      	ldr	r3, [r4, #20]
 80084f2:	b2f6      	uxtb	r6, r6
 80084f4:	4283      	cmp	r3, r0
 80084f6:	4637      	mov	r7, r6
 80084f8:	dc05      	bgt.n	8008506 <__swbuf_r+0x4e>
 80084fa:	4621      	mov	r1, r4
 80084fc:	4628      	mov	r0, r5
 80084fe:	f7ff ffb3 	bl	8008468 <_fflush_r>
 8008502:	2800      	cmp	r0, #0
 8008504:	d1ed      	bne.n	80084e2 <__swbuf_r+0x2a>
 8008506:	68a3      	ldr	r3, [r4, #8]
 8008508:	3b01      	subs	r3, #1
 800850a:	60a3      	str	r3, [r4, #8]
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	6022      	str	r2, [r4, #0]
 8008512:	701e      	strb	r6, [r3, #0]
 8008514:	6962      	ldr	r2, [r4, #20]
 8008516:	1c43      	adds	r3, r0, #1
 8008518:	429a      	cmp	r2, r3
 800851a:	d004      	beq.n	8008526 <__swbuf_r+0x6e>
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	07db      	lsls	r3, r3, #31
 8008520:	d5e1      	bpl.n	80084e6 <__swbuf_r+0x2e>
 8008522:	2e0a      	cmp	r6, #10
 8008524:	d1df      	bne.n	80084e6 <__swbuf_r+0x2e>
 8008526:	4621      	mov	r1, r4
 8008528:	4628      	mov	r0, r5
 800852a:	f7ff ff9d 	bl	8008468 <_fflush_r>
 800852e:	2800      	cmp	r0, #0
 8008530:	d0d9      	beq.n	80084e6 <__swbuf_r+0x2e>
 8008532:	e7d6      	b.n	80084e2 <__swbuf_r+0x2a>

08008534 <__swsetup_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4b29      	ldr	r3, [pc, #164]	@ (80085dc <__swsetup_r+0xa8>)
 8008538:	4605      	mov	r5, r0
 800853a:	6818      	ldr	r0, [r3, #0]
 800853c:	460c      	mov	r4, r1
 800853e:	b118      	cbz	r0, 8008548 <__swsetup_r+0x14>
 8008540:	6a03      	ldr	r3, [r0, #32]
 8008542:	b90b      	cbnz	r3, 8008548 <__swsetup_r+0x14>
 8008544:	f7ff fa44 	bl	80079d0 <__sinit>
 8008548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800854c:	0719      	lsls	r1, r3, #28
 800854e:	d422      	bmi.n	8008596 <__swsetup_r+0x62>
 8008550:	06da      	lsls	r2, r3, #27
 8008552:	d407      	bmi.n	8008564 <__swsetup_r+0x30>
 8008554:	2209      	movs	r2, #9
 8008556:	602a      	str	r2, [r5, #0]
 8008558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	f04f 30ff 	mov.w	r0, #4294967295
 8008562:	e033      	b.n	80085cc <__swsetup_r+0x98>
 8008564:	0758      	lsls	r0, r3, #29
 8008566:	d512      	bpl.n	800858e <__swsetup_r+0x5a>
 8008568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800856a:	b141      	cbz	r1, 800857e <__swsetup_r+0x4a>
 800856c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008570:	4299      	cmp	r1, r3
 8008572:	d002      	beq.n	800857a <__swsetup_r+0x46>
 8008574:	4628      	mov	r0, r5
 8008576:	f7ff fb33 	bl	8007be0 <_free_r>
 800857a:	2300      	movs	r3, #0
 800857c:	6363      	str	r3, [r4, #52]	@ 0x34
 800857e:	89a3      	ldrh	r3, [r4, #12]
 8008580:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008584:	81a3      	strh	r3, [r4, #12]
 8008586:	2300      	movs	r3, #0
 8008588:	6063      	str	r3, [r4, #4]
 800858a:	6923      	ldr	r3, [r4, #16]
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	f043 0308 	orr.w	r3, r3, #8
 8008594:	81a3      	strh	r3, [r4, #12]
 8008596:	6923      	ldr	r3, [r4, #16]
 8008598:	b94b      	cbnz	r3, 80085ae <__swsetup_r+0x7a>
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80085a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085a4:	d003      	beq.n	80085ae <__swsetup_r+0x7a>
 80085a6:	4621      	mov	r1, r4
 80085a8:	4628      	mov	r0, r5
 80085aa:	f000 f84f 	bl	800864c <__smakebuf_r>
 80085ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085b2:	f013 0201 	ands.w	r2, r3, #1
 80085b6:	d00a      	beq.n	80085ce <__swsetup_r+0x9a>
 80085b8:	2200      	movs	r2, #0
 80085ba:	60a2      	str	r2, [r4, #8]
 80085bc:	6962      	ldr	r2, [r4, #20]
 80085be:	4252      	negs	r2, r2
 80085c0:	61a2      	str	r2, [r4, #24]
 80085c2:	6922      	ldr	r2, [r4, #16]
 80085c4:	b942      	cbnz	r2, 80085d8 <__swsetup_r+0xa4>
 80085c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80085ca:	d1c5      	bne.n	8008558 <__swsetup_r+0x24>
 80085cc:	bd38      	pop	{r3, r4, r5, pc}
 80085ce:	0799      	lsls	r1, r3, #30
 80085d0:	bf58      	it	pl
 80085d2:	6962      	ldrpl	r2, [r4, #20]
 80085d4:	60a2      	str	r2, [r4, #8]
 80085d6:	e7f4      	b.n	80085c2 <__swsetup_r+0x8e>
 80085d8:	2000      	movs	r0, #0
 80085da:	e7f7      	b.n	80085cc <__swsetup_r+0x98>
 80085dc:	20000018 	.word	0x20000018

080085e0 <_sbrk_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4d06      	ldr	r5, [pc, #24]	@ (80085fc <_sbrk_r+0x1c>)
 80085e4:	2300      	movs	r3, #0
 80085e6:	4604      	mov	r4, r0
 80085e8:	4608      	mov	r0, r1
 80085ea:	602b      	str	r3, [r5, #0]
 80085ec:	f7f8 fb06 	bl	8000bfc <_sbrk>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d102      	bne.n	80085fa <_sbrk_r+0x1a>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	b103      	cbz	r3, 80085fa <_sbrk_r+0x1a>
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	200004c0 	.word	0x200004c0

08008600 <__swhatbuf_r>:
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	460c      	mov	r4, r1
 8008604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008608:	2900      	cmp	r1, #0
 800860a:	b096      	sub	sp, #88	@ 0x58
 800860c:	4615      	mov	r5, r2
 800860e:	461e      	mov	r6, r3
 8008610:	da0d      	bge.n	800862e <__swhatbuf_r+0x2e>
 8008612:	89a3      	ldrh	r3, [r4, #12]
 8008614:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008618:	f04f 0100 	mov.w	r1, #0
 800861c:	bf14      	ite	ne
 800861e:	2340      	movne	r3, #64	@ 0x40
 8008620:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008624:	2000      	movs	r0, #0
 8008626:	6031      	str	r1, [r6, #0]
 8008628:	602b      	str	r3, [r5, #0]
 800862a:	b016      	add	sp, #88	@ 0x58
 800862c:	bd70      	pop	{r4, r5, r6, pc}
 800862e:	466a      	mov	r2, sp
 8008630:	f000 f848 	bl	80086c4 <_fstat_r>
 8008634:	2800      	cmp	r0, #0
 8008636:	dbec      	blt.n	8008612 <__swhatbuf_r+0x12>
 8008638:	9901      	ldr	r1, [sp, #4]
 800863a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800863e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008642:	4259      	negs	r1, r3
 8008644:	4159      	adcs	r1, r3
 8008646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800864a:	e7eb      	b.n	8008624 <__swhatbuf_r+0x24>

0800864c <__smakebuf_r>:
 800864c:	898b      	ldrh	r3, [r1, #12]
 800864e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008650:	079d      	lsls	r5, r3, #30
 8008652:	4606      	mov	r6, r0
 8008654:	460c      	mov	r4, r1
 8008656:	d507      	bpl.n	8008668 <__smakebuf_r+0x1c>
 8008658:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	6123      	str	r3, [r4, #16]
 8008660:	2301      	movs	r3, #1
 8008662:	6163      	str	r3, [r4, #20]
 8008664:	b003      	add	sp, #12
 8008666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008668:	ab01      	add	r3, sp, #4
 800866a:	466a      	mov	r2, sp
 800866c:	f7ff ffc8 	bl	8008600 <__swhatbuf_r>
 8008670:	9f00      	ldr	r7, [sp, #0]
 8008672:	4605      	mov	r5, r0
 8008674:	4639      	mov	r1, r7
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff fb1e 	bl	8007cb8 <_malloc_r>
 800867c:	b948      	cbnz	r0, 8008692 <__smakebuf_r+0x46>
 800867e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008682:	059a      	lsls	r2, r3, #22
 8008684:	d4ee      	bmi.n	8008664 <__smakebuf_r+0x18>
 8008686:	f023 0303 	bic.w	r3, r3, #3
 800868a:	f043 0302 	orr.w	r3, r3, #2
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	e7e2      	b.n	8008658 <__smakebuf_r+0xc>
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	6020      	str	r0, [r4, #0]
 8008696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	9b01      	ldr	r3, [sp, #4]
 800869e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80086a2:	b15b      	cbz	r3, 80086bc <__smakebuf_r+0x70>
 80086a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086a8:	4630      	mov	r0, r6
 80086aa:	f000 f81d 	bl	80086e8 <_isatty_r>
 80086ae:	b128      	cbz	r0, 80086bc <__smakebuf_r+0x70>
 80086b0:	89a3      	ldrh	r3, [r4, #12]
 80086b2:	f023 0303 	bic.w	r3, r3, #3
 80086b6:	f043 0301 	orr.w	r3, r3, #1
 80086ba:	81a3      	strh	r3, [r4, #12]
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	431d      	orrs	r5, r3
 80086c0:	81a5      	strh	r5, [r4, #12]
 80086c2:	e7cf      	b.n	8008664 <__smakebuf_r+0x18>

080086c4 <_fstat_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4d07      	ldr	r5, [pc, #28]	@ (80086e4 <_fstat_r+0x20>)
 80086c8:	2300      	movs	r3, #0
 80086ca:	4604      	mov	r4, r0
 80086cc:	4608      	mov	r0, r1
 80086ce:	4611      	mov	r1, r2
 80086d0:	602b      	str	r3, [r5, #0]
 80086d2:	f7f8 fa6d 	bl	8000bb0 <_fstat>
 80086d6:	1c43      	adds	r3, r0, #1
 80086d8:	d102      	bne.n	80086e0 <_fstat_r+0x1c>
 80086da:	682b      	ldr	r3, [r5, #0]
 80086dc:	b103      	cbz	r3, 80086e0 <_fstat_r+0x1c>
 80086de:	6023      	str	r3, [r4, #0]
 80086e0:	bd38      	pop	{r3, r4, r5, pc}
 80086e2:	bf00      	nop
 80086e4:	200004c0 	.word	0x200004c0

080086e8 <_isatty_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4d06      	ldr	r5, [pc, #24]	@ (8008704 <_isatty_r+0x1c>)
 80086ec:	2300      	movs	r3, #0
 80086ee:	4604      	mov	r4, r0
 80086f0:	4608      	mov	r0, r1
 80086f2:	602b      	str	r3, [r5, #0]
 80086f4:	f7f8 fa6b 	bl	8000bce <_isatty>
 80086f8:	1c43      	adds	r3, r0, #1
 80086fa:	d102      	bne.n	8008702 <_isatty_r+0x1a>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	b103      	cbz	r3, 8008702 <_isatty_r+0x1a>
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	bd38      	pop	{r3, r4, r5, pc}
 8008704:	200004c0 	.word	0x200004c0

08008708 <_init>:
 8008708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870a:	bf00      	nop
 800870c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870e:	bc08      	pop	{r3}
 8008710:	469e      	mov	lr, r3
 8008712:	4770      	bx	lr

08008714 <_fini>:
 8008714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008716:	bf00      	nop
 8008718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871a:	bc08      	pop	{r3}
 800871c:	469e      	mov	lr, r3
 800871e:	4770      	bx	lr
